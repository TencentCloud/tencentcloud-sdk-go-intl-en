// Copyright (c) 2017-2025 Tencent. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20220105

import (
    tcerr "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/errors"
    tchttp "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/http"
    "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/json"
)

// Predefined struct for user
type ApplyEmbedIntervalRequestParams struct {
	// Shares the project ID. Required.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Shares the page ID. This field is empty (0) for embedding a dashboard and is not passed for embedding ChatBI.
	PageId *uint64 `json:"PageId,omitnil,omitempty" name:"PageId"`

	// Token requiring extension.
	BIToken *string `json:"BIToken,omitnil,omitempty" name:"BIToken"`

	// Alternate field.
	ExtraParam *string `json:"ExtraParam,omitnil,omitempty" name:"ExtraParam"`

	// embed: page/dashboard embedding.
	// chatBIEmbed: ChatBI embedding.
	Intention *string `json:"Intention,omitnil,omitempty" name:"Intention"`

	// panel: dashboard; page: page.
	// project, during ChatBI embedding.
	Scope *string `json:"Scope,omitnil,omitempty" name:"Scope"`
}

type ApplyEmbedIntervalRequest struct {
	*tchttp.BaseRequest
	
	// Shares the project ID. Required.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Shares the page ID. This field is empty (0) for embedding a dashboard and is not passed for embedding ChatBI.
	PageId *uint64 `json:"PageId,omitnil,omitempty" name:"PageId"`

	// Token requiring extension.
	BIToken *string `json:"BIToken,omitnil,omitempty" name:"BIToken"`

	// Alternate field.
	ExtraParam *string `json:"ExtraParam,omitnil,omitempty" name:"ExtraParam"`

	// embed: page/dashboard embedding.
	// chatBIEmbed: ChatBI embedding.
	Intention *string `json:"Intention,omitnil,omitempty" name:"Intention"`

	// panel: dashboard; page: page.
	// project, during ChatBI embedding.
	Scope *string `json:"Scope,omitnil,omitempty" name:"Scope"`
}

func (r *ApplyEmbedIntervalRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ApplyEmbedIntervalRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageId")
	delete(f, "BIToken")
	delete(f, "ExtraParam")
	delete(f, "Intention")
	delete(f, "Scope")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ApplyEmbedIntervalRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ApplyEmbedIntervalResponseParams struct {
	// Custom error information object.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ErrorInfo *ErrorInfo `json:"ErrorInfo,omitnil,omitempty" name:"ErrorInfo"`

	// Additional parameters.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Extra *string `json:"Extra,omitnil,omitempty" name:"Extra"`

	// Result data.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Data *ApplyEmbedTokenInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Result description.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Msg *string `json:"Msg,omitnil,omitempty" name:"Msg"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ApplyEmbedIntervalResponse struct {
	*tchttp.BaseResponse
	Response *ApplyEmbedIntervalResponseParams `json:"Response"`
}

func (r *ApplyEmbedIntervalResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ApplyEmbedIntervalResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplyEmbedTokenInfo struct {
	// Request result.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Result *bool `json:"Result,omitnil,omitempty" name:"Result"`
}

// Predefined struct for user
type CreateDatasourceRequestParams struct {
	// HOST
	DbHost *string `json:"DbHost,omitnil,omitempty" name:"DbHost"`

	// Port.
	DbPort *uint64 `json:"DbPort,omitnil,omitempty" name:"DbPort"`

	// The backend provides dictionaries: domain type. 1. Tencent Cloud, 2. local.
	ServiceType *string `json:"ServiceType,omitnil,omitempty" name:"ServiceType"`

	// Drive.
	DbType *string `json:"DbType,omitnil,omitempty" name:"DbType"`

	// Database encoding.
	Charset *string `json:"Charset,omitnil,omitempty" name:"Charset"`

	// Username.
	DbUser *string `json:"DbUser,omitnil,omitempty" name:"DbUser"`

	// Password.
	DbPwd *string `json:"DbPwd,omitnil,omitempty" name:"DbPwd"`

	// Database name.
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Database alias.
	SourceName *string `json:"SourceName,omitnil,omitempty" name:"SourceName"`

	// Project ID.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Catalog value.
	Catalog *string `json:"Catalog,omitnil,omitempty" name:"Catalog"`

	// Third-party data source identifier.
	DataOrigin *string `json:"DataOrigin,omitnil,omitempty" name:"DataOrigin"`

	// Third-party project ID.
	DataOriginProjectId *string `json:"DataOriginProjectId,omitnil,omitempty" name:"DataOriginProjectId"`

	// Third-party data source ID.
	DataOriginDatasourceId *string `json:"DataOriginDatasourceId,omitnil,omitempty" name:"DataOriginDatasourceId"`

	// Extension parameter.
	ExtraParam *string `json:"ExtraParam,omitnil,omitempty" name:"ExtraParam"`

	// Unified identifier of the Tencent Cloud VPC.
	UniqVpcId *string `json:"UniqVpcId,omitnil,omitempty" name:"UniqVpcId"`

	// VPC IP address.
	Vip *string `json:"Vip,omitnil,omitempty" name:"Vip"`

	// VPC port.
	Vport *string `json:"Vport,omitnil,omitempty" name:"Vport"`

	// Tencent Cloud VPC identifier.
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// Operation permission limitation.
	OperationAuthLimit []*string `json:"OperationAuthLimit,omitnil,omitempty" name:"OperationAuthLimit"`

	// Enables VPC.
	UseVPC *bool `json:"UseVPC,omitnil,omitempty" name:"UseVPC"`

	// Region.
	RegionId *string `json:"RegionId,omitnil,omitempty" name:"RegionId"`
}

type CreateDatasourceRequest struct {
	*tchttp.BaseRequest
	
	// HOST
	DbHost *string `json:"DbHost,omitnil,omitempty" name:"DbHost"`

	// Port.
	DbPort *uint64 `json:"DbPort,omitnil,omitempty" name:"DbPort"`

	// The backend provides dictionaries: domain type. 1. Tencent Cloud, 2. local.
	ServiceType *string `json:"ServiceType,omitnil,omitempty" name:"ServiceType"`

	// Drive.
	DbType *string `json:"DbType,omitnil,omitempty" name:"DbType"`

	// Database encoding.
	Charset *string `json:"Charset,omitnil,omitempty" name:"Charset"`

	// Username.
	DbUser *string `json:"DbUser,omitnil,omitempty" name:"DbUser"`

	// Password.
	DbPwd *string `json:"DbPwd,omitnil,omitempty" name:"DbPwd"`

	// Database name.
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Database alias.
	SourceName *string `json:"SourceName,omitnil,omitempty" name:"SourceName"`

	// Project ID.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Catalog value.
	Catalog *string `json:"Catalog,omitnil,omitempty" name:"Catalog"`

	// Third-party data source identifier.
	DataOrigin *string `json:"DataOrigin,omitnil,omitempty" name:"DataOrigin"`

	// Third-party project ID.
	DataOriginProjectId *string `json:"DataOriginProjectId,omitnil,omitempty" name:"DataOriginProjectId"`

	// Third-party data source ID.
	DataOriginDatasourceId *string `json:"DataOriginDatasourceId,omitnil,omitempty" name:"DataOriginDatasourceId"`

	// Extension parameter.
	ExtraParam *string `json:"ExtraParam,omitnil,omitempty" name:"ExtraParam"`

	// Unified identifier of the Tencent Cloud VPC.
	UniqVpcId *string `json:"UniqVpcId,omitnil,omitempty" name:"UniqVpcId"`

	// VPC IP address.
	Vip *string `json:"Vip,omitnil,omitempty" name:"Vip"`

	// VPC port.
	Vport *string `json:"Vport,omitnil,omitempty" name:"Vport"`

	// Tencent Cloud VPC identifier.
	VpcId *string `json:"VpcId,omitnil,omitempty" name:"VpcId"`

	// Operation permission limitation.
	OperationAuthLimit []*string `json:"OperationAuthLimit,omitnil,omitempty" name:"OperationAuthLimit"`

	// Enables VPC.
	UseVPC *bool `json:"UseVPC,omitnil,omitempty" name:"UseVPC"`

	// Region.
	RegionId *string `json:"RegionId,omitnil,omitempty" name:"RegionId"`
}

func (r *CreateDatasourceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateDatasourceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "DbHost")
	delete(f, "DbPort")
	delete(f, "ServiceType")
	delete(f, "DbType")
	delete(f, "Charset")
	delete(f, "DbUser")
	delete(f, "DbPwd")
	delete(f, "DbName")
	delete(f, "SourceName")
	delete(f, "ProjectId")
	delete(f, "Catalog")
	delete(f, "DataOrigin")
	delete(f, "DataOriginProjectId")
	delete(f, "DataOriginDatasourceId")
	delete(f, "ExtraParam")
	delete(f, "UniqVpcId")
	delete(f, "Vip")
	delete(f, "Vport")
	delete(f, "VpcId")
	delete(f, "OperationAuthLimit")
	delete(f, "UseVPC")
	delete(f, "RegionId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateDatasourceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateDatasourceResponseParams struct {
	// Custom error information object.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ErrorInfo *ErrorInfo `json:"ErrorInfo,omitnil,omitempty" name:"ErrorInfo"`

	// Data source ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Data *IdDTO `json:"Data,omitnil,omitempty" name:"Data"`

	// Additional information.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Extra *string `json:"Extra,omitnil,omitempty" name:"Extra"`

	// Prompt.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Msg *string `json:"Msg,omitnil,omitempty" name:"Msg"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateDatasourceResponse struct {
	*tchttp.BaseResponse
	Response *CreateDatasourceResponseParams `json:"Response"`
}

func (r *CreateDatasourceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateDatasourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ErrorInfo struct {
	// Error description field.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ErrorTip *string `json:"ErrorTip,omitnil,omitempty" name:"ErrorTip"`

	// Original exception message.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// Error level field.
	// ERROR
	// WARN
	// INFO
	// Note: This field may return null, indicating that no valid values can be obtained.
	ErrorLevel *string `json:"ErrorLevel,omitnil,omitempty" name:"ErrorLevel"`

	// Documentation link.
	// Note: This field may return null, indicating that no valid values can be obtained.
	DocLink *string `json:"DocLink,omitnil,omitempty" name:"DocLink"`

	// Quick start guide.
	// Note: This field may return null, indicating that no valid values can be obtained.
	FAQ *string `json:"FAQ,omitnil,omitempty" name:"FAQ"`

	// Reserved field 1.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ReservedField *string `json:"ReservedField,omitnil,omitempty" name:"ReservedField"`
}

type IdDTO struct {
	// Request ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// key
	// Note: This field may return null, indicating that no valid values can be obtained.
	AccessKey *string `json:"AccessKey,omitnil,omitempty" name:"AccessKey"`

	// id
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProjectId *uint64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Transaction ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TranId *string `json:"TranId,omitnil,omitempty" name:"TranId"`

	// Transaction status.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TranStatus *int64 `json:"TranStatus,omitnil,omitempty" name:"TranStatus"`
}