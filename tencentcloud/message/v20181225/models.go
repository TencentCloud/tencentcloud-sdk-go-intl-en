// Copyright (c) 2017-2025 Tencent. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20181225

import (
    tcerr "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/errors"
    tchttp "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/http"
    "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/json"
)

// Predefined struct for user
type ModifySendChannelOnMsgTypesRequestParams struct {
	// Message sending channel.
	SendTypes []*SendType `json:"SendTypes,omitnil,omitempty" name:"SendTypes"`
}

type ModifySendChannelOnMsgTypesRequest struct {
	*tchttp.BaseRequest
	
	// Message sending channel.
	SendTypes []*SendType `json:"SendTypes,omitnil,omitempty" name:"SendTypes"`
}

func (r *ModifySendChannelOnMsgTypesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifySendChannelOnMsgTypesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "SendTypes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifySendChannelOnMsgTypesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifySendChannelOnMsgTypesResponseParams struct {
	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifySendChannelOnMsgTypesResponse struct {
	*tchttp.BaseResponse
	Response *ModifySendChannelOnMsgTypesResponseParams `json:"Response"`
}

func (r *ModifySendChannelOnMsgTypesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifySendChannelOnMsgTypesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SendType struct {
	// Message type.
	MsgType *uint64 `json:"MsgType,omitnil,omitempty" name:"MsgType"`

	// Delivery channel.
	SendChannel *uint64 `json:"SendChannel,omitnil,omitempty" name:"SendChannel"`
}