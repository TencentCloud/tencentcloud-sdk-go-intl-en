// Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20210820

import (
    tcerr "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/errors"
    tchttp "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/http"
    "github.com/tencentcloud/tencentcloud-sdk-go-intl-en/tencentcloud/common/json"
)

// Predefined struct for user
type AddProjectUserRoleRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// User UIN
	UserIds []*string `json:"UserIds,omitnil,omitempty" name:"UserIds"`

	// Role id
	RoleIds []*string `json:"RoleIds,omitnil,omitempty" name:"RoleIds"`
}

type AddProjectUserRoleRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// User UIN
	UserIds []*string `json:"UserIds,omitnil,omitempty" name:"UserIds"`

	// Role id
	RoleIds []*string `json:"RoleIds,omitnil,omitempty" name:"RoleIds"`
}

func (r *AddProjectUserRoleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *AddProjectUserRoleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "UserIds")
	delete(f, "RoleIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "AddProjectUserRoleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type AddProjectUserRoleResponseParams struct {
	// Returned data
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type AddProjectUserRoleResponse struct {
	*tchttp.BaseResponse
	Response *AddProjectUserRoleResponseParams `json:"Response"`
}

func (r *AddProjectUserRoleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *AddProjectUserRoleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AdhocDetail struct {
	// Subtask record Id
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// Script Content
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Task start time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Task termination time
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Current Task Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Submit Task ID
	RecordId *uint64 `json:"RecordId,omitnil,omitempty" name:"RecordId"`
}

type AdhocRecord struct {
	// Task Submission Record ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// Script ContentNote: This field may return null, indicating that no valid value can be obtained.
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Task Submission Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Task StatusNote: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Instance ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`
}

type AgentStatus struct {
	// Running Quantity
	// Note: This field may return null, indicating that no valid value can be obtained.
	Running *int64 `json:"Running,omitnil,omitempty" name:"Running"`

	// Number of Anomalies
	// Note: This field may return null, indicating that no valid value can be obtained.
	Abnormal *int64 `json:"Abnormal,omitnil,omitempty" name:"Abnormal"`

	// Operating Quantity
	// Note: This field may return null, indicating that no valid value can be obtained.
	InOperation *int64 `json:"InOperation,omitnil,omitempty" name:"InOperation"`
}

type AlarmEventInfo struct {
	// Alert ID
	AlarmId *string `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// Alarm Time
	AlarmTime *string `json:"AlarmTime,omitnil,omitempty" name:"AlarmTime"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Rule name
	RegularName *string `json:"RegularName,omitnil,omitempty" name:"RegularName"`

	// Alert level, 0 for normal, 1 for important, 2 for urgent
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
	AlarmWay *uint64 `json:"AlarmWay,omitnil,omitempty" name:"AlarmWay"`

	// Alert Recipient ID, separated by commas
	AlarmRecipientId *string `json:"AlarmRecipientId,omitnil,omitempty" name:"AlarmRecipientId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause
	AlarmIndicator *uint64 `json:"AlarmIndicator,omitnil,omitempty" name:"AlarmIndicator"`

	// Alert Metric Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmIndicatorDesc *string `json:"AlarmIndicatorDesc,omitnil,omitempty" name:"AlarmIndicatorDesc"`

	// Metric threshold, 1 indicates the first run failure of the offline task, 2 indicates failure after all retries of the offline task
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Estimated timeout, minute level
	// Note: This field may return null, indicating that no valid value can be obtained.
	EstimatedTime *uint64 `json:"EstimatedTime,omitnil,omitempty" name:"EstimatedTime"`

	// Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// 0: Partial Success, 1: Complete Success, 2: Complete Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsSendSuccess *uint64 `json:"IsSendSuccess,omitnil,omitempty" name:"IsSendSuccess"`

	// During Do Not Disturb time, 0: No, 1: Yes
	// Note: This field may return null, indicating that no valid value can be obtained.
	InQuitePeriods *uint64 `json:"InQuitePeriods,omitnil,omitempty" name:"InQuitePeriods"`

	// Alert Record ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RecordId *uint64 `json:"RecordId,omitnil,omitempty" name:"RecordId"`

	// Message ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	MessageId *string `json:"MessageId,omitnil,omitempty" name:"MessageId"`

	// Threshold Calculation Operator, 1: Greater than, 2: Less than
	// Note: This field may return null, indicating that no valid value can be obtained.
	Operator *int64 `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Alert Rule ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RegularId *string `json:"RegularId,omitnil,omitempty" name:"RegularId"`

	// Alert Recipient Nickname
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmRecipientName *string `json:"AlarmRecipientName,omitnil,omitempty" name:"AlarmRecipientName"`

	// Alert Task Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Send Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	SendResult *string `json:"SendResult,omitnil,omitempty" name:"SendResult"`

	// Monitoring Object ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorObjectId *string `json:"MonitorObjectId,omitnil,omitempty" name:"MonitorObjectId"`

	// Monitoring Object Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorObjectName *string `json:"MonitorObjectName,omitnil,omitempty" name:"MonitorObjectName"`

	// Metric Threshold
	// Note: This field may return null, indicating that no valid value can be obtained.
	Threshold *float64 `json:"Threshold,omitnil,omitempty" name:"Threshold"`
}

type AlarmIndicatorInfo struct {
	// Metric ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Alert Metrics, 0 for task failure, 1 for task execution timeout, 2 for task stop, 3 for task pause, 4 read speed, 5 write speed, 6 read throughput, 7 write throughput, 8 dirty data byte count, 9 number of dirty data entries, 10 task exception, 11 task detection anomaly, 12 restart times, 13 task delay, 14 number of restarts within the last 20 minutes, 15 transmission delay, 16 business delay, 50 offline package CPU usage rate, 51 offline package memory usage rate, 52 offline package parallelism utilization, 53 number of instances queued for offline packages, 54 real-time package resource utilization, 55 number of tasks running in real-time packages
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmIndicator *uint64 `json:"AlarmIndicator,omitnil,omitempty" name:"AlarmIndicator"`

	// Alert Metric Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmIndicatorDesc *string `json:"AlarmIndicatorDesc,omitnil,omitempty" name:"AlarmIndicatorDesc"`

	// Metric Threshold, 1 for the first run failure of an offline task, 2 for all retries failed of an offline task
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Estimated timeout duration, minute level
	// Note: This field may return null, indicating that no valid value can be obtained.
	EstimatedTime *uint64 `json:"EstimatedTime,omitnil,omitempty" name:"EstimatedTime"`

	// Alert threshold operator, 1 Greater than, 2 Less than
	// Note: This field may return null, indicating that no valid value can be obtained.
	Operator *uint64 `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Alert metric threshold unit: ms (milliseconds), s (seconds), min (minutes)
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmIndicatorUnit *string `json:"AlarmIndicatorUnit,omitnil,omitempty" name:"AlarmIndicatorUnit"`

	// Alert Interval
	Duration *int64 `json:"Duration,omitnil,omitempty" name:"Duration"`

	// Alert interval unit: hour, minute, day
	DurationUnit *string `json:"DurationUnit,omitnil,omitempty" name:"DurationUnit"`

	// Maximum number of alerts within a cycle
	MaxTimes *int64 `json:"MaxTimes,omitnil,omitempty" name:"MaxTimes"`

	// Metric Threshold
	// Note: This field may return null, indicating that no valid value can be obtained.
	Threshold *float64 `json:"Threshold,omitnil,omitempty" name:"Threshold"`
}

type AlarmInfo struct {
	// Associated Task ID
	TaskIds *string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Alert Categories; 'failure' indicates failure alert; 'overtime' indicates timeout alert
	AlarmType *string `json:"AlarmType,omitnil,omitempty" name:"AlarmType"`

	// Alert Method; 'SMS' indicates SMS; 'Email' indicates email; 'HTTP' indicates an interface method; 'Wechat' indicates WeChat method
	AlarmWay *string `json:"AlarmWay,omitnil,omitempty" name:"AlarmWay"`

	// Alert Recipient, multiple recipients separated by ;
	AlarmRecipient *string `json:"AlarmRecipient,omitnil,omitempty" name:"AlarmRecipient"`

	// Alert Recipient ID, multiple recipient IDs separated by ;
	AlarmRecipientId *string `json:"AlarmRecipientId,omitnil,omitempty" name:"AlarmRecipientId"`

	// Estimated Running Hours, value range 0-23
	Hours *uint64 `json:"Hours,omitnil,omitempty" name:"Hours"`

	// Estimated Running Minutes, value range 0-59
	Minutes *uint64 `json:"Minutes,omitnil,omitempty" name:"Minutes"`

	// Alert Trigger Moment; '1' means first run failure; '2' means failure after all retries;
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Alert Information ID
	AlarmId *string `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// Alert Status Setting; '1' indicates available; '0' indicates unavailable, default is available
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type AlarmReceiverInfo struct {
	// Alert ID
	AlarmId *string `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// Alarm Recipient ID
	AlarmReceiver *string `json:"AlarmReceiver,omitnil,omitempty" name:"AlarmReceiver"`

	// Email,0: Not set,1: Success,2: Failure
	Email *uint64 `json:"Email,omitnil,omitempty" name:"Email"`

	// SMS,0: Not set,1: Success,2: Failure
	Sms *uint64 `json:"Sms,omitnil,omitempty" name:"Sms"`

	// WeChat,0: Not set,1: Success,2: Failure
	Wechat *uint64 `json:"Wechat,omitnil,omitempty" name:"Wechat"`

	// Telephone,0: Not set,1: Success,2: Failure
	Voice *uint64 `json:"Voice,omitnil,omitempty" name:"Voice"`

	// WeCom,0: Not set,1: Success,2: Failure
	Wecom *uint64 `json:"Wecom,omitnil,omitempty" name:"Wecom"`

	// http,0: Not set,1: Success,2: Failure
	Http *uint64 `json:"Http,omitnil,omitempty" name:"Http"`

	// Enterprise WeChat group,0: Not set,1: Success,2: Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	WecomGroup *uint64 `json:"WecomGroup,omitnil,omitempty" name:"WecomGroup"`

	// FeiShu Group,0: Not set,1: Success,2: Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	LarkGroup *uint64 `json:"LarkGroup,omitnil,omitempty" name:"LarkGroup"`
}

type Apply struct {
	// Applicant ID
	ApplicantId *string `json:"ApplicantId,omitnil,omitempty" name:"ApplicantId"`

	// Applicant Name
	ApplicantName *string `json:"ApplicantName,omitnil,omitempty" name:"ApplicantName"`

	// Approval Remarks
	// Note: This field may return null, indicating that no valid value can be obtained.
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// Approval Category Key
	ApproveClassification *string `json:"ApproveClassification,omitnil,omitempty" name:"ApproveClassification"`

	// Approval Form ID
	ApproveId *string `json:"ApproveId,omitnil,omitempty" name:"ApproveId"`

	// Approval Type Key
	ApproveType *string `json:"ApproveType,omitnil,omitempty" name:"ApproveType"`

	// Application Reason
	// Note: This field may return null, indicating that no valid value can be obtained.
	Reason *string `json:"Reason,omitnil,omitempty" name:"Reason"`

	// Creation Time
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Approval Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ApproveTime *string `json:"ApproveTime,omitnil,omitempty" name:"ApproveTime"`

	// Approval Category Name
	ApproveClassificationName *string `json:"ApproveClassificationName,omitnil,omitempty" name:"ApproveClassificationName"`

	// Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Approval Type Name
	ApproveTypeName *string `json:"ApproveTypeName,omitnil,omitempty" name:"ApproveTypeName"`

	// Approval Exception or Failure Information
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// Apply for Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ApplyName *string `json:"ApplyName,omitnil,omitempty" name:"ApplyName"`

	// Approver ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ApproverId *string `json:"ApproverId,omitnil,omitempty" name:"ApproverId"`

	// Approver Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ApproverName *string `json:"ApproverName,omitnil,omitempty" name:"ApproverName"`

	// Project for Approval
	// Note: This field may return null, indicating that no valid value can be obtained.
	ApproveProjectName *string `json:"ApproveProjectName,omitnil,omitempty" name:"ApproveProjectName"`
}

type ApproveModify struct {
	// Approval Form ID
	ApproveId *string `json:"ApproveId,omitnil,omitempty" name:"ApproveId"`

	// Modification successful?
	Success *bool `json:"Success,omitnil,omitempty" name:"Success"`
}

type ApproveType struct {
	// Application Category Key
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Type Name
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// Application Type Key
	Classification *string `json:"Classification,omitnil,omitempty" name:"Classification"`
}

type AttributeItemDTO struct {
	// key
	// Note: This field may return null, indicating that no valid value can be obtained.
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type BaseClusterInfo struct {
	// Cluster ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Cluster Type, EMR/CDW, etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterType *string `json:"ClusterType,omitnil,omitempty" name:"ClusterType"`

	// Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
	ClusterName *string `json:"ClusterName,omitnil,omitempty" name:"ClusterName"`

	// Region Chinese
	// Note: This field may return null, indicating that no valid value can be obtained.
	RegionCn *string `json:"RegionCn,omitnil,omitempty" name:"RegionCn"`

	// Region English
	// Note: This field may return null, indicating that no valid value can be obtained.
	RegionEn *string `json:"RegionEn,omitnil,omitempty" name:"RegionEn"`

	// RegionNote: This field may return null, indicating that no valid value can be obtained.
	RegionArea *string `json:"RegionArea,omitnil,omitempty" name:"RegionArea"`

	// Whether the Cluster is Used
	// Note: This field may return null, indicating that no valid value can be obtained.
	Used *bool `json:"Used,omitnil,omitempty" name:"Used"`

	// Cluster StatusNote: This field may return null, indicating that no valid value can be obtained.
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Cluster State Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	StatusInfo *string `json:"StatusInfo,omitnil,omitempty" name:"StatusInfo"`

	// Cluster Storage Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageType *string `json:"StorageType,omitnil,omitempty" name:"StorageType"`

	// Cluster Computing Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	ComputeType *string `json:"ComputeType,omitnil,omitempty" name:"ComputeType"`

	// Cluster Resource Quantity
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterResource *string `json:"ClusterResource,omitnil,omitempty" name:"ClusterResource"`

	// Cluster Payment Method
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChargeType *string `json:"ChargeType,omitnil,omitempty" name:"ChargeType"`

	// Cluster Creation Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Additional Configuration
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtraConf *string `json:"ExtraConf,omitnil,omitempty" name:"ExtraConf"`

	// Ranger Account Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	RangerUserName *string `json:"RangerUserName,omitnil,omitempty" name:"RangerUserName"`

	// CDW Account (for display)
	// Note: This field may return null, indicating that no valid value can be obtained.
	CdwUserName *string `json:"CdwUserName,omitnil,omitempty" name:"CdwUserName"`
}

type BaseRole struct {
	// Role id.
	RoleId *string `json:"RoleId,omitnil,omitempty" name:"RoleId"`

	// Role name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RoleName *string `json:"RoleName,omitnil,omitempty" name:"RoleName"`

	// Role nickname.
	// Note: This field may return null, indicating that no valid values can be obtained.
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// Description
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Role type divides into System, Tenant, Project, Commercial.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RoleType *string `json:"RoleType,omitnil,omitempty" name:"RoleType"`

	// System preset.
	// Note: This field may return null, indicating that no valid values can be obtained.
	SystemDefault *bool `json:"SystemDefault,omitnil,omitempty" name:"SystemDefault"`

	// Custom parameter.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	Parameters *string `json:"Parameters,omitnil,omitempty" name:"Parameters"`

	// Specifies member statistics.
	// Note: This field may return null, indicating that no valid values can be obtained.
	MemberCount *int64 `json:"MemberCount,omitnil,omitempty" name:"MemberCount"`

	// Permission
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	Privileges []*RolePrivilege `json:"Privileges,omitnil,omitempty" name:"Privileges"`

	// Operator.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Operator *BaseUser `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Operation time
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	OperateTime *uint64 `json:"OperateTime,omitnil,omitempty" name:"OperateTime"`

	// Creation time
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	CreateTime *uint64 `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Creation time
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	CreateTimeStr *string `json:"CreateTimeStr,omitnil,omitempty" name:"CreateTimeStr"`

	// Update time.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	UpdateTimeStr *string `json:"UpdateTimeStr,omitnil,omitempty" name:"UpdateTimeStr"`

	// Project ID
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Update time.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Creator
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`
}

type BaseTenant struct {
	// Tenant IDNote: This field may return null, indicating that no valid value can be obtained.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Tenant ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TenantName *string `json:"TenantName,omitnil,omitempty" name:"TenantName"`

	// Tenant display name, usually the Chinese name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// RemarksNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Tenant Main Account
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerUserId *string `json:"OwnerUserId,omitnil,omitempty" name:"OwnerUserId"`

	// Tenant's additional configuration parameters, in JSON format string
	// Note: This field may return null, indicating that no valid value can be obtained.
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`
}

type BaseUser struct {
	// Cloud User UIN, Globally Unique
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserId *string `json:"UserId,omitnil,omitempty" name:"UserId"`

	// User Global Unique Identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// User Display Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// Telephone Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PhoneNum *string `json:"PhoneNum,omitnil,omitempty" name:"PhoneNum"`

	// Email
	// Note: This field may return null, indicating that no valid value can be obtained.
	Email *string `json:"Email,omitnil,omitempty" name:"Email"`
}

// Predefined struct for user
type BatchCreateIntegrationTaskAlarmsRequestParams struct {
	// Task ID.
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Alert Configuration Information
	TaskAlarmInfo *TaskAlarmInfo `json:"TaskAlarmInfo,omitnil,omitempty" name:"TaskAlarmInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchCreateIntegrationTaskAlarmsRequest struct {
	*tchttp.BaseRequest
	
	// Task ID.
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Alert Configuration Information
	TaskAlarmInfo *TaskAlarmInfo `json:"TaskAlarmInfo,omitnil,omitempty" name:"TaskAlarmInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchCreateIntegrationTaskAlarmsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchCreateIntegrationTaskAlarmsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "TaskAlarmInfo")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchCreateIntegrationTaskAlarmsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchCreateIntegrationTaskAlarmsResponseParams struct {
	// Note: This field may return null, indicating that no valid value can be obtained.
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Note: This field may return null, indicating that no valid value can be obtained.
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchCreateIntegrationTaskAlarmsResponse struct {
	*tchttp.BaseResponse
	Response *BatchCreateIntegrationTaskAlarmsResponseParams `json:"Response"`
}

func (r *BatchCreateIntegrationTaskAlarmsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchCreateIntegrationTaskAlarmsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BatchCreateTaskVersionDTO struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// VersionRemark
	// Note: This field may return null, indicating that no valid value can be obtained.
	VersionRemark *string `json:"VersionRemark,omitnil,omitempty" name:"VersionRemark"`

	// Folder ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`
}

// Predefined struct for user
type BatchDeleteIntegrationTasksRequestParams struct {
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to delete development state tasks. By default, development state is not deleted, 0 means do not delete, 1 means delete
	DeleteKFFlag *int64 `json:"DeleteKFFlag,omitnil,omitempty" name:"DeleteKFFlag"`

	// Operation Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`
}

type BatchDeleteIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to delete development state tasks. By default, development state is not deleted, 0 means do not delete, 1 means delete
	DeleteKFFlag *int64 `json:"DeleteKFFlag,omitnil,omitempty" name:"DeleteKFFlag"`

	// Operation Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`
}

func (r *BatchDeleteIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchDeleteIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "DeleteKFFlag")
	delete(f, "Name")
	delete(f, "TaskNames")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchDeleteIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchDeleteIntegrationTasksResponseParams struct {
	// Note: This field may return null, indicating that no valid value can be obtained.
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Note: This field may return null, indicating that no valid value can be obtained.
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchDeleteIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchDeleteIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchDeleteIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchDeleteIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchDeleteOpsTasksRequestParams struct {
	// Batch Deleted Task TaskId
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// true: After deletion, downstream tasks can run normally
	// false: After deletion, downstream tasks cannot run
	DeleteMode *bool `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`

	// true: Notify Downstream Task Responsible Persons
	// false: Do Not Notify Downstream Task Responsible Persons
	EnableNotify *bool `json:"EnableNotify,omitnil,omitempty" name:"EnableNotify"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchDeleteOpsTasksRequest struct {
	*tchttp.BaseRequest
	
	// Batch Deleted Task TaskId
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// true: After deletion, downstream tasks can run normally
	// false: After deletion, downstream tasks cannot run
	DeleteMode *bool `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`

	// true: Notify Downstream Task Responsible Persons
	// false: Do Not Notify Downstream Task Responsible Persons
	EnableNotify *bool `json:"EnableNotify,omitnil,omitempty" name:"EnableNotify"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchDeleteOpsTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchDeleteOpsTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIdList")
	delete(f, "DeleteMode")
	delete(f, "EnableNotify")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchDeleteOpsTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchDeleteOpsTasksResponseParams struct {
	// Returns the number of successful batch operations, the number of failures, and the total number of operations
	Data *BatchOperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchDeleteOpsTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchDeleteOpsTasksResponseParams `json:"Response"`
}

func (r *BatchDeleteOpsTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchDeleteOpsTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchForceSuccessIntegrationTaskInstancesRequestParams struct {
	// Instance Information
	Instances []*SchedulerTaskInstanceInfo `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchForceSuccessIntegrationTaskInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance Information
	Instances []*SchedulerTaskInstanceInfo `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchForceSuccessIntegrationTaskInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchForceSuccessIntegrationTaskInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchForceSuccessIntegrationTaskInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchForceSuccessIntegrationTaskInstancesResponseParams struct {
	// Number of Successful Operations
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Operations
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchForceSuccessIntegrationTaskInstancesResponse struct {
	*tchttp.BaseResponse
	Response *BatchForceSuccessIntegrationTaskInstancesResponseParams `json:"Response"`
}

func (r *BatchForceSuccessIntegrationTaskInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchForceSuccessIntegrationTaskInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchKillIntegrationTaskInstancesRequestParams struct {
	// Instance Information
	Instances []*SchedulerTaskInstanceInfo `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchKillIntegrationTaskInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance Information
	Instances []*SchedulerTaskInstanceInfo `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchKillIntegrationTaskInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchKillIntegrationTaskInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchKillIntegrationTaskInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchKillIntegrationTaskInstancesResponseParams struct {
	// Number of Successfully Operated Tasks
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Tasks
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// What is actually passed is taskId
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchKillIntegrationTaskInstancesResponse struct {
	*tchttp.BaseResponse
	Response *BatchKillIntegrationTaskInstancesResponseParams `json:"Response"`
}

func (r *BatchKillIntegrationTaskInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchKillIntegrationTaskInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchMakeUpIntegrationTasksRequestParams struct {
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for Real-time Task, 202 for Offline Task
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Data Supplement Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Data Supplement End Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchMakeUpIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for Real-time Task, 202 for Offline Task
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Data Supplement Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Data Supplement End Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchMakeUpIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchMakeUpIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "TaskType")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchMakeUpIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchMakeUpIntegrationTasksResponseParams struct {
	// Number of Successfully Operated Tasks
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Tasks
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchMakeUpIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchMakeUpIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchMakeUpIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchMakeUpIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchModifyOpsOwnersRequestParams struct {
	// TaskId Array that Needs Updated Responsible Person
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Responsible User Id Information that Needs Updating, Connect Multiple Persons in Charge with ;
	Owners *string `json:"Owners,omitnil,omitempty" name:"Owners"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchModifyOpsOwnersRequest struct {
	*tchttp.BaseRequest
	
	// TaskId Array that Needs Updated Responsible Person
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Responsible User Id Information that Needs Updating, Connect Multiple Persons in Charge with ;
	Owners *string `json:"Owners,omitnil,omitempty" name:"Owners"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchModifyOpsOwnersRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchModifyOpsOwnersRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIdList")
	delete(f, "Owners")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchModifyOpsOwnersRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchModifyOpsOwnersResponseParams struct {
	// Return the number of successful batch operations, the number of failures, and the total number of operations
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *BatchOperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchModifyOpsOwnersResponse struct {
	*tchttp.BaseResponse
	Response *BatchModifyOpsOwnersResponseParams `json:"Response"`
}

func (r *BatchModifyOpsOwnersResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchModifyOpsOwnersResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BatchOperateResult struct {
	// Number of Batch Operations Succeeded
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Batch Operations Failed
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Batch Operations
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`
}

type BatchOperateResultOpsDto struct {
	// ResultNote: This field may return null, indicating that no valid value can be obtained.
	Result *bool `json:"Result,omitnil,omitempty" name:"Result"`

	// Error ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorId *string `json:"ErrorId,omitnil,omitempty" name:"ErrorId"`

	// Error Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorDesc *string `json:"ErrorDesc,omitnil,omitempty" name:"ErrorDesc"`
}

type BatchOperationOpsDto struct {
	// Number of successful batch operations
	// Note: This field may return null, indicating that no valid value can be obtained.
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of failed batch operations
	// Note: This field may return null, indicating that no valid value can be obtained.
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total number of batch operations
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`
}

type BatchOpsDTO struct {
	// Total Quantity
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Success count
	// Note: This field may return null, indicating that no valid value can be obtained.
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Failure count
	// Note: This field may return null, indicating that no valid value can be obtained.
	FailCount *int64 `json:"FailCount,omitnil,omitempty" name:"FailCount"`

	// Failure reason
	// Note: This field may return null, indicating that no valid value can be obtained.
	FailMessageList []*FailMessage `json:"FailMessageList,omitnil,omitempty" name:"FailMessageList"`
}

// Predefined struct for user
type BatchRerunIntegrationTaskInstancesRequestParams struct {
	// Instance Information
	Instances []*SchedulerTaskInstanceInfo `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchRerunIntegrationTaskInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance Information
	Instances []*SchedulerTaskInstanceInfo `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchRerunIntegrationTaskInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchRerunIntegrationTaskInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchRerunIntegrationTaskInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchRerunIntegrationTaskInstancesResponseParams struct {
	// Number of Successfully Operated Tasks
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Tasks
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// What is actually passed is taskId
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchRerunIntegrationTaskInstancesResponse struct {
	*tchttp.BaseResponse
	Response *BatchRerunIntegrationTaskInstancesResponseParams `json:"Response"`
}

func (r *BatchRerunIntegrationTaskInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchRerunIntegrationTaskInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BatchResult struct {
	// Number of Tasks Running
	Running *int64 `json:"Running,omitnil,omitempty" name:"Running"`

	// Number of Tasks Executed Successfully
	Success *int64 `json:"Success,omitnil,omitempty" name:"Success"`

	// Number of Tasks Executed Failed
	Failed *int64 `json:"Failed,omitnil,omitempty" name:"Failed"`

	// Total Tasks
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`
}

// Predefined struct for user
type BatchResumeIntegrationTasksRequestParams struct {
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for Real-time Task, 202 for Offline Task
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchResumeIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for Real-time Task, 202 for Offline Task
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchResumeIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchResumeIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "TaskType")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchResumeIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchResumeIntegrationTasksResponseParams struct {
	// Number of Successfully Operated Tasks
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Tasks
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchResumeIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchResumeIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchResumeIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchResumeIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BatchReturn struct {
	// Execution Result
	Result *bool `json:"Result,omitnil,omitempty" name:"Result"`

	// Execution remarks
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorDesc *string `json:"ErrorDesc,omitnil,omitempty" name:"ErrorDesc"`

	// Execution ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorId *string `json:"ErrorId,omitnil,omitempty" name:"ErrorId"`
}

// Predefined struct for user
type BatchRunOpsTaskRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Supplement Intermediate Instances, 0 for not supplementing; 1 for supplementing
	EnableMakeUp *int64 `json:"EnableMakeUp,omitnil,omitempty" name:"EnableMakeUp"`

	// Task ID list
	Tasks []*string `json:"Tasks,omitnil,omitempty" name:"Tasks"`
}

type BatchRunOpsTaskRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Supplement Intermediate Instances, 0 for not supplementing; 1 for supplementing
	EnableMakeUp *int64 `json:"EnableMakeUp,omitnil,omitempty" name:"EnableMakeUp"`

	// Task ID list
	Tasks []*string `json:"Tasks,omitnil,omitempty" name:"Tasks"`
}

func (r *BatchRunOpsTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchRunOpsTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "EnableMakeUp")
	delete(f, "Tasks")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchRunOpsTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchRunOpsTaskResponseParams struct {
	// Operation resultNote: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchRunOpsTaskResponse struct {
	*tchttp.BaseResponse
	Response *BatchRunOpsTaskResponseParams `json:"Response"`
}

func (r *BatchRunOpsTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchRunOpsTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStartIntegrationTasksRequestParams struct {
	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Batch run integration tasks, currently only used in real-time integration
	StartTaskInfoSet []*StartTaskInfo `json:"StartTaskInfoSet,omitnil,omitempty" name:"StartTaskInfoSet"`
}

type BatchStartIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Batch run integration tasks, currently only used in real-time integration
	StartTaskInfoSet []*StartTaskInfo `json:"StartTaskInfoSet,omitnil,omitempty" name:"StartTaskInfoSet"`
}

func (r *BatchStartIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStartIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "TaskIds")
	delete(f, "StartTaskInfoSet")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchStartIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStartIntegrationTasksResponseParams struct {
	// Number of Successfully Operated Tasks
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Tasks
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Batch operation successful task IDs for audit
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchStartIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchStartIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchStartIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStartIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStopIntegrationTasksRequestParams struct {
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type BatchStopIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *BatchStopIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStopIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "TaskType")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchStopIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStopIntegrationTasksResponseParams struct {
	// Number of Successful Operations
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Operations
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Number of successful tasks involved in this batch operation, for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchStopIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchStopIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchStopIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStopIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStopOpsTasksRequestParams struct {
	// TaskId for batch stop tasks
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

type BatchStopOpsTasksRequest struct {
	*tchttp.BaseRequest
	
	// TaskId for batch stop tasks
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

func (r *BatchStopOpsTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStopOpsTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIdList")
	delete(f, "ProjectId")
	delete(f, "KillInstance")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchStopOpsTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStopOpsTasksResponseParams struct {
	// Returns the number of successful batch operations, the number of failures, and the total number of operations
	Data *BatchOperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchStopOpsTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchStopOpsTasksResponseParams `json:"Response"`
}

func (r *BatchStopOpsTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStopOpsTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStopWorkflowsByIdsRequestParams struct {
	// Workflow ID List
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

type BatchStopWorkflowsByIdsRequest struct {
	*tchttp.BaseRequest
	
	// Workflow ID List
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

func (r *BatchStopWorkflowsByIdsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStopWorkflowsByIdsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WorkflowIds")
	delete(f, "ProjectId")
	delete(f, "KillInstance")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchStopWorkflowsByIdsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchStopWorkflowsByIdsResponseParams struct {
	// Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
	Data *OperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchStopWorkflowsByIdsResponse struct {
	*tchttp.BaseResponse
	Response *BatchStopWorkflowsByIdsResponseParams `json:"Response"`
}

func (r *BatchStopWorkflowsByIdsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchStopWorkflowsByIdsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchSuspendIntegrationTasksRequestParams struct {
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`
}

type BatchSuspendIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`
}

func (r *BatchSuspendIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchSuspendIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "Event")
	delete(f, "TaskNames")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchSuspendIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchSuspendIntegrationTasksResponseParams struct {
	// Number of Successfully Operated Tasks
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Tasks
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchSuspendIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchSuspendIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchSuspendIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchSuspendIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchUpdateIntegrationTasksRequestParams struct {
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Person in Charge (separate multiple persons in charge with a lowercase semicolon; offline tasks use the account name, real-time tasks use the account ID)
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`

	// Task Type
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Responsible Person ID (separate multiple persons in charge with a lowercase semicolon)
	InchargeIds *string `json:"InchargeIds,omitnil,omitempty" name:"InchargeIds"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`
}

type BatchUpdateIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Person in Charge (separate multiple persons in charge with a lowercase semicolon; offline tasks use the account name, real-time tasks use the account ID)
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`

	// Task Type
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Responsible Person ID (separate multiple persons in charge with a lowercase semicolon)
	InchargeIds *string `json:"InchargeIds,omitnil,omitempty" name:"InchargeIds"`

	// This batch operation involves tasks for auditing
	TaskNames []*string `json:"TaskNames,omitnil,omitempty" name:"TaskNames"`
}

func (r *BatchUpdateIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchUpdateIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "Incharge")
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "InchargeIds")
	delete(f, "TaskNames")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "BatchUpdateIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type BatchUpdateIntegrationTasksResponseParams struct {
	// Number of Successful Operations
	SuccessCount *int64 `json:"SuccessCount,omitnil,omitempty" name:"SuccessCount"`

	// Number of Failed Operations
	FailedCount *int64 `json:"FailedCount,omitnil,omitempty" name:"FailedCount"`

	// Total Number of Tasks
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type BatchUpdateIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *BatchUpdateIntegrationTasksResponseParams `json:"Response"`
}

func (r *BatchUpdateIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *BatchUpdateIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BytesSpeed struct {
	// Node TypeNote: This field may return null, indicating that no valid value can be obtained.
	NodeType *string `json:"NodeType,omitnil,omitempty" name:"NodeType"`

	// Node nameNote: This field may return null, indicating that no valid value can be obtained.
	NodeName *string `json:"NodeName,omitnil,omitempty" name:"NodeName"`

	// Speed value list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Values []*SpeedValue `json:"Values,omitnil,omitempty" name:"Values"`
}

// Predefined struct for user
type CheckAlarmRegularNameExistRequestParams struct {
	// Project name
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule name
	AlarmRegularName *string `json:"AlarmRegularName,omitnil,omitempty" name:"AlarmRegularName"`

	// Task ID
	//
	// Deprecated: TaskId is deprecated.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Primary key ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Task type: 201.Real-time, 202.Offline
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`
}

type CheckAlarmRegularNameExistRequest struct {
	*tchttp.BaseRequest
	
	// Project name
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule name
	AlarmRegularName *string `json:"AlarmRegularName,omitnil,omitempty" name:"AlarmRegularName"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Primary key ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Task type: 201.Real-time, 202.Offline
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`
}

func (r *CheckAlarmRegularNameExistRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckAlarmRegularNameExistRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "AlarmRegularName")
	delete(f, "TaskId")
	delete(f, "Id")
	delete(f, "TaskType")
	delete(f, "MonitorType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckAlarmRegularNameExistRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckAlarmRegularNameExistResponseParams struct {
	// Whether there are duplicate names
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckAlarmRegularNameExistResponse struct {
	*tchttp.BaseResponse
	Response *CheckAlarmRegularNameExistResponseParams `json:"Response"`
}

func (r *CheckAlarmRegularNameExistResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckAlarmRegularNameExistResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckIntegrationNodeNameExistsRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Node name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Node ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

type CheckIntegrationNodeNameExistsRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Node name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Node ID
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`
}

func (r *CheckIntegrationNodeNameExistsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckIntegrationNodeNameExistsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "Name")
	delete(f, "ProjectId")
	delete(f, "Id")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckIntegrationNodeNameExistsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckIntegrationNodeNameExistsResponseParams struct {
	// Return true means it exists, return false means it does not exist
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckIntegrationNodeNameExistsResponse struct {
	*tchttp.BaseResponse
	Response *CheckIntegrationNodeNameExistsResponseParams `json:"Response"`
}

func (r *CheckIntegrationNodeNameExistsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckIntegrationNodeNameExistsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckIntegrationTaskNameExistsRequestParams struct {
	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Synchronization Type 1. Single Table Synchronization, 2. Solution
	SyncType *int64 `json:"SyncType,omitnil,omitempty" name:"SyncType"`
}

type CheckIntegrationTaskNameExistsRequest struct {
	*tchttp.BaseRequest
	
	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Synchronization Type 1. Single Table Synchronization, 2. Solution
	SyncType *int64 `json:"SyncType,omitnil,omitempty" name:"SyncType"`
}

func (r *CheckIntegrationTaskNameExistsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckIntegrationTaskNameExistsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskName")
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "SyncType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckIntegrationTaskNameExistsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckIntegrationTaskNameExistsResponseParams struct {
	// true indicates it exists, false indicates it does not exist
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// Task Name Duplication Type (0: Not duplicated, 1: Duplicated in development state, 2: Duplicated in production state)
	ExistsType *int64 `json:"ExistsType,omitnil,omitempty" name:"ExistsType"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckIntegrationTaskNameExistsResponse struct {
	*tchttp.BaseResponse
	Response *CheckIntegrationTaskNameExistsResponseParams `json:"Response"`
}

func (r *CheckIntegrationTaskNameExistsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckIntegrationTaskNameExistsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckTaskNameExistRequestParams struct {
	// Project ID/Workspace ID.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type (consistent with scheduling parameters).
	TypeId *int64 `json:"TypeId,omitnil,omitempty" name:"TypeId"`

	// Task Name.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`
}

type CheckTaskNameExistRequest struct {
	*tchttp.BaseRequest
	
	// Project ID/Workspace ID.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type (consistent with scheduling parameters).
	TypeId *int64 `json:"TypeId,omitnil,omitempty" name:"TypeId"`

	// Task Name.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`
}

func (r *CheckTaskNameExistRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckTaskNameExistRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TypeId")
	delete(f, "TaskName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CheckTaskNameExistRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CheckTaskNameExistResponseParams struct {
	// Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CheckTaskNameExistResponse struct {
	*tchttp.BaseResponse
	Response *CheckTaskNameExistResponseParams `json:"Response"`
}

func (r *CheckTaskNameExistResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CheckTaskNameExistResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CollectionFolderOpsDto struct {
	// Total numberNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total number of pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPage *int64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Current Page Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *int64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Quantity per page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Task InformationNote: This field may return null, indicating that no valid value can be obtained.
	Items []*FolderOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type CollectionInstanceOpsDto struct {
	// Total numberNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total Number of Pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPage *int64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Current Page Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *int64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Quantity per page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Instance InformationNote: This field may return null, indicating that no valid value can be obtained.
	Items []*InstanceOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type ColumnAggregationLineage struct {
	// Table nameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Parent Node ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentId *string `json:"ParentId,omitnil,omitempty" name:"ParentId"`

	// Metadata Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreType *string `json:"MetastoreType,omitnil,omitempty" name:"MetastoreType"`

	// String Type Parent Node Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentSet *string `json:"ParentSet,omitnil,omitempty" name:"ParentSet"`

	// String Type Child Node Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChildSet *string `json:"ChildSet,omitnil,omitempty" name:"ChildSet"`

	// Column Information Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnInfoSet []*SimpleColumnInfo `json:"ColumnInfoSet,omitnil,omitempty" name:"ColumnInfoSet"`
}

type ColumnBasicInfo struct {
	// Table's Globally Unique ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Data Source Globally Unique ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Field NameNote: This field may return null, indicating that no valid value can be obtained.
	ColumnName *string `json:"ColumnName,omitnil,omitempty" name:"ColumnName"`

	// Data Type, such as string/int etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataType *string `json:"DataType,omitnil,omitempty" name:"DataType"`

	// Field Type, such as varchar(32)/int(10) etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnType *string `json:"ColumnType,omitnil,omitempty" name:"ColumnType"`

	// Field Default Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnDefault *string `json:"ColumnDefault,omitnil,omitempty" name:"ColumnDefault"`

	// Index Type, such as PRI/MUL/PARTITION etc., For normal fields, this value is an empty string
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnKey *string `json:"ColumnKey,omitnil,omitempty" name:"ColumnKey"`

	// Field Order Identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnPosition *int64 `json:"ColumnPosition,omitnil,omitempty" name:"ColumnPosition"`

	// Field Comment
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnComment *string `json:"ColumnComment,omitnil,omitempty" name:"ColumnComment"`

	// Data TypeNote: This field may return null, indicating that no valid value can be obtained.
	StoreType *string `json:"StoreType,omitnil,omitempty" name:"StoreType"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Name in English
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Project Name in Chinese
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectDisplayName *string `json:"ProjectDisplayName,omitnil,omitempty" name:"ProjectDisplayName"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Precision
	// Note: This field may return null, indicating that no valid value can be obtained.
	Scale *int64 `json:"Scale,omitnil,omitempty" name:"Scale"`
}

type ColumnData struct {
	// ColumnName1
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// ColumnName1
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventProjectName *string `json:"EventProjectName,omitnil,omitempty" name:"EventProjectName"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Project nameNote: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type ColumnItem struct {
	// ColumnName1
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnName *string `json:"ColumnName,omitnil,omitempty" name:"ColumnName"`

	// ColumnName1
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnRef *string `json:"ColumnRef,omitnil,omitempty" name:"ColumnRef"`
}

type ColumnLineageInfo struct {
	// Lineage ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Field NameNote: This field may return null, indicating that no valid value can be obtained.
	ColumnName *string `json:"ColumnName,omitnil,omitempty" name:"ColumnName"`

	// Field Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnNameCn *string `json:"ColumnNameCn,omitnil,omitempty" name:"ColumnNameCn"`

	// Field TypeNote: This field may return null, indicating that no valid value can be obtained.
	ColumnType *string `json:"ColumnType,omitnil,omitempty" name:"ColumnType"`

	// Relationship Parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	RelationParams *string `json:"RelationParams,omitnil,omitempty" name:"RelationParams"`

	// ParameterNote: This field may return null, indicating that no valid value can be obtained.
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Parent ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentId *string `json:"ParentId,omitnil,omitempty" name:"ParentId"`

	// Metadata Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreType *string `json:"MetastoreType,omitnil,omitempty" name:"MetastoreType"`

	// Metadata Type Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreTypeName *string `json:"MetastoreTypeName,omitnil,omitempty" name:"MetastoreTypeName"`

	// Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Full Field Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualifiedName *string `json:"QualifiedName,omitnil,omitempty" name:"QualifiedName"`

	// Number of Downstream Nodes
	// Note: This field may return null, indicating that no valid value can be obtained.
	DownStreamCount *int64 `json:"DownStreamCount,omitnil,omitempty" name:"DownStreamCount"`

	// Number of Upstream Nodes
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpStreamCount *int64 `json:"UpStreamCount,omitnil,omitempty" name:"UpStreamCount"`

	// DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Path Information Starting from the Central Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	PrefixPath *string `json:"PrefixPath,omitnil,omitempty" name:"PrefixPath"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// Task ID list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tasks []*string `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Parent Node List String
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentSet *string `json:"ParentSet,omitnil,omitempty" name:"ParentSet"`

	// Child Node List String
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChildSet *string `json:"ChildSet,omitnil,omitempty" name:"ChildSet"`

	// Additional parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtParams []*LineageParamRecord `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Table IDNote: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`
}

type ColumnMeta struct {
	// Field English Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	NameEn *string `json:"NameEn,omitnil,omitempty" name:"NameEn"`

	// Field Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	NameCn *string `json:"NameCn,omitnil,omitempty" name:"NameCn"`

	// Field TypeNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Field Sequence Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	Position *int64 `json:"Position,omitnil,omitempty" name:"Position"`

	// Is Partition Field
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsPartition *bool `json:"IsPartition,omitnil,omitempty" name:"IsPartition"`

	// Field nameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// HBase Column Family Attribute Set
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnFamiliesFieldSet []*Pair `json:"ColumnFamiliesFieldSet,omitnil,omitempty" name:"ColumnFamiliesFieldSet"`

	// Corresponding Code Table Dictionary ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DictionaryId *string `json:"DictionaryId,omitnil,omitempty" name:"DictionaryId"`

	// Corresponding Code Table Dictionary Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DictionaryName *string `json:"DictionaryName,omitnil,omitempty" name:"DictionaryName"`

	// Security Level: Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	LevelName *string `json:"LevelName,omitnil,omitempty" name:"LevelName"`

	// Security Level: Value Range 1-10
	// Note: This field may return null, indicating that no valid value can be obtained.
	LevelRank *int64 `json:"LevelRank,omitnil,omitempty" name:"LevelRank"`
}

// Predefined struct for user
type CommitIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 0. Only submit, 1. Start immediately, 2. Stop online jobs, discard job state data, restart, 3. Pause online jobs, keep job state data, continue running, 4. Keep job state data, continue running
	CommitType *int64 `json:"CommitType,omitnil,omitempty" name:"CommitType"`

	// Real-time task 201 Offline task 202 Default is real-time task
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Additional parameters
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Submit version description
	VersionDesc *string `json:"VersionDesc,omitnil,omitempty" name:"VersionDesc"`

	// Submit version number
	InstanceVersion *int64 `json:"InstanceVersion,omitnil,omitempty" name:"InstanceVersion"`

	// Describe the type of front-end operation
	EventDesc *string `json:"EventDesc,omitnil,omitempty" name:"EventDesc"`
}

type CommitIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 0. Only submit, 1. Start immediately, 2. Stop online jobs, discard job state data, restart, 3. Pause online jobs, keep job state data, continue running, 4. Keep job state data, continue running
	CommitType *int64 `json:"CommitType,omitnil,omitempty" name:"CommitType"`

	// Real-time task 201 Offline task 202 Default is real-time task
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Additional parameters
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Submit version description
	VersionDesc *string `json:"VersionDesc,omitnil,omitempty" name:"VersionDesc"`

	// Submit version number
	InstanceVersion *int64 `json:"InstanceVersion,omitnil,omitempty" name:"InstanceVersion"`

	// Describe the type of front-end operation
	EventDesc *string `json:"EventDesc,omitnil,omitempty" name:"EventDesc"`
}

func (r *CommitIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CommitIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "CommitType")
	delete(f, "TaskType")
	delete(f, "ExtConfig")
	delete(f, "VersionDesc")
	delete(f, "InstanceVersion")
	delete(f, "EventDesc")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CommitIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CommitIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CommitIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *CommitIntegrationTaskResponseParams `json:"Response"`
}

func (r *CommitIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CommitIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CommitRuleGroupTaskRequestParams struct {
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Trigger Type 1. Manual Trigger 2. In-process Scheduling Trigger 3. Periodic Scheduling Trigger
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Rule Configuration List
	ExecRuleConfig []*RuleConfig `json:"ExecRuleConfig,omitnil,omitempty" name:"ExecRuleConfig"`

	// Execution configuration
	ExecConfig *RuleExecConfig `json:"ExecConfig,omitnil,omitempty" name:"ExecConfig"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// The execution engine that this rule runs. If this parameter is not passed, the default execution engine under this data source will be requested.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`
}

type CommitRuleGroupTaskRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Trigger Type 1. Manual Trigger 2. In-process Scheduling Trigger 3. Periodic Scheduling Trigger
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Rule Configuration List
	ExecRuleConfig []*RuleConfig `json:"ExecRuleConfig,omitnil,omitempty" name:"ExecRuleConfig"`

	// Execution configuration
	ExecConfig *RuleExecConfig `json:"ExecConfig,omitnil,omitempty" name:"ExecConfig"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// The execution engine that this rule runs. If this parameter is not passed, the default execution engine under this data source will be requested.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`
}

func (r *CommitRuleGroupTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CommitRuleGroupTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupId")
	delete(f, "TriggerType")
	delete(f, "ExecRuleConfig")
	delete(f, "ExecConfig")
	delete(f, "ProjectId")
	delete(f, "EngineType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CommitRuleGroupTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CommitRuleGroupTaskResponseParams struct {
	// Rule Group Execution ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroupExecResult `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CommitRuleGroupTaskResponse struct {
	*tchttp.BaseResponse
	Response *CommitRuleGroupTaskResponseParams `json:"Response"`
}

func (r *CommitRuleGroupTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CommitRuleGroupTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CommonContent struct {
	// Detailed Content
	// Note: This field may return null, indicating that no valid value can be obtained.
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`
}

type CommonId struct {
	// ID Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type CommonIdOpsDto struct {
	// Returns the supplemental plan id
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`
}

type CompareResult struct {
	// Comparison Result Item List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*CompareResultItem `json:"Items,omitnil,omitempty" name:"Items"`

	// Total Number of Rows Detected
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalRows *uint64 `json:"TotalRows,omitnil,omitempty" name:"TotalRows"`

	// Number of Rows Passed
	// Note: This field may return null, indicating that no valid value can be obtained.
	PassRows *uint64 `json:"PassRows,omitnil,omitempty" name:"PassRows"`

	// Number of Rows Failed
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerRows *uint64 `json:"TriggerRows,omitnil,omitempty" name:"TriggerRows"`
}

type CompareResultItem struct {
	// Comparison Result, 1 is true, 2 is false
	// Note: This field may return null, indicating that no valid value can be obtained.
	FixResult *uint64 `json:"FixResult,omitnil,omitempty" name:"FixResult"`

	// Quality SQL Execution Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResultValue *string `json:"ResultValue,omitnil,omitempty" name:"ResultValue"`

	// Threshold List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Values []*ThresholdValue `json:"Values,omitnil,omitempty" name:"Values"`

	// Comparison Operation Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Comparison Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompareType *uint64 `json:"CompareType,omitnil,omitempty" name:"CompareType"`

	// Value Comparison Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	ValueComputeType *uint64 `json:"ValueComputeType,omitnil,omitempty" name:"ValueComputeType"`
}

type CompareRule struct {
	// Comparison Criteria List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*CompareRuleItem `json:"Items,omitnil,omitempty" name:"Items"`

	// Default cycle of the periodic template, Unit: seconds
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// o represents OR, a represents AND, numbers represent items' indices
	// Note: This field may return null, indicating that no valid value can be obtained.
	ComputeExpression *string `json:"ComputeExpression,omitnil,omitempty" name:"ComputeExpression"`
}

type CompareRuleItem struct {
	// Comparison Type 1. Fixed value  2. Fluctuation Value  3. Numeric Range Comparison  4. Enumeration Range Comparison  5. No Comparison
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompareType *uint64 `json:"CompareType,omitnil,omitempty" name:"CompareType"`

	// Comparison Operation Type
	// <  <=  ==  =>  > !=
	// IRLCRO: Within the interval (left closed, right open)
	// IRLORC: Within the interval (left open, right closed)
	// IRLCRC: Within the interval (left closed, right closed)
	// IRLORO: Within the interval (left open, right open)
	// NRLCRO: Not within the range (left-closed, right-open)
	// NRLORC: Not within the range (left-open, right-closed)
	// NRLCRC: Not within the range (left-closed, right-closed)
	// NRLORO: Not within the range (left-open, right-open)
	// Note: This field may return null, indicating that no valid value can be obtained.
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Quality statistical value types 1. Absolute Value 2. Increase 3. Decline 4. _C includes 5. N_C does not include
	// Note: This field may return null, indicating that no valid value can be obtained.
	ValueComputeType *uint64 `json:"ValueComputeType,omitnil,omitempty" name:"ValueComputeType"`

	// Comparison threshold list
	// Note: This field may return null, indicating that no valid value can be obtained.
	ValueList []*ThresholdValue `json:"ValueList,omitnil,omitempty" name:"ValueList"`
}

type Content struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Diagnosis
	// Note: This field may return null, indicating that no valid value can be obtained.
	Diagnose *string `json:"Diagnose,omitnil,omitempty" name:"Diagnose"`

	// Reason
	// Note: This field may return null, indicating that no valid value can be obtained.
	Reason *string `json:"Reason,omitnil,omitempty" name:"Reason"`

	// OperationNote: This field may return null, indicating that no valid value can be obtained.
	Operation *string `json:"Operation,omitnil,omitempty" name:"Operation"`

	// Link
	// Note: This field may return null, indicating that no valid value can be obtained.
	Url *string `json:"Url,omitnil,omitempty" name:"Url"`
}

// Predefined struct for user
type CountOpsInstanceStateRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type CountOpsInstanceStateRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *CountOpsInstanceStateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CountOpsInstanceStateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CountOpsInstanceStateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CountOpsInstanceStateResponseParams struct {
	// Task Corresponding Instance Status Statistics
	Data *TaskInstanceCountDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CountOpsInstanceStateResponse struct {
	*tchttp.BaseResponse
	Response *CountOpsInstanceStateResponseParams `json:"Response"`
}

func (r *CountOpsInstanceStateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CountOpsInstanceStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateCustomFunctionRequestParams struct {
	// Enumerated values: HIVE, SPARK, DLC
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Enumerated values: ANALYSIS (function), ENCRYPTION (encryption function), AGGREGATE (aggregate function), LOGIC (logic function), DATE_AND_TIME (date and time function), MATH (math function), CONVERSION (conversion function), STRING (string function), IP_AND_DOMAIN (IP and domain function), WINDOW (window function), OTHER (other function)
	Kind *string `json:"Kind,omitnil,omitempty" name:"Kind"`

	// Function Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Cluster Instance Engine ID
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Database name
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type CreateCustomFunctionRequest struct {
	*tchttp.BaseRequest
	
	// Enumerated values: HIVE, SPARK, DLC
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Enumerated values: ANALYSIS (function), ENCRYPTION (encryption function), AGGREGATE (aggregate function), LOGIC (logic function), DATE_AND_TIME (date and time function), MATH (math function), CONVERSION (conversion function), STRING (string function), IP_AND_DOMAIN (IP and domain function), WINDOW (window function), OTHER (other function)
	Kind *string `json:"Kind,omitnil,omitempty" name:"Kind"`

	// Function Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Cluster Instance Engine ID
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Database name
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *CreateCustomFunctionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateCustomFunctionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "Kind")
	delete(f, "Name")
	delete(f, "ClusterIdentifier")
	delete(f, "DbName")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateCustomFunctionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateCustomFunctionResponseParams struct {
	// Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateCustomFunctionResponse struct {
	*tchttp.BaseResponse
	Response *CreateCustomFunctionResponseParams `json:"Response"`
}

func (r *CreateCustomFunctionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateCustomFunctionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateDataSourceRequestParams struct {
	// Data Source Name, cannot be empty under the same SpaceName
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Source Category: Binding Engine, Binding Database
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Data Source Type: enumerated values
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Project ID
	OwnerProjectId *string `json:"OwnerProjectId,omitnil,omitempty" name:"OwnerProjectId"`

	// Project Name
	OwnerProjectName *string `json:"OwnerProjectName,omitnil,omitempty" name:"OwnerProjectName"`

	// Project Name (Chinese)
	OwnerProjectIdent *string `json:"OwnerProjectIdent,omitnil,omitempty" name:"OwnerProjectIdent"`

	// Configuration Information Extension of Business Data Source
	BizParams *string `json:"BizParams,omitnil,omitempty" name:"BizParams"`

	// Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Data source description information
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source Display Name, for visual inspection
	Display *string `json:"Display,omitnil,omitempty" name:"Display"`

	// If the data source list is bound to a database, then it is the database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Instance ID of the data source engine, e.g., CDB Instance ID
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Name of the business space to which the data source belongs
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Collection Status
	Collect *string `json:"Collect,omitnil,omitempty" name:"Collect"`

	// COS Bucket Information
	COSBucket *string `json:"COSBucket,omitnil,omitempty" name:"COSBucket"`

	// cos region
	COSRegion *string `json:"COSRegion,omitnil,omitempty" name:"COSRegion"`

	// Connection Test Result
	ConnectResult *string `json:"ConnectResult,omitnil,omitempty" name:"ConnectResult"`

	// Development Environment Data Source Configuration
	DevelopmentParams *string `json:"DevelopmentParams,omitnil,omitempty" name:"DevelopmentParams"`
}

type CreateDataSourceRequest struct {
	*tchttp.BaseRequest
	
	// Data Source Name, cannot be empty under the same SpaceName
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Source Category: Binding Engine, Binding Database
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Data Source Type: enumerated values
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Project ID
	OwnerProjectId *string `json:"OwnerProjectId,omitnil,omitempty" name:"OwnerProjectId"`

	// Project Name
	OwnerProjectName *string `json:"OwnerProjectName,omitnil,omitempty" name:"OwnerProjectName"`

	// Project Name (Chinese)
	OwnerProjectIdent *string `json:"OwnerProjectIdent,omitnil,omitempty" name:"OwnerProjectIdent"`

	// Configuration Information Extension of Business Data Source
	BizParams *string `json:"BizParams,omitnil,omitempty" name:"BizParams"`

	// Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Data source description information
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source Display Name, for visual inspection
	Display *string `json:"Display,omitnil,omitempty" name:"Display"`

	// If the data source list is bound to a database, then it is the database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Instance ID of the data source engine, e.g., CDB Instance ID
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Name of the business space to which the data source belongs
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Collection Status
	Collect *string `json:"Collect,omitnil,omitempty" name:"Collect"`

	// COS Bucket Information
	COSBucket *string `json:"COSBucket,omitnil,omitempty" name:"COSBucket"`

	// cos region
	COSRegion *string `json:"COSRegion,omitnil,omitempty" name:"COSRegion"`

	// Connection Test Result
	ConnectResult *string `json:"ConnectResult,omitnil,omitempty" name:"ConnectResult"`

	// Development Environment Data Source Configuration
	DevelopmentParams *string `json:"DevelopmentParams,omitnil,omitempty" name:"DevelopmentParams"`
}

func (r *CreateDataSourceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateDataSourceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "Category")
	delete(f, "Type")
	delete(f, "OwnerProjectId")
	delete(f, "OwnerProjectName")
	delete(f, "OwnerProjectIdent")
	delete(f, "BizParams")
	delete(f, "Params")
	delete(f, "Description")
	delete(f, "Display")
	delete(f, "DatabaseName")
	delete(f, "Instance")
	delete(f, "Status")
	delete(f, "ClusterId")
	delete(f, "Collect")
	delete(f, "COSBucket")
	delete(f, "COSRegion")
	delete(f, "ConnectResult")
	delete(f, "DevelopmentParams")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateDataSourceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateDataSourceResponseParams struct {
	// Primary Key ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *uint64 `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateDataSourceResponse struct {
	*tchttp.BaseResponse
	Response *CreateDataSourceResponseParams `json:"Response"`
}

func (r *CreateDataSourceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateDataSourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateDsFolderRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder Name
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Parent Folder ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`
}

type CreateDsFolderRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder Name
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Parent Folder ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`
}

func (r *CreateDsFolderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateDsFolderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FolderName")
	delete(f, "ParentsFolderId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateDsFolderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateDsFolderResponseParams struct {
	// Folder ID, null if creation fails
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateDsFolderResponse struct {
	*tchttp.BaseResponse
	Response *CreateDsFolderResponseParams `json:"Response"`
}

func (r *CreateDsFolderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateDsFolderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateHiveTableByDDLRequestParams struct {
	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database
	Database *string `json:"Database,omitnil,omitempty" name:"Database"`

	// Create Hive Table DDL
	DDLSql *string `json:"DDLSql,omitnil,omitempty" name:"DDLSql"`

	// Table permissions, default is 0: Project share; 1: Individual and administrator only
	Privilege *int64 `json:"Privilege,omitnil,omitempty" name:"Privilege"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Target Table Type (HIVE or GBASE)
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Person in Charge
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`

	// Schema Name
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`
}

type CreateHiveTableByDDLRequest struct {
	*tchttp.BaseRequest
	
	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database
	Database *string `json:"Database,omitnil,omitempty" name:"Database"`

	// Create Hive Table DDL
	DDLSql *string `json:"DDLSql,omitnil,omitempty" name:"DDLSql"`

	// Table permissions, default is 0: Project share; 1: Individual and administrator only
	Privilege *int64 `json:"Privilege,omitnil,omitempty" name:"Privilege"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Target Table Type (HIVE or GBASE)
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Person in Charge
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`

	// Schema Name
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`
}

func (r *CreateHiveTableByDDLRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateHiveTableByDDLRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "DatasourceId")
	delete(f, "Database")
	delete(f, "DDLSql")
	delete(f, "Privilege")
	delete(f, "ProjectId")
	delete(f, "Type")
	delete(f, "Incharge")
	delete(f, "SchemaName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateHiveTableByDDLRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateHiveTableByDDLResponseParams struct {
	// Table Name
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateHiveTableByDDLResponse struct {
	*tchttp.BaseResponse
	Response *CreateHiveTableByDDLResponseParams `json:"Response"`
}

func (r *CreateHiveTableByDDLResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateHiveTableByDDLResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateHiveTableRequestParams struct {
	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database name
	Database *string `json:"Database,omitnil,omitempty" name:"Database"`

	// Base64-encoded Table Creation Statement
	DDLSql *string `json:"DDLSql,omitnil,omitempty" name:"DDLSql"`

	// Table permissions, default is 0: Project share; 1: Individual and administrator only
	Privilege *int64 `json:"Privilege,omitnil,omitempty" name:"Privilege"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Person in Charge
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`
}

type CreateHiveTableRequest struct {
	*tchttp.BaseRequest
	
	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database name
	Database *string `json:"Database,omitnil,omitempty" name:"Database"`

	// Base64-encoded Table Creation Statement
	DDLSql *string `json:"DDLSql,omitnil,omitempty" name:"DDLSql"`

	// Table permissions, default is 0: Project share; 1: Individual and administrator only
	Privilege *int64 `json:"Privilege,omitnil,omitempty" name:"Privilege"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Person in Charge
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`
}

func (r *CreateHiveTableRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateHiveTableRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "DatasourceId")
	delete(f, "Database")
	delete(f, "DDLSql")
	delete(f, "Privilege")
	delete(f, "ProjectId")
	delete(f, "Incharge")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateHiveTableRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateHiveTableResponseParams struct {
	// Whether table creation was successful
	IsSuccess *bool `json:"IsSuccess,omitnil,omitempty" name:"IsSuccess"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateHiveTableResponse struct {
	*tchttp.BaseResponse
	Response *CreateHiveTableResponseParams `json:"Response"`
}

func (r *CreateHiveTableResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateHiveTableResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateIntegrationNodeRequestParams struct {
	// Integrated Node Information
	NodeInfo *IntegrationNodeInfo `json:"NodeInfo,omitnil,omitempty" name:"NodeInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type CreateIntegrationNodeRequest struct {
	*tchttp.BaseRequest
	
	// Integrated Node Information
	NodeInfo *IntegrationNodeInfo `json:"NodeInfo,omitnil,omitempty" name:"NodeInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type, 201 for real-time tasks, 202 for offline tasks
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *CreateIntegrationNodeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateIntegrationNodeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "NodeInfo")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateIntegrationNodeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateIntegrationNodeResponseParams struct {
	// Node
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Current Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateIntegrationNodeResponse struct {
	*tchttp.BaseResponse
	Response *CreateIntegrationNodeResponseParams `json:"Response"`
}

func (r *CreateIntegrationNodeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateIntegrationNodeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateIntegrationTaskRequestParams struct {
	// Task Information
	TaskInfo *IntegrationTaskInfo `json:"TaskInfo,omitnil,omitempty" name:"TaskInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type CreateIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task Information
	TaskInfo *IntegrationTaskInfo `json:"TaskInfo,omitnil,omitempty" name:"TaskInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *CreateIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskInfo")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateIntegrationTaskResponseParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *CreateIntegrationTaskResponseParams `json:"Response"`
}

func (r *CreateIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateMakeDatetimeInfo struct {
	// Start date
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartDate *string `json:"StartDate,omitnil,omitempty" name:"StartDate"`

	// End date
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`

	// Start TimeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timeNote: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

// Predefined struct for user
type CreateOfflineTaskRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Interval, optional, default is 1. Not null. Default is 1
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Delayed Execution Time, in minutes
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Task End Data Time. Not Empty. Default to Current Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Remarks
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`

	// Current date
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Keep it consistent with the previous call to the scheduling interface 27
	TypeId *int64 `json:"TypeId,omitnil,omitempty" name:"TypeId"`

	// Time Specification, for monthly tasks specify days like 1,3, then enter 1,3. Not Empty. Default "" Monthly Task: For specific days like "1,3", specifying the end of the month cannot be combined with specific dates, can only be "L"
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Distinguish between canvas and form
	TaskMode *string `json:"TaskMode,omitnil,omitempty" name:"TaskMode"`
}

type CreateOfflineTaskRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Interval, optional, default is 1. Not null. Default is 1
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Delayed Execution Time, in minutes
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Task End Data Time. Not Empty. Default to Current Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Remarks
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`

	// Current date
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Keep it consistent with the previous call to the scheduling interface 27
	TypeId *int64 `json:"TypeId,omitnil,omitempty" name:"TypeId"`

	// Time Specification, for monthly tasks specify days like 1,3, then enter 1,3. Not Empty. Default "" Monthly Task: For specific days like "1,3", specifying the end of the month cannot be combined with specific dates, can only be "L"
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Distinguish between canvas and form
	TaskMode *string `json:"TaskMode,omitnil,omitempty" name:"TaskMode"`
}

func (r *CreateOfflineTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateOfflineTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "CycleStep")
	delete(f, "DelayTime")
	delete(f, "EndTime")
	delete(f, "Notes")
	delete(f, "StartTime")
	delete(f, "TaskName")
	delete(f, "TypeId")
	delete(f, "TaskAction")
	delete(f, "TaskMode")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateOfflineTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateOfflineTaskResponseParams struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Result
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateOfflineTaskResponse struct {
	*tchttp.BaseResponse
	Response *CreateOfflineTaskResponseParams `json:"Response"`
}

func (r *CreateOfflineTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateOfflineTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateOpsMakePlanRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan Name
	MakeName *string `json:"MakeName,omitnil,omitempty" name:"MakeName"`

	// Supplementary Task Collection
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Supplementary Plan Date Range
	MakeDatetimeList []*CreateMakeDatetimeInfo `json:"MakeDatetimeList,omitnil,omitempty" name:"MakeDatetimeList"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Check Parent Task Status for Supplement, default is not to check. Not recommended for use, will be deprecated, recommend using CheckParentType.
	CheckParent *bool `json:"CheckParent,omitnil,omitempty" name:"CheckParent"`

	// Check Parent Task Type for Supplementary. Value range:
	// <li> NONE: Do not check any </li>
	// <li> ALL: Check all upstream parent tasks </li>
	// <li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
	CheckParentType *string `json:"CheckParentType,omitnil,omitempty" name:"CheckParentType"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Deprecated. Task Self-Dependency Type: parallel, serial (unordered parallel), orderly (ordered serial)
	SelfDependence *string `json:"SelfDependence,omitnil,omitempty" name:"SelfDependence"`

	// Parallelism
	ParallelNum *int64 `json:"ParallelNum,omitnil,omitempty" name:"ParallelNum"`

	// Is the generation cycle of the supplementary instance the same as the original cycle, default is true
	SameCycle *bool `json:"SameCycle,omitnil,omitempty" name:"SameCycle"`

	// Supplementary Instance Target Cycle Type
	TargetTaskCycle *string `json:"TargetTaskCycle,omitnil,omitempty" name:"TargetTaskCycle"`

	// Specified Time for Supplementary Instance Target Cycle Type
	TargetTaskAction *int64 `json:"TargetTaskAction,omitnil,omitempty" name:"TargetTaskAction"`

	// Custom Parameters for Supplement Instance
	MapParamList []*StrToStrMap `json:"MapParamList,omitnil,omitempty" name:"MapParamList"`

	// Creator ID
	CreatorId *string `json:"CreatorId,omitnil,omitempty" name:"CreatorId"`

	// Creator
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Supplementary Plan Description
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// Use Original Self-Dependency Configuration of Task, default is true
	SameSelfDependType *bool `json:"SameSelfDependType,omitnil,omitempty" name:"SameSelfDependType"`

	// Supplementary Instance Original Cycle Type
	SourceTaskCycle *string `json:"SourceTaskCycle,omitnil,omitempty" name:"SourceTaskCycle"`

	// If no specified scheduling resource group (ID) is provided, the original task scheduling execution resource group will be used
	SchedulerResourceGroup *string `json:"SchedulerResourceGroup,omitnil,omitempty" name:"SchedulerResourceGroup"`

	// If no specified integration resource group (ID) is provided, the original task integration execution resource group will be used
	IntegrationResourceGroup *string `json:"IntegrationResourceGroup,omitnil,omitempty" name:"IntegrationResourceGroup"`

	// If no specified scheduling resource group name is provided, the original task scheduling execution resource group will be used
	SchedulerResourceGroupName *string `json:"SchedulerResourceGroupName,omitnil,omitempty" name:"SchedulerResourceGroupName"`

	// If no specified integration resource group name is provided, the original task integration execution resource group will be used
	IntegrationResourceGroupName *string `json:"IntegrationResourceGroupName,omitnil,omitempty" name:"IntegrationResourceGroupName"`
}

type CreateOpsMakePlanRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan Name
	MakeName *string `json:"MakeName,omitnil,omitempty" name:"MakeName"`

	// Supplementary Task Collection
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Supplementary Plan Date Range
	MakeDatetimeList []*CreateMakeDatetimeInfo `json:"MakeDatetimeList,omitnil,omitempty" name:"MakeDatetimeList"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Check Parent Task Status for Supplement, default is not to check. Not recommended for use, will be deprecated, recommend using CheckParentType.
	CheckParent *bool `json:"CheckParent,omitnil,omitempty" name:"CheckParent"`

	// Check Parent Task Type for Supplementary. Value range:
	// <li> NONE: Do not check any </li>
	// <li> ALL: Check all upstream parent tasks </li>
	// <li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
	CheckParentType *string `json:"CheckParentType,omitnil,omitempty" name:"CheckParentType"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Deprecated. Task Self-Dependency Type: parallel, serial (unordered parallel), orderly (ordered serial)
	SelfDependence *string `json:"SelfDependence,omitnil,omitempty" name:"SelfDependence"`

	// Parallelism
	ParallelNum *int64 `json:"ParallelNum,omitnil,omitempty" name:"ParallelNum"`

	// Is the generation cycle of the supplementary instance the same as the original cycle, default is true
	SameCycle *bool `json:"SameCycle,omitnil,omitempty" name:"SameCycle"`

	// Supplementary Instance Target Cycle Type
	TargetTaskCycle *string `json:"TargetTaskCycle,omitnil,omitempty" name:"TargetTaskCycle"`

	// Specified Time for Supplementary Instance Target Cycle Type
	TargetTaskAction *int64 `json:"TargetTaskAction,omitnil,omitempty" name:"TargetTaskAction"`

	// Custom Parameters for Supplement Instance
	MapParamList []*StrToStrMap `json:"MapParamList,omitnil,omitempty" name:"MapParamList"`

	// Creator ID
	CreatorId *string `json:"CreatorId,omitnil,omitempty" name:"CreatorId"`

	// Creator
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Supplementary Plan Description
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// Use Original Self-Dependency Configuration of Task, default is true
	SameSelfDependType *bool `json:"SameSelfDependType,omitnil,omitempty" name:"SameSelfDependType"`

	// Supplementary Instance Original Cycle Type
	SourceTaskCycle *string `json:"SourceTaskCycle,omitnil,omitempty" name:"SourceTaskCycle"`

	// If no specified scheduling resource group (ID) is provided, the original task scheduling execution resource group will be used
	SchedulerResourceGroup *string `json:"SchedulerResourceGroup,omitnil,omitempty" name:"SchedulerResourceGroup"`

	// If no specified integration resource group (ID) is provided, the original task integration execution resource group will be used
	IntegrationResourceGroup *string `json:"IntegrationResourceGroup,omitnil,omitempty" name:"IntegrationResourceGroup"`

	// If no specified scheduling resource group name is provided, the original task scheduling execution resource group will be used
	SchedulerResourceGroupName *string `json:"SchedulerResourceGroupName,omitnil,omitempty" name:"SchedulerResourceGroupName"`

	// If no specified integration resource group name is provided, the original task integration execution resource group will be used
	IntegrationResourceGroupName *string `json:"IntegrationResourceGroupName,omitnil,omitempty" name:"IntegrationResourceGroupName"`
}

func (r *CreateOpsMakePlanRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateOpsMakePlanRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "MakeName")
	delete(f, "TaskIdList")
	delete(f, "MakeDatetimeList")
	delete(f, "ProjectIdent")
	delete(f, "CheckParent")
	delete(f, "CheckParentType")
	delete(f, "ProjectName")
	delete(f, "SelfDependence")
	delete(f, "ParallelNum")
	delete(f, "SameCycle")
	delete(f, "TargetTaskCycle")
	delete(f, "TargetTaskAction")
	delete(f, "MapParamList")
	delete(f, "CreatorId")
	delete(f, "Creator")
	delete(f, "Remark")
	delete(f, "SameSelfDependType")
	delete(f, "SourceTaskCycle")
	delete(f, "SchedulerResourceGroup")
	delete(f, "IntegrationResourceGroup")
	delete(f, "SchedulerResourceGroupName")
	delete(f, "IntegrationResourceGroupName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateOpsMakePlanRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateOpsMakePlanResponseParams struct {
	// Result
	Data *CommonIdOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateOpsMakePlanResponse struct {
	*tchttp.BaseResponse
	Response *CreateOpsMakePlanResponseParams `json:"Response"`
}

func (r *CreateOpsMakePlanResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateOpsMakePlanResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateRuleRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Rule name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Rule Template List
	RuleTemplateId *uint64 `json:"RuleTemplateId,omitnil,omitempty" name:"RuleTemplateId"`

	// Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Field Detailed Type, int, string
	SourceObjectDataTypeName *string `json:"SourceObjectDataTypeName,omitnil,omitempty" name:"SourceObjectDataTypeName"`

	// Source Field Name
	SourceObjectValue *string `json:"SourceObjectValue,omitnil,omitempty" name:"SourceObjectValue"`

	// Detection Range 1.Whole Table 2.Conditional Scan
	ConditionType *uint64 `json:"ConditionType,omitnil,omitempty" name:"ConditionType"`

	// Conditional Scan WHERE Condition Expression
	ConditionExpression *string `json:"ConditionExpression,omitnil,omitempty" name:"ConditionExpression"`

	// Custom Definition SQL
	CustomSql *string `json:"CustomSql,omitnil,omitempty" name:"CustomSql"`

	// Alert Trigger Condition
	CompareRule *CompareRule `json:"CompareRule,omitnil,omitempty" name:"CompareRule"`

	// Alert Trigger Level 1.Low, 2.Medium, 3.High
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Rule Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Target Database Id
	TargetDatabaseId *string `json:"TargetDatabaseId,omitnil,omitempty" name:"TargetDatabaseId"`

	// Target Table Id
	TargetTableId *string `json:"TargetTableId,omitnil,omitempty" name:"TargetTableId"`

	// Target Filter Condition Expression
	TargetConditionExpr *string `json:"TargetConditionExpr,omitnil,omitempty" name:"TargetConditionExpr"`

	// Source Field and Target Field Association Condition ON Expression
	RelConditionExpr *string `json:"RelConditionExpr,omitnil,omitempty" name:"RelConditionExpr"`

	// Custom Definition Template SQL Expression Field Replacement Parameter
	FieldConfig *RuleFieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`

	// Target Field Name CITY
	TargetObjectValue *string `json:"TargetObjectValue,omitnil,omitempty" name:"TargetObjectValue"`

	// Supported Execution Engine List for the Rule
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`
}

type CreateRuleRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Rule name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Rule Template List
	RuleTemplateId *uint64 `json:"RuleTemplateId,omitnil,omitempty" name:"RuleTemplateId"`

	// Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Field Detailed Type, int, string
	SourceObjectDataTypeName *string `json:"SourceObjectDataTypeName,omitnil,omitempty" name:"SourceObjectDataTypeName"`

	// Source Field Name
	SourceObjectValue *string `json:"SourceObjectValue,omitnil,omitempty" name:"SourceObjectValue"`

	// Detection Range 1.Whole Table 2.Conditional Scan
	ConditionType *uint64 `json:"ConditionType,omitnil,omitempty" name:"ConditionType"`

	// Conditional Scan WHERE Condition Expression
	ConditionExpression *string `json:"ConditionExpression,omitnil,omitempty" name:"ConditionExpression"`

	// Custom Definition SQL
	CustomSql *string `json:"CustomSql,omitnil,omitempty" name:"CustomSql"`

	// Alert Trigger Condition
	CompareRule *CompareRule `json:"CompareRule,omitnil,omitempty" name:"CompareRule"`

	// Alert Trigger Level 1.Low, 2.Medium, 3.High
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Rule Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Target Database Id
	TargetDatabaseId *string `json:"TargetDatabaseId,omitnil,omitempty" name:"TargetDatabaseId"`

	// Target Table Id
	TargetTableId *string `json:"TargetTableId,omitnil,omitempty" name:"TargetTableId"`

	// Target Filter Condition Expression
	TargetConditionExpr *string `json:"TargetConditionExpr,omitnil,omitempty" name:"TargetConditionExpr"`

	// Source Field and Target Field Association Condition ON Expression
	RelConditionExpr *string `json:"RelConditionExpr,omitnil,omitempty" name:"RelConditionExpr"`

	// Custom Definition Template SQL Expression Field Replacement Parameter
	FieldConfig *RuleFieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`

	// Target Field Name CITY
	TargetObjectValue *string `json:"TargetObjectValue,omitnil,omitempty" name:"TargetObjectValue"`

	// Supported Execution Engine List for the Rule
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`
}

func (r *CreateRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "RuleGroupId")
	delete(f, "Name")
	delete(f, "TableId")
	delete(f, "RuleTemplateId")
	delete(f, "Type")
	delete(f, "QualityDim")
	delete(f, "SourceObjectDataTypeName")
	delete(f, "SourceObjectValue")
	delete(f, "ConditionType")
	delete(f, "ConditionExpression")
	delete(f, "CustomSql")
	delete(f, "CompareRule")
	delete(f, "AlarmLevel")
	delete(f, "Description")
	delete(f, "DatasourceId")
	delete(f, "DatabaseId")
	delete(f, "TargetDatabaseId")
	delete(f, "TargetTableId")
	delete(f, "TargetConditionExpr")
	delete(f, "RelConditionExpr")
	delete(f, "FieldConfig")
	delete(f, "TargetObjectValue")
	delete(f, "SourceEngineTypes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateRuleResponseParams struct {
	// RuleNote: This field may return null, indicating that no valid value can be obtained.
	Data *Rule `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateRuleResponse struct {
	*tchttp.BaseResponse
	Response *CreateRuleResponseParams `json:"Response"`
}

func (r *CreateRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateRuleTemplateRequestParams struct {
	// Template Type 1. System Template 2. Custom Definition Template
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Template Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Template Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Corresponding Engine Type of the Source
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`

	// Whether to Associate with Other Databases and Tables
	MultiSourceFlag *bool `json:"MultiSourceFlag,omitnil,omitempty" name:"MultiSourceFlag"`

	// SQL Expression
	SqlExpression *string `json:"SqlExpression,omitnil,omitempty" name:"SqlExpression"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to add where parameter
	WhereFlag *bool `json:"WhereFlag,omitnil,omitempty" name:"WhereFlag"`
}

type CreateRuleTemplateRequest struct {
	*tchttp.BaseRequest
	
	// Template Type 1. System Template 2. Custom Definition Template
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Template Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Template Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Corresponding Engine Type of the Source
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`

	// Whether to Associate with Other Databases and Tables
	MultiSourceFlag *bool `json:"MultiSourceFlag,omitnil,omitempty" name:"MultiSourceFlag"`

	// SQL Expression
	SqlExpression *string `json:"SqlExpression,omitnil,omitempty" name:"SqlExpression"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to add where parameter
	WhereFlag *bool `json:"WhereFlag,omitnil,omitempty" name:"WhereFlag"`
}

func (r *CreateRuleTemplateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateRuleTemplateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "Name")
	delete(f, "QualityDim")
	delete(f, "SourceObjectType")
	delete(f, "Description")
	delete(f, "SourceEngineTypes")
	delete(f, "MultiSourceFlag")
	delete(f, "SqlExpression")
	delete(f, "ProjectId")
	delete(f, "WhereFlag")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateRuleTemplateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateRuleTemplateResponseParams struct {
	// Template ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *uint64 `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateRuleTemplateResponse struct {
	*tchttp.BaseResponse
	Response *CreateRuleTemplateResponseParams `json:"Response"`
}

func (r *CreateRuleTemplateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateRuleTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskAlarmRegularRequestParams struct {
	// Alert Configuration Information
	TaskAlarmInfo *TaskAlarmInfo `json:"TaskAlarmInfo,omitnil,omitempty" name:"TaskAlarmInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type CreateTaskAlarmRegularRequest struct {
	*tchttp.BaseRequest
	
	// Alert Configuration Information
	TaskAlarmInfo *TaskAlarmInfo `json:"TaskAlarmInfo,omitnil,omitempty" name:"TaskAlarmInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *CreateTaskAlarmRegularRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskAlarmRegularRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskAlarmInfo")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateTaskAlarmRegularRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskAlarmRegularResponseParams struct {
	// Alert ID
	AlarmId *int64 `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateTaskAlarmRegularResponse struct {
	*tchttp.BaseResponse
	Response *CreateTaskAlarmRegularResponseParams `json:"Response"`
}

func (r *CreateTaskAlarmRegularResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskAlarmRegularResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskFolderRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder Name
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Parent Folder ID
	ParentFolderId *string `json:"ParentFolderId,omitnil,omitempty" name:"ParentFolderId"`
}

type CreateTaskFolderRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder Name
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Parent Folder ID
	ParentFolderId *string `json:"ParentFolderId,omitnil,omitempty" name:"ParentFolderId"`
}

func (r *CreateTaskFolderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskFolderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FolderName")
	delete(f, "WorkflowId")
	delete(f, "ParentFolderId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateTaskFolderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskFolderResponseParams struct {
	// Task Folder ID, null if creation failed
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateTaskFolderResponse struct {
	*tchttp.BaseResponse
	Response *CreateTaskFolderResponseParams `json:"Response"`
}

func (r *CreateTaskFolderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskFolderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// 26 Offline Synchronization,30 Python,31 PySpark,32 DLC,33 Impala,34 Hive SQL,35 Shell,36 Spark SQL,39 Spark,40 TCHouse-P,92 MapReduce
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Extended Attributes
	TaskExt []*TaskExtInfo `json:"TaskExt,omitnil,omitempty" name:"TaskExt"`
}

type CreateTaskRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// 26 Offline Synchronization,30 Python,31 PySpark,32 DLC,33 Impala,34 Hive SQL,35 Shell,36 Spark SQL,39 Spark,40 TCHouse-P,92 MapReduce
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Extended Attributes
	TaskExt []*TaskExtInfo `json:"TaskExt,omitnil,omitempty" name:"TaskExt"`
}

func (r *CreateTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	delete(f, "TaskName")
	delete(f, "TaskType")
	delete(f, "TaskExt")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskResponseParams struct {
	// Return Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *CommonId `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateTaskResponse struct {
	*tchttp.BaseResponse
	Response *CreateTaskResponseParams `json:"Response"`
}

func (r *CreateTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskVersionDsRequestParams struct {
	// Task ID
	Task *BatchCreateTaskVersionDTO `json:"Task,omitnil,omitempty" name:"Task"`

	// Whether to verify that the parent task has been submitted for scheduling
	NeedCheckParentSubmitted *bool `json:"NeedCheckParentSubmitted,omitnil,omitempty" name:"NeedCheckParentSubmitted"`

	// Automatic Execution
	AutoRun *bool `json:"AutoRun,omitnil,omitempty" name:"AutoRun"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Request Source, WEB frontend; CLIENT client
	RequestFromSource *string `json:"RequestFromSource,omitnil,omitempty" name:"RequestFromSource"`

	// Alert Method: email-Email; sms-SMS; wecom-WeCom
	AlarmWays *string `json:"AlarmWays,omitnil,omitempty" name:"AlarmWays"`

	// Alert Object: 1-Project Administrator, 2-Task Owner
	AlarmRecipientTypes *string `json:"AlarmRecipientTypes,omitnil,omitempty" name:"AlarmRecipientTypes"`

	// Whether to verify circular dependencies, default is true. If false is passed after successful validation using CheckTaskCycleLink and CheckTaskCycleConfiguration interfaces, the back-end server will not perform validation
	EnableCheckTaskCycleLink *bool `json:"EnableCheckTaskCycleLink,omitnil,omitempty" name:"EnableCheckTaskCycleLink"`
}

type CreateTaskVersionDsRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	Task *BatchCreateTaskVersionDTO `json:"Task,omitnil,omitempty" name:"Task"`

	// Whether to verify that the parent task has been submitted for scheduling
	NeedCheckParentSubmitted *bool `json:"NeedCheckParentSubmitted,omitnil,omitempty" name:"NeedCheckParentSubmitted"`

	// Automatic Execution
	AutoRun *bool `json:"AutoRun,omitnil,omitempty" name:"AutoRun"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Request Source, WEB frontend; CLIENT client
	RequestFromSource *string `json:"RequestFromSource,omitnil,omitempty" name:"RequestFromSource"`

	// Alert Method: email-Email; sms-SMS; wecom-WeCom
	AlarmWays *string `json:"AlarmWays,omitnil,omitempty" name:"AlarmWays"`

	// Alert Object: 1-Project Administrator, 2-Task Owner
	AlarmRecipientTypes *string `json:"AlarmRecipientTypes,omitnil,omitempty" name:"AlarmRecipientTypes"`

	// Whether to verify circular dependencies, default is true. If false is passed after successful validation using CheckTaskCycleLink and CheckTaskCycleConfiguration interfaces, the back-end server will not perform validation
	EnableCheckTaskCycleLink *bool `json:"EnableCheckTaskCycleLink,omitnil,omitempty" name:"EnableCheckTaskCycleLink"`
}

func (r *CreateTaskVersionDsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskVersionDsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Task")
	delete(f, "NeedCheckParentSubmitted")
	delete(f, "AutoRun")
	delete(f, "ProjectId")
	delete(f, "RequestFromSource")
	delete(f, "AlarmWays")
	delete(f, "AlarmRecipientTypes")
	delete(f, "EnableCheckTaskCycleLink")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateTaskVersionDsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateTaskVersionDsResponseParams struct {
	// VersionNote: This field may return null, indicating that no valid value can be obtained.
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateTaskVersionDsResponse struct {
	*tchttp.BaseResponse
	Response *CreateTaskVersionDsResponseParams `json:"Response"`
}

func (r *CreateTaskVersionDsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateTaskVersionDsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateWorkflowDsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow name
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow Description
	WorkflowDesc *string `json:"WorkflowDesc,omitnil,omitempty" name:"WorkflowDesc"`
}

type CreateWorkflowDsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow name
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow Description
	WorkflowDesc *string `json:"WorkflowDesc,omitnil,omitempty" name:"WorkflowDesc"`
}

func (r *CreateWorkflowDsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateWorkflowDsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowName")
	delete(f, "FolderId")
	delete(f, "WorkflowDesc")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "CreateWorkflowDsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type CreateWorkflowDsResponseParams struct {
	// Workflow ID
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type CreateWorkflowDsResponse struct {
	*tchttp.BaseResponse
	Response *CreateWorkflowDsResponseParams `json:"Response"`
}

func (r *CreateWorkflowDsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *CreateWorkflowDsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DagInstancesRequestParams struct {
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions, this interface requires the example information to be placed in this field
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type DagInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions, this interface requires the example information to be placed in this field
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *DagInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DagInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "CheckFather")
	delete(f, "RerunType")
	delete(f, "DependentWay")
	delete(f, "SkipEventListening")
	delete(f, "SonInstanceType")
	delete(f, "SearchCondition")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DagInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DagInstancesResponseParams struct {
	// Result
	Data *CollectionInstanceOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DagInstancesResponse struct {
	*tchttp.BaseResponse
	Response *DagInstancesResponseParams `json:"Response"`
}

func (r *DagInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DagInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DailyScoreInfo struct {
	// Statistics Date TimestampNote: This field may return null, indicating that no valid value can be obtained.
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// ScoringNote: This field may return null, indicating that no valid value can be obtained.
	Score *float64 `json:"Score,omitnil,omitempty" name:"Score"`
}

type DataCheckStat struct {
	// Total Tables
	TableTotal *uint64 `json:"TableTotal,omitnil,omitempty" name:"TableTotal"`

	// Total Number of Fields
	ColumnTotal *uint64 `json:"ColumnTotal,omitnil,omitempty" name:"ColumnTotal"`

	// Number of Table Configuration Checks
	TableConfig *uint64 `json:"TableConfig,omitnil,omitempty" name:"TableConfig"`

	// Number of Field Configuration Checks
	ColumnConfig *uint64 `json:"ColumnConfig,omitnil,omitempty" name:"ColumnConfig"`

	// Actual Number of Table Checks
	TableExec *uint64 `json:"TableExec,omitnil,omitempty" name:"TableExec"`

	// Actual Number of Field Checks
	ColumnExec *uint64 `json:"ColumnExec,omitnil,omitempty" name:"ColumnExec"`
}

type DataSourceInfo struct {
	// If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ID *uint64 `json:"ID,omitnil,omitempty" name:"ID"`

	// Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Data Source Name, cannot be empty under the same SpaceNameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Region to which the data source engine belongs
	// Note: This field may return null, indicating that no valid value can be obtained.
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Cluster ID to which the data source belongs
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Application ID AppId
	// Note: This field may return null, indicating that no valid value can be obtained.
	AppId *uint64 `json:"AppId,omitnil,omitempty" name:"AppId"`

	// Configuration Information Extension of Business Data SourceNote: This field may return null, indicating that no valid value can be obtained.
	BizParams *string `json:"BizParams,omitnil,omitempty" name:"BizParams"`

	// Data Source Category: Binding Engine, Binding DatabaseNote: This field may return null, indicating that no valid value can be obtained.
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Data Source Display Name, for visual inspectionNote: This field may return null, indicating that no valid value can be obtained.
	Display *string `json:"Display,omitnil,omitempty" name:"Display"`

	// Data Source Responsible Person Account ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerAccount *string `json:"OwnerAccount,omitnil,omitempty" name:"OwnerAccount"`

	// Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source typeNote: This field may return null, indicating that no valid value can be obtained.
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Data source owner account name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerAccountName *string `json:"OwnerAccountName,omitnil,omitempty" name:"OwnerAccountName"`

	// Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
	ClusterName *string `json:"ClusterName,omitnil,omitempty" name:"ClusterName"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	OwnerProjectId *string `json:"OwnerProjectId,omitnil,omitempty" name:"OwnerProjectId"`

	// Project NameNote: This field may return null, indicating that no valid value can be obtained.
	OwnerProjectName *string `json:"OwnerProjectName,omitnil,omitempty" name:"OwnerProjectName"`

	// Belonging project identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerProjectIdent *string `json:"OwnerProjectIdent,omitnil,omitempty" name:"OwnerProjectIdent"`

	// Authorized project
	// Note: This field may return null, indicating that no valid value can be obtained.
	AuthorityProjectName *string `json:"AuthorityProjectName,omitnil,omitempty" name:"AuthorityProjectName"`

	// Authorized user
	// Note: This field may return null, indicating that no valid value can be obtained.
	AuthorityUserName *string `json:"AuthorityUserName,omitnil,omitempty" name:"AuthorityUserName"`

	// Edit permissions available
	// Note: This field may return null, indicating that no valid value can be obtained.
	Edit *bool `json:"Edit,omitnil,omitempty" name:"Edit"`

	// Authorization permissions available
	// Note: This field may return null, indicating that no valid value can be obtained.
	Author *bool `json:"Author,omitnil,omitempty" name:"Author"`

	// Transfer permissions available
	// Note: This field may return null, indicating that no valid value can be obtained.
	Deliver *bool `json:"Deliver,omitnil,omitempty" name:"Deliver"`

	// Data source status
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataSourceStatus *string `json:"DataSourceStatus,omitnil,omitempty" name:"DataSourceStatus"`

	// TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *int64 `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Params JSON string
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParamsString *string `json:"ParamsString,omitnil,omitempty" name:"ParamsString"`

	// BizParams JSON string
	// Note: This field may return null, indicating that no valid value can be obtained.
	BizParamsString *string `json:"BizParamsString,omitnil,omitempty" name:"BizParamsString"`

	// Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
	ModifiedTime *int64 `json:"ModifiedTime,omitnil,omitempty" name:"ModifiedTime"`

	// Data source display type, corresponding to Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	ShowType *string `json:"ShowType,omitnil,omitempty" name:"ShowType"`

	// Current data source production source Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProductId *uint64 `json:"ProductId,omitnil,omitempty" name:"ProductId"`

	// Current data source development source Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	DevelopmentId *uint64 `json:"DevelopmentId,omitnil,omitempty" name:"DevelopmentId"`

	// Same as params, content is the data for the development data source
	// Note: This field may return null, indicating that no valid value can be obtained.
	DevelopmentParams *string `json:"DevelopmentParams,omitnil,omitempty" name:"DevelopmentParams"`
}

type DataSourceInfoPage struct {
	// pagination page number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// pagination size
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// data source list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Rows []*DataSourceInfo `json:"Rows,omitnil,omitempty" name:"Rows"`

	// Total numberNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// total pagination pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPageNumber *uint64 `json:"TotalPageNumber,omitnil,omitempty" name:"TotalPageNumber"`
}

type DatabaseInfo struct {
	// Data source name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Database id
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Instance Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Data source typeNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceType *uint64 `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`

	// Database Original Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OriginDatabaseName *string `json:"OriginDatabaseName,omitnil,omitempty" name:"OriginDatabaseName"`

	// Schema NameNote: This field may return null, indicating that no valid value can be obtained.
	OriginSchemaName *string `json:"OriginSchemaName,omitnil,omitempty" name:"OriginSchemaName"`

	// 0 or Not Returned. Undefined, 1. generation 2. development
	// Note: This field may return null, indicating that no valid value can be obtained.
	DsEnvType *int64 `json:"DsEnvType,omitnil,omitempty" name:"DsEnvType"`
}

type DatabaseMeta struct {
	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Technology Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreType *string `json:"MetastoreType,omitnil,omitempty" name:"MetastoreType"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *int64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Project English Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Data Source Category: Binding Engine, Binding Database, Available Values: DB, ENGINE
	// Note: This field may return null, indicating that no valid value can be obtained.
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Data Source Engine Region
	// Note: This field may return null, indicating that no valid value can be obtained.
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Database Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Project Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectDisplayName *string `json:"ProjectDisplayName,omitnil,omitempty" name:"ProjectDisplayName"`

	// Person in Charge Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerAccountName *string `json:"OwnerAccountName,omitnil,omitempty" name:"OwnerAccountName"`

	// Data Source Display Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data Source Type: hive/mysql/hbase, etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	Catalog *string `json:"Catalog,omitnil,omitempty" name:"Catalog"`

	// Storage Size in bytes
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageSize *int64 `json:"StorageSize,omitnil,omitempty" name:"StorageSize"`

	// Formatted Storage Size, with unit, e.g., 12B
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageSizeWithUnit *string `json:"StorageSizeWithUnit,omitnil,omitempty" name:"StorageSizeWithUnit"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`
}

type DatasourceBaseInfo struct {
	// If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseNames []*string `json:"DatabaseNames,omitnil,omitempty" name:"DatabaseNames"`

	// Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source ID
	ID *uint64 `json:"ID,omitnil,omitempty" name:"ID"`

	// Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Data Source Name, cannot be empty under the same SpaceName
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Region to which the data source engine belongs
	// Note: This field may return null, indicating that no valid value can be obtained.
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Cluster ID to which the data source belongs
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Version information of the data source
	// Note: This field may return null, indicating that no valid value can be obtained.
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// Attached parameter information of the data source Params JSON string
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParamsString *string `json:"ParamsString,omitnil,omitempty" name:"ParamsString"`

	// Distinguish whether the data source type is a custom Definition source or a system source
	// Note: This field may return null, indicating that no valid value can be obtained.
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`
}

// Predefined struct for user
type DeleteCustomFunctionRequestParams struct {
	// Cluster Instance ID
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Function ID
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Project ID, required
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Function Name
	FunctionName *string `json:"FunctionName,omitnil,omitempty" name:"FunctionName"`

	// Function Type, HIVE, SPARK, DLC, CDW_POSTGRESQL
	FunctionType *string `json:"FunctionType,omitnil,omitempty" name:"FunctionType"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Pattern name
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`

	// Function Command Format
	CommandFormat *string `json:"CommandFormat,omitnil,omitempty" name:"CommandFormat"`
}

type DeleteCustomFunctionRequest struct {
	*tchttp.BaseRequest
	
	// Cluster Instance ID
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Function ID
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Project ID, required
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Function Name
	FunctionName *string `json:"FunctionName,omitnil,omitempty" name:"FunctionName"`

	// Function Type, HIVE, SPARK, DLC, CDW_POSTGRESQL
	FunctionType *string `json:"FunctionType,omitnil,omitempty" name:"FunctionType"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Pattern name
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`

	// Function Command Format
	CommandFormat *string `json:"CommandFormat,omitnil,omitempty" name:"CommandFormat"`
}

func (r *DeleteCustomFunctionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteCustomFunctionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ClusterIdentifier")
	delete(f, "FunctionId")
	delete(f, "ProjectId")
	delete(f, "FunctionName")
	delete(f, "FunctionType")
	delete(f, "DatabaseName")
	delete(f, "SchemaName")
	delete(f, "CommandFormat")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteCustomFunctionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteCustomFunctionResponseParams struct {
	// Function ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteCustomFunctionResponse struct {
	*tchttp.BaseResponse
	Response *DeleteCustomFunctionResponseParams `json:"Response"`
}

func (r *DeleteCustomFunctionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteCustomFunctionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteDataSourcesRequestParams struct {
	// ID List
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DeleteDataSourcesRequest struct {
	*tchttp.BaseRequest
	
	// ID List
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DeleteDataSourcesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteDataSourcesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Ids")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteDataSourcesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteDataSourcesResponseParams struct {
	// Delete successful?
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteDataSourcesResponse struct {
	*tchttp.BaseResponse
	Response *DeleteDataSourcesResponseParams `json:"Response"`
}

func (r *DeleteDataSourcesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteDataSourcesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteDsFolderRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`
}

type DeleteDsFolderRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`
}

func (r *DeleteDsFolderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteDsFolderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FolderId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteDsFolderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteDsFolderResponseParams struct {
	// true means deletion successful, false means deletion failed
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteDsFolderResponse struct {
	*tchttp.BaseResponse
	Response *DeleteDsFolderResponseParams `json:"Response"`
}

func (r *DeleteDsFolderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteDsFolderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteFilePathRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`

	// Usage Status- true
	// - false
	UseStatus *string `json:"UseStatus,omitnil,omitempty" name:"UseStatus"`

	// File path
	FilePaths []*string `json:"FilePaths,omitnil,omitempty" name:"FilePaths"`
}

type DeleteFilePathRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`

	// Usage Status- true
	// - false
	UseStatus *string `json:"UseStatus,omitnil,omitempty" name:"UseStatus"`

	// File path
	FilePaths []*string `json:"FilePaths,omitnil,omitempty" name:"FilePaths"`
}

func (r *DeleteFilePathRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteFilePathRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ResourceIds")
	delete(f, "UseStatus")
	delete(f, "FilePaths")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteFilePathRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteFilePathResponseParams struct {
	// File ListNote: This field may return null, indicating that no valid value can be obtained.
	UserFileList []*UserFileInfo `json:"UserFileList,omitnil,omitempty" name:"UserFileList"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteFilePathResponse struct {
	*tchttp.BaseResponse
	Response *DeleteFilePathResponseParams `json:"Response"`
}

func (r *DeleteFilePathResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteFilePathResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteFileRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

type DeleteFileRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

func (r *DeleteFileRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteFileRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ResourceId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteFileRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteFileResponseParams struct {
	// Delete Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	Result *bool `json:"Result,omitnil,omitempty" name:"Result"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteFileResponse struct {
	*tchttp.BaseResponse
	Response *DeleteFileResponseParams `json:"Response"`
}

func (r *DeleteFileResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteFileResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteIntegrationNodeRequestParams struct {
	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DeleteIntegrationNodeRequest struct {
	*tchttp.BaseRequest
	
	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DeleteIntegrationNodeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteIntegrationNodeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteIntegrationNodeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteIntegrationNodeResponseParams struct {
	// Indication of whether the deletion was successful
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteIntegrationNodeResponse struct {
	*tchttp.BaseResponse
	Response *DeleteIntegrationNodeResponseParams `json:"Response"`
}

func (r *DeleteIntegrationNodeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteIntegrationNodeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DeleteIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DeleteIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteIntegrationTaskResponseParams struct {
	// Task Deletion Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// Task Deletion Success or Failure Indicator
	// 0 indicates deletion was successful
	// 1 indicates failure, see DeleteErrInfo for the reason
	// 100 indicates running or suspend task can't be deleted, the reason will also be written in DeleteErrInfo
	// Note: This field may return null, indicating that no valid value can be obtained.
	DeleteFlag *int64 `json:"DeleteFlag,omitnil,omitempty" name:"DeleteFlag"`

	// Reason for Deletion Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	DeleteErrInfo *string `json:"DeleteErrInfo,omitnil,omitempty" name:"DeleteErrInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *DeleteIntegrationTaskResponseParams `json:"Response"`
}

func (r *DeleteIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteOfflineTaskRequestParams struct {
	// Operator's name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Project/workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Virtual task marker (defaults to false, consistent with previous scheduling interfaces)
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`
}

type DeleteOfflineTaskRequest struct {
	*tchttp.BaseRequest
	
	// Operator's name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Project/workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Virtual task marker (defaults to false, consistent with previous scheduling interfaces)
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`
}

func (r *DeleteOfflineTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteOfflineTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "OperatorName")
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "VirtualFlag")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteOfflineTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteOfflineTaskResponseParams struct {
	// Result
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteOfflineTaskResponse struct {
	*tchttp.BaseResponse
	Response *DeleteOfflineTaskResponseParams `json:"Response"`
}

func (r *DeleteOfflineTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteOfflineTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteProjectParamDsRequestParams struct {
	// Parameter Name
	ParamKey *string `json:"ParamKey,omitnil,omitempty" name:"ParamKey"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DeleteProjectParamDsRequest struct {
	*tchttp.BaseRequest
	
	// Parameter Name
	ParamKey *string `json:"ParamKey,omitnil,omitempty" name:"ParamKey"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DeleteProjectParamDsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteProjectParamDsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ParamKey")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteProjectParamDsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteProjectParamDsResponseParams struct {
	// Result true Deleted Successfully
	// false Deletion Failed
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteProjectParamDsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteProjectParamDsResponseParams `json:"Response"`
}

func (r *DeleteProjectParamDsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteProjectParamDsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteProjectUsersRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// User ID list
	UserIds []*string `json:"UserIds,omitnil,omitempty" name:"UserIds"`
}

type DeleteProjectUsersRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// User ID list
	UserIds []*string `json:"UserIds,omitnil,omitempty" name:"UserIds"`
}

func (r *DeleteProjectUsersRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteProjectUsersRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "UserIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteProjectUsersRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteProjectUsersResponseParams struct {
	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteProjectUsersResponse struct {
	*tchttp.BaseResponse
	Response *DeleteProjectUsersResponseParams `json:"Response"`
}

func (r *DeleteProjectUsersResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteProjectUsersResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteResourceFileRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

type DeleteResourceFileRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

func (r *DeleteResourceFileRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteResourceFileRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ResourceId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteResourceFileRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteResourceFileResponseParams struct {
	// Resource Deletion Result
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteResourceFileResponse struct {
	*tchttp.BaseResponse
	Response *DeleteResourceFileResponseParams `json:"Response"`
}

func (r *DeleteResourceFileResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteResourceFileResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteResourceFilesRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Usage Status
	UseStatus *bool `json:"UseStatus,omitnil,omitempty" name:"UseStatus"`

	// Resource ID List
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`

	// Resource Path List
	FilePaths []*string `json:"FilePaths,omitnil,omitempty" name:"FilePaths"`
}

type DeleteResourceFilesRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Usage Status
	UseStatus *bool `json:"UseStatus,omitnil,omitempty" name:"UseStatus"`

	// Resource ID List
	ResourceIds []*string `json:"ResourceIds,omitnil,omitempty" name:"ResourceIds"`

	// Resource Path List
	FilePaths []*string `json:"FilePaths,omitnil,omitempty" name:"FilePaths"`
}

func (r *DeleteResourceFilesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteResourceFilesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "UseStatus")
	delete(f, "ResourceIds")
	delete(f, "FilePaths")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteResourceFilesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteResourceFilesResponseParams struct {
	// Resource Batch Deletion Result
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteResourceFilesResponse struct {
	*tchttp.BaseResponse
	Response *DeleteResourceFilesResponseParams `json:"Response"`
}

func (r *DeleteResourceFilesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteResourceFilesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteResourceRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

type DeleteResourceRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource ID
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`
}

func (r *DeleteResourceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteResourceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ResourceId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteResourceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteResourceResponseParams struct {
	// Success Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteResourceResponse struct {
	*tchttp.BaseResponse
	Response *DeleteResourceResponseParams `json:"Response"`
}

func (r *DeleteResourceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteResourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRuleRequestParams struct {
	// Quality Rule ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DeleteRuleRequest struct {
	*tchttp.BaseRequest
	
	// Quality Rule ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DeleteRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRuleResponseParams struct {
	// Whether Deletion is Successful
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteRuleResponse struct {
	*tchttp.BaseResponse
	Response *DeleteRuleResponseParams `json:"Response"`
}

func (r *DeleteRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRuleTemplateRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Template ID List
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

type DeleteRuleTemplateRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Template ID List
	Ids []*uint64 `json:"Ids,omitnil,omitempty" name:"Ids"`
}

func (r *DeleteRuleTemplateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRuleTemplateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Ids")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteRuleTemplateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteRuleTemplateResponseParams struct {
	// Deleted successfully
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteRuleTemplateResponse struct {
	*tchttp.BaseResponse
	Response *DeleteRuleTemplateResponseParams `json:"Response"`
}

func (r *DeleteRuleTemplateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteRuleTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteTaskAlarmRegularRequestParams struct {
	// Primary key ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Type (201 represents Real-time task, 202 represents Offline task)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type DeleteTaskAlarmRegularRequest struct {
	*tchttp.BaseRequest
	
	// Primary key ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Type (201 represents Real-time task, 202 represents Offline task)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *DeleteTaskAlarmRegularRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteTaskAlarmRegularRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteTaskAlarmRegularRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteTaskAlarmRegularResponseParams struct {
	// Delete Result (true for success, false for failure)
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteTaskAlarmRegularResponse struct {
	*tchttp.BaseResponse
	Response *DeleteTaskAlarmRegularResponseParams `json:"Response"`
}

func (r *DeleteTaskAlarmRegularResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteTaskAlarmRegularResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteTaskDsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Delete script?
	// true: delete
	// false: do not delete
	// Default false if not passed
	DeleteScript *bool `json:"DeleteScript,omitnil,omitempty" name:"DeleteScript"`

	// Task operation: Notify downstream task owners?
	// true: notify
	// false: do not notify
	// Default false if not passed
	OperateInform *bool `json:"OperateInform,omitnil,omitempty" name:"OperateInform"`

	// Task IDChoose either VirtualTaskId or
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Virtual task id
	// Either TaskId or this field is optional
	VirtualTaskId *string `json:"VirtualTaskId,omitnil,omitempty" name:"VirtualTaskId"`

	// Virtual task flag
	// true: It is a virtual task
	// false: It is not a virtual task
	// Default false if not passed
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`

	// Task deletion method
	// true: Do not force fail downstream task instances
	// false: Force fail downstream task instances
	// If not specified, the default is false
	DeleteMode *bool `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`
}

type DeleteTaskDsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Delete script?
	// true: delete
	// false: do not delete
	// Default false if not passed
	DeleteScript *bool `json:"DeleteScript,omitnil,omitempty" name:"DeleteScript"`

	// Task operation: Notify downstream task owners?
	// true: notify
	// false: do not notify
	// Default false if not passed
	OperateInform *bool `json:"OperateInform,omitnil,omitempty" name:"OperateInform"`

	// Task IDChoose either VirtualTaskId or
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Virtual task id
	// Either TaskId or this field is optional
	VirtualTaskId *string `json:"VirtualTaskId,omitnil,omitempty" name:"VirtualTaskId"`

	// Virtual task flag
	// true: It is a virtual task
	// false: It is not a virtual task
	// Default false if not passed
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`

	// Task deletion method
	// true: Do not force fail downstream task instances
	// false: Force fail downstream task instances
	// If not specified, the default is false
	DeleteMode *bool `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`
}

func (r *DeleteTaskDsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteTaskDsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "DeleteScript")
	delete(f, "OperateInform")
	delete(f, "TaskId")
	delete(f, "VirtualTaskId")
	delete(f, "VirtualFlag")
	delete(f, "DeleteMode")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteTaskDsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteTaskDsResponseParams struct {
	// Delete successful?
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteTaskDsResponse struct {
	*tchttp.BaseResponse
	Response *DeleteTaskDsResponseParams `json:"Response"`
}

func (r *DeleteTaskDsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteTaskDsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWorkflowByIdRequestParams struct {
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Handling method for downstream tasks after deletion, true: all downstream tasks run normally false: all downstream tasks fail
	DeleteMode *bool `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`

	// Notify downstream task owners after task deletion, true: notify false: do not notify
	EnableNotify *bool `json:"EnableNotify,omitnil,omitempty" name:"EnableNotify"`
}

type DeleteWorkflowByIdRequest struct {
	*tchttp.BaseRequest
	
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Handling method for downstream tasks after deletion, true: all downstream tasks run normally false: all downstream tasks fail
	DeleteMode *bool `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`

	// Notify downstream task owners after task deletion, true: notify false: do not notify
	EnableNotify *bool `json:"EnableNotify,omitnil,omitempty" name:"EnableNotify"`
}

func (r *DeleteWorkflowByIdRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWorkflowByIdRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WorkflowId")
	delete(f, "ProjectId")
	delete(f, "DeleteMode")
	delete(f, "EnableNotify")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DeleteWorkflowByIdRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DeleteWorkflowByIdResponseParams struct {
	// Delete Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *OperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DeleteWorkflowByIdResponse struct {
	*tchttp.BaseResponse
	Response *DeleteWorkflowByIdResponseParams `json:"Response"`
}

func (r *DeleteWorkflowByIdResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DeleteWorkflowByIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DependencyConfig struct {
	// Only five types of periodic execution dependency configurations: HOUR, DAY, WEEK, MONTH, YEAR, CRONTAB, MINUTE
	DependConfType *string `json:"DependConfType,omitnil,omitempty" name:"DependConfType"`

	// Dependency Configuration Subordinate Period Type, CURRENT_HOUR, PREVIOUS_HOUR, CURRENT_DAY, PREVIOUS_DAY, PREVIOUS_WEEK, PREVIOUS_FRIDAY, PREVIOUS_WEEKEND, CURRENT_MONTH, PREVIOUS_MONTH, PREVIOUS_END_OF_MONTH
	//      * PREVIOUS_BEGIN_OF_MONTH,ALL_MONTH_OF_YEAR,ALL_DAY_OF_YEAR,CURRENT_YEAR,CURRENT,CURRENT_MINUTE,PREVIOUS_MINUTE_CYCLE,PREVIOUS_HOUR_CYCLE
	SubordinateCyclicType *string `json:"SubordinateCyclicType,omitnil,omitempty" name:"SubordinateCyclicType"`

	// WAITING, waiting (default policy) EXECUTING: executing
	DependencyStrategy *string `json:"DependencyStrategy,omitnil,omitempty" name:"DependencyStrategy"`

	// Parent Task Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentTask *TaskInnerInfo `json:"ParentTask,omitnil,omitempty" name:"ParentTask"`

	// Subtask Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	SonTask *TaskInnerInfo `json:"SonTask,omitnil,omitempty" name:"SonTask"`
}

// Predefined struct for user
type DescribeAlarmEventsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Current Page
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria (key can be: AlarmLevel, AlarmIndicator, KeyWord)
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields (AlarmTime)
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Type (201 for real-time, 202 for offline)
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`
}

type DescribeAlarmEventsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Current Page
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria (key can be: AlarmLevel, AlarmIndicator, KeyWord)
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields (AlarmTime)
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Type (201 for real-time, 202 for offline)
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`
}

func (r *DescribeAlarmEventsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmEventsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "TaskType")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "MonitorType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAlarmEventsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmEventsResponseParams struct {
	// Alert event listNote: This field may return null, indicating that no valid value can be obtained.
	AlarmEventInfoList []*AlarmEventInfo `json:"AlarmEventInfoList,omitnil,omitempty" name:"AlarmEventInfoList"`

	// Number of records
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAlarmEventsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAlarmEventsResponseParams `json:"Response"`
}

func (r *DescribeAlarmEventsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmReceiverRequestParams struct {
	// Alert ID
	AlarmId *string `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// Current Page
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Type
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Alarm Recipient ID (comma-separated)
	AlarmRecipient *string `json:"AlarmRecipient,omitnil,omitempty" name:"AlarmRecipient"`

	// Name of alarm recipient (comma-separated)
	AlarmRecipientName *string `json:"AlarmRecipientName,omitnil,omitempty" name:"AlarmRecipientName"`

	// Alarm Time
	AlarmTime *string `json:"AlarmTime,omitnil,omitempty" name:"AlarmTime"`

	// Message ID
	MessageId *string `json:"MessageId,omitnil,omitempty" name:"MessageId"`

	// Alert Record ID
	RecordId *uint64 `json:"RecordId,omitnil,omitempty" name:"RecordId"`

	// Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`
}

type DescribeAlarmReceiverRequest struct {
	*tchttp.BaseRequest
	
	// Alert ID
	AlarmId *string `json:"AlarmId,omitnil,omitempty" name:"AlarmId"`

	// Current Page
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Type
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Alarm Recipient ID (comma-separated)
	AlarmRecipient *string `json:"AlarmRecipient,omitnil,omitempty" name:"AlarmRecipient"`

	// Name of alarm recipient (comma-separated)
	AlarmRecipientName *string `json:"AlarmRecipientName,omitnil,omitempty" name:"AlarmRecipientName"`

	// Alarm Time
	AlarmTime *string `json:"AlarmTime,omitnil,omitempty" name:"AlarmTime"`

	// Message ID
	MessageId *string `json:"MessageId,omitnil,omitempty" name:"MessageId"`

	// Alert Record ID
	RecordId *uint64 `json:"RecordId,omitnil,omitempty" name:"RecordId"`

	// Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`
}

func (r *DescribeAlarmReceiverRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmReceiverRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "AlarmId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	delete(f, "AlarmRecipient")
	delete(f, "AlarmRecipientName")
	delete(f, "AlarmTime")
	delete(f, "MessageId")
	delete(f, "RecordId")
	delete(f, "MonitorType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAlarmReceiverRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAlarmReceiverResponseParams struct {
	// Alert Recipient List
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmReceiverInfoList []*AlarmReceiverInfo `json:"AlarmReceiverInfoList,omitnil,omitempty" name:"AlarmReceiverInfoList"`

	// Number of records
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAlarmReceiverResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAlarmReceiverResponseParams `json:"Response"`
}

func (r *DescribeAlarmReceiverResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAlarmReceiverResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAllByFolderNewRequestParams struct {
	// Folder Attributes
	Folder *FolderOpsDto `json:"Folder,omitnil,omitempty" name:"Folder"`

	// Workflow List
	Workflows []*WorkflowCanvasOpsDto `json:"Workflows,omitnil,omitempty" name:"Workflows"`

	// Target File ID
	TargetFolderId *string `json:"TargetFolderId,omitnil,omitempty" name:"TargetFolderId"`

	// Keyword
	KeyWords *string `json:"KeyWords,omitnil,omitempty" name:"KeyWords"`

	// Parent File ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`

	// Pull Folder List
	IsAddWorkflow *string `json:"IsAddWorkflow,omitnil,omitempty" name:"IsAddWorkflow"`

	// Task Status
	TaskStates []*string `json:"TaskStates,omitnil,omitempty" name:"TaskStates"`

	// Search type
	FindType *string `json:"FindType,omitnil,omitempty" name:"FindType"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type DescribeAllByFolderNewRequest struct {
	*tchttp.BaseRequest
	
	// Folder Attributes
	Folder *FolderOpsDto `json:"Folder,omitnil,omitempty" name:"Folder"`

	// Workflow List
	Workflows []*WorkflowCanvasOpsDto `json:"Workflows,omitnil,omitempty" name:"Workflows"`

	// Target File ID
	TargetFolderId *string `json:"TargetFolderId,omitnil,omitempty" name:"TargetFolderId"`

	// Keyword
	KeyWords *string `json:"KeyWords,omitnil,omitempty" name:"KeyWords"`

	// Parent File ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`

	// Pull Folder List
	IsAddWorkflow *string `json:"IsAddWorkflow,omitnil,omitempty" name:"IsAddWorkflow"`

	// Task Status
	TaskStates []*string `json:"TaskStates,omitnil,omitempty" name:"TaskStates"`

	// Search type
	FindType *string `json:"FindType,omitnil,omitempty" name:"FindType"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *DescribeAllByFolderNewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAllByFolderNewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Folder")
	delete(f, "Workflows")
	delete(f, "TargetFolderId")
	delete(f, "KeyWords")
	delete(f, "ParentsFolderId")
	delete(f, "IsAddWorkflow")
	delete(f, "TaskStates")
	delete(f, "FindType")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeAllByFolderNewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeAllByFolderNewResponseParams struct {
	// Result Set
	Data *CollectionFolderOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeAllByFolderNewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeAllByFolderNewResponseParams `json:"Response"`
}

func (r *DescribeAllByFolderNewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeAllByFolderNewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApply struct {
	// Application List Details
	Rows []*Apply `json:"Rows,omitnil,omitempty" name:"Rows"`

	// Total Pagination Pages
	TotalPageNumber *uint64 `json:"TotalPageNumber,omitnil,omitempty" name:"TotalPageNumber"`

	// Total Count
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Page number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

// Predefined struct for user
type DescribeApproveListRequestParams struct {
	// Approval Category Key
	ApproveClassification *string `json:"ApproveClassification,omitnil,omitempty" name:"ApproveClassification"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Pagination Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Custom Definition condition query
	Filters []*FilterOptional `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderFieldOptional `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

type DescribeApproveListRequest struct {
	*tchttp.BaseRequest
	
	// Approval Category Key
	ApproveClassification *string `json:"ApproveClassification,omitnil,omitempty" name:"ApproveClassification"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Pagination Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Custom Definition condition query
	Filters []*FilterOptional `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderFieldOptional `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

func (r *DescribeApproveListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeApproveListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ApproveClassification")
	delete(f, "PageSize")
	delete(f, "PageNumber")
	delete(f, "Filters")
	delete(f, "OrderFields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeApproveListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeApproveListResponseParams struct {
	// Pending Approval List Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *DescribeApply `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeApproveListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeApproveListResponseParams `json:"Response"`
}

func (r *DescribeApproveListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeApproveListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeApproveTypeListRequestParams struct {
	// Type key
	Classification *string `json:"Classification,omitnil,omitempty" name:"Classification"`
}

type DescribeApproveTypeListRequest struct {
	*tchttp.BaseRequest
	
	// Type key
	Classification *string `json:"Classification,omitnil,omitempty" name:"Classification"`
}

func (r *DescribeApproveTypeListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeApproveTypeListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Classification")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeApproveTypeListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeApproveTypeListResponseParams struct {
	// Get Approval Category List
	Data []*ApproveType `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeApproveTypeListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeApproveTypeListResponseParams `json:"Response"`
}

func (r *DescribeApproveTypeListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeApproveTypeListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBatchOperateTaskDTO struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Workflow Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow name
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// StatusNote: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskTypeId *uint64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Task TypeNote: This field may return null, indicating that no valid value can be obtained.
	TaskTypeDesc *string `json:"TaskTypeDesc,omitnil,omitempty" name:"TaskTypeDesc"`

	// Folder name
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Folder IDNote: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Owner
	// Note: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Submitted?
	// Note: This field may return null, indicating that no valid value can be obtained.
	Submit *uint64 `json:"Submit,omitnil,omitempty" name:"Submit"`

	// Engine:
	// presto\SparkJob\SparkSql
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataEngine *string `json:"DataEngine,omitnil,omitempty" name:"DataEngine"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Creation time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Cycle type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Scheduling plan
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScheduleDesc *string `json:"ScheduleDesc,omitnil,omitempty" name:"ScheduleDesc"`

	// Data source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data source typeNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceType *string `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`
}

type DescribeBatchOperateTaskPage struct {
	// Total Number of Pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *uint64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// ContentNote: This field may return null, indicating that no valid value can be obtained.
	Items []*DescribeBatchOperateTaskDTO `json:"Items,omitnil,omitempty" name:"Items"`

	// Total count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`
}

// Predefined struct for user
type DescribeBatchOperateTaskRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page Number
	Page *string `json:"Page,omitnil,omitempty" name:"Page"`

	// Page Number
	Size *string `json:"Size,omitnil,omitempty" name:"Size"`

	// Status ListDraft: 'NS','N','P','R'
	// Running: 'Y'
	// Stopped: 'F'
	// Frozen: 'O'
	// Stopping: 'T'
	StatusList []*string `json:"StatusList,omitnil,omitempty" name:"StatusList"`

	// List of Responsible Persons
	OwnerNameList []*string `json:"OwnerNameList,omitnil,omitempty" name:"OwnerNameList"`

	// Workflow List
	WorkflowIdList []*string `json:"WorkflowIdList,omitnil,omitempty" name:"WorkflowIdList"`

	// Task Name Search
	TaskNameFilter *string `json:"TaskNameFilter,omitnil,omitempty" name:"TaskNameFilter"`

	// Task Type List
	TaskTypeList []*string `json:"TaskTypeList,omitnil,omitempty" name:"TaskTypeList"`

	// Folder List
	FordIdList []*string `json:"FordIdList,omitnil,omitempty" name:"FordIdList"`

	// Task ID Search
	TaskIdFilter *string `json:"TaskIdFilter,omitnil,omitempty" name:"TaskIdFilter"`

	// Responsible Person Search
	OwnerNameFilter *string `json:"OwnerNameFilter,omitnil,omitempty" name:"OwnerNameFilter"`

	// Sort Fields:
	// UpdateTime
	// CreateTime
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// asc: Ascending
	// desc: Descending
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`

	// Engine Type List: Three Types
	// SparkJob
	// SparkSql
	// presto
	DataEngineList []*string `json:"DataEngineList,omitnil,omitempty" name:"DataEngineList"`

	// Operator Name
	UserId *string `json:"UserId,omitnil,omitempty" name:"UserId"`

	// 1
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// 1
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Data Source ID List
	DatasourceIdList []*string `json:"DatasourceIdList,omitnil,omitempty" name:"DatasourceIdList"`

	// Data Source Type List
	DatasourceTypeList []*string `json:"DatasourceTypeList,omitnil,omitempty" name:"DatasourceTypeList"`

	// Scheduling Unit Type List
	CycleUnitList []*string `json:"CycleUnitList,omitnil,omitempty" name:"CycleUnitList"`

	// Filter out tasks that can be submitted?
	CanSubmit *bool `json:"CanSubmit,omitnil,omitempty" name:"CanSubmit"`
}

type DescribeBatchOperateTaskRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page Number
	Page *string `json:"Page,omitnil,omitempty" name:"Page"`

	// Page Number
	Size *string `json:"Size,omitnil,omitempty" name:"Size"`

	// Status ListDraft: 'NS','N','P','R'
	// Running: 'Y'
	// Stopped: 'F'
	// Frozen: 'O'
	// Stopping: 'T'
	StatusList []*string `json:"StatusList,omitnil,omitempty" name:"StatusList"`

	// List of Responsible Persons
	OwnerNameList []*string `json:"OwnerNameList,omitnil,omitempty" name:"OwnerNameList"`

	// Workflow List
	WorkflowIdList []*string `json:"WorkflowIdList,omitnil,omitempty" name:"WorkflowIdList"`

	// Task Name Search
	TaskNameFilter *string `json:"TaskNameFilter,omitnil,omitempty" name:"TaskNameFilter"`

	// Task Type List
	TaskTypeList []*string `json:"TaskTypeList,omitnil,omitempty" name:"TaskTypeList"`

	// Folder List
	FordIdList []*string `json:"FordIdList,omitnil,omitempty" name:"FordIdList"`

	// Task ID Search
	TaskIdFilter *string `json:"TaskIdFilter,omitnil,omitempty" name:"TaskIdFilter"`

	// Responsible Person Search
	OwnerNameFilter *string `json:"OwnerNameFilter,omitnil,omitempty" name:"OwnerNameFilter"`

	// Sort Fields:
	// UpdateTime
	// CreateTime
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// asc: Ascending
	// desc: Descending
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`

	// Engine Type List: Three Types
	// SparkJob
	// SparkSql
	// presto
	DataEngineList []*string `json:"DataEngineList,omitnil,omitempty" name:"DataEngineList"`

	// Operator Name
	UserId *string `json:"UserId,omitnil,omitempty" name:"UserId"`

	// 1
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// 1
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Data Source ID List
	DatasourceIdList []*string `json:"DatasourceIdList,omitnil,omitempty" name:"DatasourceIdList"`

	// Data Source Type List
	DatasourceTypeList []*string `json:"DatasourceTypeList,omitnil,omitempty" name:"DatasourceTypeList"`

	// Scheduling Unit Type List
	CycleUnitList []*string `json:"CycleUnitList,omitnil,omitempty" name:"CycleUnitList"`

	// Filter out tasks that can be submitted?
	CanSubmit *bool `json:"CanSubmit,omitnil,omitempty" name:"CanSubmit"`
}

func (r *DescribeBatchOperateTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBatchOperateTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Page")
	delete(f, "Size")
	delete(f, "StatusList")
	delete(f, "OwnerNameList")
	delete(f, "WorkflowIdList")
	delete(f, "TaskNameFilter")
	delete(f, "TaskTypeList")
	delete(f, "FordIdList")
	delete(f, "TaskIdFilter")
	delete(f, "OwnerNameFilter")
	delete(f, "SortItem")
	delete(f, "SortType")
	delete(f, "DataEngineList")
	delete(f, "UserId")
	delete(f, "OwnerId")
	delete(f, "TenantId")
	delete(f, "DatasourceIdList")
	delete(f, "DatasourceTypeList")
	delete(f, "CycleUnitList")
	delete(f, "CanSubmit")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeBatchOperateTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeBatchOperateTaskResponseParams struct {
	// NoNote: This field may return null, indicating that no valid value can be obtained.
	Data *DescribeBatchOperateTaskPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeBatchOperateTaskResponse struct {
	*tchttp.BaseResponse
	Response *DescribeBatchOperateTaskResponseParams `json:"Response"`
}

func (r *DescribeBatchOperateTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeBatchOperateTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeColumnLineageRequestParams struct {
	// Enumeration value of query direction.
	// 
	// - INPUT
	// - OUTPUT
	// - BOTH
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`

	// Field Information
	Data *ColumnLineageInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Single Query Indegree
	InputDepth *int64 `json:"InputDepth,omitnil,omitempty" name:"InputDepth"`

	// Single Query Outdegree
	OutputDepth *int64 `json:"OutputDepth,omitnil,omitempty" name:"OutputDepth"`

	// Additional Parameters (Pass Caller Information)
	ExtParams []*RecordField `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Filter Temporary Tables with the default value true
	IgnoreTemp *bool `json:"IgnoreTemp,omitnil,omitempty" name:"IgnoreTemp"`
}

type DescribeColumnLineageRequest struct {
	*tchttp.BaseRequest
	
	// Enumeration value of query direction.
	// 
	// - INPUT
	// - OUTPUT
	// - BOTH
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`

	// Field Information
	Data *ColumnLineageInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Single Query Indegree
	InputDepth *int64 `json:"InputDepth,omitnil,omitempty" name:"InputDepth"`

	// Single Query Outdegree
	OutputDepth *int64 `json:"OutputDepth,omitnil,omitempty" name:"OutputDepth"`

	// Additional Parameters (Pass Caller Information)
	ExtParams []*RecordField `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Filter Temporary Tables with the default value true
	IgnoreTemp *bool `json:"IgnoreTemp,omitnil,omitempty" name:"IgnoreTemp"`
}

func (r *DescribeColumnLineageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeColumnLineageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Direction")
	delete(f, "Data")
	delete(f, "InputDepth")
	delete(f, "OutputDepth")
	delete(f, "ExtParams")
	delete(f, "IgnoreTemp")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeColumnLineageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeColumnLineageResponseParams struct {
	// Field lineage information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnAggregationLineage *ColumnAggregationLineage `json:"ColumnAggregationLineage,omitnil,omitempty" name:"ColumnAggregationLineage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeColumnLineageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeColumnLineageResponseParams `json:"Response"`
}

func (r *DescribeColumnLineageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeColumnLineageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeColumnsMetaRequestParams struct {
	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Page Number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter
	FilterSet []*Filter `json:"FilterSet,omitnil,omitempty" name:"FilterSet"`

	// Sort Fields
	OrderFieldSet []*OrderField `json:"OrderFieldSet,omitnil,omitempty" name:"OrderFieldSet"`

	// Whether to Query Partition Field, Default false
	IsPartitionQuery *bool `json:"IsPartitionQuery,omitnil,omitempty" name:"IsPartitionQuery"`

	// Compliance Group ID
	ComplianceId *int64 `json:"ComplianceId,omitnil,omitempty" name:"ComplianceId"`
}

type DescribeColumnsMetaRequest struct {
	*tchttp.BaseRequest
	
	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Page Number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter
	FilterSet []*Filter `json:"FilterSet,omitnil,omitempty" name:"FilterSet"`

	// Sort Fields
	OrderFieldSet []*OrderField `json:"OrderFieldSet,omitnil,omitempty" name:"OrderFieldSet"`

	// Whether to Query Partition Field, Default false
	IsPartitionQuery *bool `json:"IsPartitionQuery,omitnil,omitempty" name:"IsPartitionQuery"`

	// Compliance Group ID
	ComplianceId *int64 `json:"ComplianceId,omitnil,omitempty" name:"ComplianceId"`
}

func (r *DescribeColumnsMetaRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeColumnsMetaRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TableId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "FilterSet")
	delete(f, "OrderFieldSet")
	delete(f, "IsPartitionQuery")
	delete(f, "ComplianceId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeColumnsMetaRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeColumnsMetaResponseParams struct {
	// Pagination return
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnMetaSet []*ColumnMeta `json:"ColumnMetaSet,omitnil,omitempty" name:"ColumnMetaSet"`

	// Number of records
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeColumnsMetaResponse struct {
	*tchttp.BaseResponse
	Response *DescribeColumnsMetaResponseParams `json:"Response"`
}

func (r *DescribeColumnsMetaResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeColumnsMetaResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDataCheckStatRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeDataCheckStatRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeDataCheckStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDataCheckStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDataCheckStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDataCheckStatResponseParams struct {
	// Result
	Data *DataCheckStat `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDataCheckStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDataCheckStatResponseParams `json:"Response"`
}

func (r *DescribeDataCheckStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDataCheckStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDataSourceInfoListRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page number
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter condition (not supported yet)
	Filters *Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Configuration
	OrderFields *OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Data Source Type, mandatory (e.g., MYSQL, DLC, etc.)
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Data Source Name Filter
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`
}

type DescribeDataSourceInfoListRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page number
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter condition (not supported yet)
	Filters *Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Configuration
	OrderFields *OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Data Source Type, mandatory (e.g., MYSQL, DLC, etc.)
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Data Source Name Filter
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`
}

func (r *DescribeDataSourceInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDataSourceInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "Type")
	delete(f, "DatasourceName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDataSourceInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDataSourceInfoListResponseParams struct {
	// Total number of items.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Data Source Information List.
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceSet []*DatasourceBaseInfo `json:"DatasourceSet,omitnil,omitempty" name:"DatasourceSet"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDataSourceInfoListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDataSourceInfoListResponseParams `json:"Response"`
}

func (r *DescribeDataSourceInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDataSourceInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDataSourceListRequestParams struct {
	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of returns
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Sorting Configuration
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Optional Filter Criteria, Filter optional configurations (reference): "Name": { "type": "string", "description": "Data Source Name" }, "Type": { "type": "string", "description": "Type" }, "ClusterId": { "type": "string", "description": "Cluster ID" }, "CategoryId": { "type": "string", "description": "Classification, Project or Space ID" }
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeDataSourceListRequest struct {
	*tchttp.BaseRequest
	
	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of returns
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Sorting Configuration
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Optional Filter Criteria, Filter optional configurations (reference): "Name": { "type": "string", "description": "Data Source Name" }, "Type": { "type": "string", "description": "Type" }, "ClusterId": { "type": "string", "description": "Cluster ID" }, "CategoryId": { "type": "string", "description": "Classification, Project or Space ID" }
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeDataSourceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDataSourceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "OrderFields")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDataSourceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDataSourceListResponseParams struct {
	// data source list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *DataSourceInfoPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDataSourceListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDataSourceListResponseParams `json:"Response"`
}

func (r *DescribeDataSourceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDataSourceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDatabaseInfoListRequestParams struct {
	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Connection Type
	ConnectionType *string `json:"ConnectionType,omitnil,omitempty" name:"ConnectionType"`
}

type DescribeDatabaseInfoListRequest struct {
	*tchttp.BaseRequest
	
	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Connection Type
	ConnectionType *string `json:"ConnectionType,omitnil,omitempty" name:"ConnectionType"`
}

func (r *DescribeDatabaseInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDatabaseInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ConnectionType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDatabaseInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDatabaseInfoListResponseParams struct {
	// Database List
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseInfo []*DatabaseInfo `json:"DatabaseInfo,omitnil,omitempty" name:"DatabaseInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDatabaseInfoListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDatabaseInfoListResponseParams `json:"Response"`
}

func (r *DescribeDatabaseInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDatabaseInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDatabaseMetasRequestParams struct {
	// Filter Fields, projectIds/msTypes/createTime/modifiedTime
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields, such as name
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

type DescribeDatabaseMetasRequest struct {
	*tchttp.BaseRequest
	
	// Filter Fields, projectIds/msTypes/createTime/modifiedTime
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields, such as name
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

func (r *DescribeDatabaseMetasRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDatabaseMetasRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "OrderFields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDatabaseMetasRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDatabaseMetasResponseParams struct {
	// NoNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseMeta []*DatabaseMeta `json:"DatabaseMeta,omitnil,omitempty" name:"DatabaseMeta"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDatabaseMetasResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDatabaseMetasResponseParams `json:"Response"`
}

func (r *DescribeDatabaseMetasResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDatabaseMetasResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDatasourceRequestParams struct {
	// Unique Object ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// production: production, development: development
	Env *string `json:"Env,omitnil,omitempty" name:"Env"`
}

type DescribeDatasourceRequest struct {
	*tchttp.BaseRequest
	
	// Unique Object ID
	Id *uint64 `json:"Id,omitnil,omitempty" name:"Id"`

	// production: production, development: development
	Env *string `json:"Env,omitnil,omitempty" name:"Env"`
}

func (r *DescribeDatasourceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDatasourceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "Env")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDatasourceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDatasourceResponseParams struct {
	// Data Source Object
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *DataSourceInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDatasourceResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDatasourceResponseParams `json:"Response"`
}

func (r *DescribeDatasourceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDatasourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDependOpsTasksRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Upstream/Downstream Levels 1-6
	Deep *uint64 `json:"Deep,omitnil,omitempty" name:"Deep"`

	// 1: Indicates querying upstream nodes; 0: Indicates querying downstream nodes; 2: Indicates querying both upstream and downstream nodes
	Up *uint64 `json:"Up,omitnil,omitempty" name:"Up"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

type DescribeDependOpsTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Upstream/Downstream Levels 1-6
	Deep *uint64 `json:"Deep,omitnil,omitempty" name:"Deep"`

	// 1: Indicates querying upstream nodes; 0: Indicates querying downstream nodes; 2: Indicates querying both upstream and downstream nodes
	Up *uint64 `json:"Up,omitnil,omitempty" name:"Up"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

func (r *DescribeDependOpsTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDependOpsTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "Deep")
	delete(f, "Up")
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDependOpsTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDependOpsTasksResponseParams struct {
	// Canvas Task and Link Information
	Data *OpsTaskCanvasInfoList `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDependOpsTasksResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDependOpsTasksResponseParams `json:"Response"`
}

func (r *DescribeDependOpsTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDependOpsTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDependTaskListsRequestParams struct {
	// Task ID List
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeDependTaskListsRequest struct {
	*tchttp.BaseRequest
	
	// Task ID List
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeDependTaskListsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDependTaskListsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDependTaskListsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDependTaskListsResponseParams struct {
	// Delete Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*TaskOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDependTaskListsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDependTaskListsResponseParams `json:"Response"`
}

func (r *DescribeDependTaskListsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDependTaskListsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDimensionScoreRequestParams struct {
	// Statistics Date Timestamp
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeDimensionScoreRequest struct {
	*tchttp.BaseRequest
	
	// Statistics Date Timestamp
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeDimensionScoreRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDimensionScoreRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StatisticsDate")
	delete(f, "ProjectId")
	delete(f, "DatasourceId")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDimensionScoreRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDimensionScoreResponseParams struct {
	// Dimensional scoring
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *DimensionScore `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDimensionScoreResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDimensionScoreResponseParams `json:"Response"`
}

func (r *DescribeDimensionScoreResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDimensionScoreResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDrInstancePageRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Source ADHOC || WORKFLOW
	TaskSource *string `json:"TaskSource,omitnil,omitempty" name:"TaskSource"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Submission Start Time yyyy-MM-dd HH:mm:ss
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Submission End Time yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Folder ID
	FolderIds []*string `json:"FolderIds,omitnil,omitempty" name:"FolderIds"`

	// Workflow ID
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// View Only Mine
	JustMe *bool `json:"JustMe,omitnil,omitempty" name:"JustMe"`

	// Task Type
	TaskTypes []*string `json:"TaskTypes,omitnil,omitempty" name:"TaskTypes"`

	// Trial Run Submitter userId List
	SubmitUsers []*string `json:"SubmitUsers,omitnil,omitempty" name:"SubmitUsers"`

	// Trial Run Status
	StatusList []*string `json:"StatusList,omitnil,omitempty" name:"StatusList"`
}

type DescribeDrInstancePageRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Source ADHOC || WORKFLOW
	TaskSource *string `json:"TaskSource,omitnil,omitempty" name:"TaskSource"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Submission Start Time yyyy-MM-dd HH:mm:ss
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Submission End Time yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Folder ID
	FolderIds []*string `json:"FolderIds,omitnil,omitempty" name:"FolderIds"`

	// Workflow ID
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// View Only Mine
	JustMe *bool `json:"JustMe,omitnil,omitempty" name:"JustMe"`

	// Task Type
	TaskTypes []*string `json:"TaskTypes,omitnil,omitempty" name:"TaskTypes"`

	// Trial Run Submitter userId List
	SubmitUsers []*string `json:"SubmitUsers,omitnil,omitempty" name:"SubmitUsers"`

	// Trial Run Status
	StatusList []*string `json:"StatusList,omitnil,omitempty" name:"StatusList"`
}

func (r *DescribeDrInstancePageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDrInstancePageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskSource")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "TaskName")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "FolderIds")
	delete(f, "WorkflowIds")
	delete(f, "JustMe")
	delete(f, "TaskTypes")
	delete(f, "SubmitUsers")
	delete(f, "StatusList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDrInstancePageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDrInstancePageResponseParams struct {
	// Result Set
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *DrInstanceOpsDtoPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDrInstancePageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDrInstancePageResponseParams `json:"Response"`
}

func (r *DescribeDrInstancePageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDrInstancePageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDsFolderTreeRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Pull at First Level true Yes 
	// false No
	FirstLevelPull *bool `json:"FirstLevelPull,omitnil,omitempty" name:"FirstLevelPull"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Keyword Search
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Whether to Include Workflow true Yes 
	// false No
	IncludeWorkflow *bool `json:"IncludeWorkflow,omitnil,omitempty" name:"IncludeWorkflow"`

	// Whether to Include Tasks true Yes 
	// false No
	IncludeTask *bool `json:"IncludeTask,omitnil,omitempty" name:"IncludeTask"`

	// Does it include virtual tasks? This parameter is effective only when IncludeTask is true, default is true
	IncludeVirtualTask *bool `json:"IncludeVirtualTask,omitnil,omitempty" name:"IncludeVirtualTask"`

	// Task directory ID
	TaskFolderId *string `json:"TaskFolderId,omitnil,omitempty" name:"TaskFolderId"`

	// classification. Categorized Display  catalog. Directory Display
	DisplayType *string `json:"DisplayType,omitnil,omitempty" name:"DisplayType"`

	// Does it include task directories? true means yes
	// false No
	IncludeTaskFolder *bool `json:"IncludeTaskFolder,omitnil,omitempty" name:"IncludeTaskFolder"`
}

type DescribeDsFolderTreeRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Pull at First Level true Yes 
	// false No
	FirstLevelPull *bool `json:"FirstLevelPull,omitnil,omitempty" name:"FirstLevelPull"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Keyword Search
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Whether to Include Workflow true Yes 
	// false No
	IncludeWorkflow *bool `json:"IncludeWorkflow,omitnil,omitempty" name:"IncludeWorkflow"`

	// Whether to Include Tasks true Yes 
	// false No
	IncludeTask *bool `json:"IncludeTask,omitnil,omitempty" name:"IncludeTask"`

	// Does it include virtual tasks? This parameter is effective only when IncludeTask is true, default is true
	IncludeVirtualTask *bool `json:"IncludeVirtualTask,omitnil,omitempty" name:"IncludeVirtualTask"`

	// Task directory ID
	TaskFolderId *string `json:"TaskFolderId,omitnil,omitempty" name:"TaskFolderId"`

	// classification. Categorized Display  catalog. Directory Display
	DisplayType *string `json:"DisplayType,omitnil,omitempty" name:"DisplayType"`

	// Does it include task directories? true means yes
	// false No
	IncludeTaskFolder *bool `json:"IncludeTaskFolder,omitnil,omitempty" name:"IncludeTaskFolder"`
}

func (r *DescribeDsFolderTreeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDsFolderTreeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FirstLevelPull")
	delete(f, "FolderId")
	delete(f, "WorkflowId")
	delete(f, "Keyword")
	delete(f, "IncludeWorkflow")
	delete(f, "IncludeTask")
	delete(f, "IncludeVirtualTask")
	delete(f, "TaskFolderId")
	delete(f, "DisplayType")
	delete(f, "IncludeTaskFolder")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDsFolderTreeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDsFolderTreeResponseParams struct {
	// Unified Tree Structure Return Attribute List
	Data []*PathNodeDsVO `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDsFolderTreeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDsFolderTreeResponseParams `json:"Response"`
}

func (r *DescribeDsFolderTreeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDsFolderTreeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDsParentFolderTreeRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Display Format, Example Values
	// -    classification: Categorized Display
	// -    catalog: Directory Display
	DisplayType *string `json:"DisplayType,omitnil,omitempty" name:"DisplayType"`
}

type DescribeDsParentFolderTreeRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Display Format, Example Values
	// -    classification: Categorized Display
	// -    catalog: Directory Display
	DisplayType *string `json:"DisplayType,omitnil,omitempty" name:"DisplayType"`
}

func (r *DescribeDsParentFolderTreeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDsParentFolderTreeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FolderId")
	delete(f, "WorkflowId")
	delete(f, "TaskId")
	delete(f, "DisplayType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeDsParentFolderTreeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeDsParentFolderTreeResponseParams struct {
	// Unified Tree Structure Return Attribute List
	Data []*PathNodeDsVO `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeDsParentFolderTreeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeDsParentFolderTreeResponseParams `json:"Response"`
}

func (r *DescribeDsParentFolderTreeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeDsParentFolderTreeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventCasesRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Instance Catalog, Example Value:
	// - Expired: expired
	// - Not Expired: consuming
	// - All: all
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Event name
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// Event type
	//
	// Deprecated: EventType is deprecated.
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Event Segmentation Type
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`

	// Event Broadcast Type
	//
	// Deprecated: EventBroadcastType is deprecated.
	EventBroadcastType *string `json:"EventBroadcastType,omitnil,omitempty" name:"EventBroadcastType"`

	// Event Instance Status, Example Value:
	// - Consumed: COMSUMED
	// - Expired: EXPIRED
	// - Pending Consumption: ACTIVE
	// - Consuming: CONSUMING
	//
	// Deprecated: Status is deprecated.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Minimum Creation Time of Event Instance
	CreationTimeStart *string `json:"CreationTimeStart,omitnil,omitempty" name:"CreationTimeStart"`

	// Maximum Creation Time of Event Instance
	CreationTimeEnd *string `json:"CreationTimeEnd,omitnil,omitempty" name:"CreationTimeEnd"`

	// Minimum Trigger Time of Event Instance
	EventTriggeredTimeStart *string `json:"EventTriggeredTimeStart,omitnil,omitempty" name:"EventTriggeredTimeStart"`

	// Maximum Trigger Time of Event Instance
	EventTriggeredTimeEnd *string `json:"EventTriggeredTimeEnd,omitnil,omitempty" name:"EventTriggeredTimeEnd"`

	// Minimum Consumption Time of Event Instance
	LogTimeStart *string `json:"LogTimeStart,omitnil,omitempty" name:"LogTimeStart"`

	// Maximum Consumption Time of Event Instance
	LogTimeEnd *string `json:"LogTimeEnd,omitnil,omitempty" name:"LogTimeEnd"`

	// Event Instance Data Timestamp
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Event Instance Validity Period
	TimeToLive *string `json:"TimeToLive,omitnil,omitempty" name:"TimeToLive"`

	// Sort Fields
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Sorting Order
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`
}

type DescribeEventCasesRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Instance Catalog, Example Value:
	// - Expired: expired
	// - Not Expired: consuming
	// - All: all
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Event name
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// Event type
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Event Segmentation Type
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`

	// Event Broadcast Type
	EventBroadcastType *string `json:"EventBroadcastType,omitnil,omitempty" name:"EventBroadcastType"`

	// Event Instance Status, Example Value:
	// - Consumed: COMSUMED
	// - Expired: EXPIRED
	// - Pending Consumption: ACTIVE
	// - Consuming: CONSUMING
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Minimum Creation Time of Event Instance
	CreationTimeStart *string `json:"CreationTimeStart,omitnil,omitempty" name:"CreationTimeStart"`

	// Maximum Creation Time of Event Instance
	CreationTimeEnd *string `json:"CreationTimeEnd,omitnil,omitempty" name:"CreationTimeEnd"`

	// Minimum Trigger Time of Event Instance
	EventTriggeredTimeStart *string `json:"EventTriggeredTimeStart,omitnil,omitempty" name:"EventTriggeredTimeStart"`

	// Maximum Trigger Time of Event Instance
	EventTriggeredTimeEnd *string `json:"EventTriggeredTimeEnd,omitnil,omitempty" name:"EventTriggeredTimeEnd"`

	// Minimum Consumption Time of Event Instance
	LogTimeStart *string `json:"LogTimeStart,omitnil,omitempty" name:"LogTimeStart"`

	// Maximum Consumption Time of Event Instance
	LogTimeEnd *string `json:"LogTimeEnd,omitnil,omitempty" name:"LogTimeEnd"`

	// Event Instance Data Timestamp
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Event Instance Validity Period
	TimeToLive *string `json:"TimeToLive,omitnil,omitempty" name:"TimeToLive"`

	// Sort Fields
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Sorting Order
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`
}

func (r *DescribeEventCasesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventCasesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Category")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "EventName")
	delete(f, "EventType")
	delete(f, "EventSubType")
	delete(f, "EventBroadcastType")
	delete(f, "Status")
	delete(f, "CreationTimeStart")
	delete(f, "CreationTimeEnd")
	delete(f, "EventTriggeredTimeStart")
	delete(f, "EventTriggeredTimeEnd")
	delete(f, "LogTimeStart")
	delete(f, "LogTimeEnd")
	delete(f, "Dimension")
	delete(f, "TimeToLive")
	delete(f, "SortItem")
	delete(f, "SortType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeEventCasesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventCasesResponseParams struct {
	// Event Instance Pagination Query Results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *EventCaseAuditLogVOCollection `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeEventCasesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeEventCasesResponseParams `json:"Response"`
}

func (r *DescribeEventCasesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventCasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventConsumeTasksRequestParams struct {
	// Event Instance ID
	EventCaseId *string `json:"EventCaseId,omitnil,omitempty" name:"EventCaseId"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

type DescribeEventConsumeTasksRequest struct {
	*tchttp.BaseRequest
	
	// Event Instance ID
	EventCaseId *string `json:"EventCaseId,omitnil,omitempty" name:"EventCaseId"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

func (r *DescribeEventConsumeTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventConsumeTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "EventCaseId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeEventConsumeTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventConsumeTasksResponseParams struct {
	// Event Consumption Task Record List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *EventCaseConsumeLogOptDtoCollection `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeEventConsumeTasksResponse struct {
	*tchttp.BaseResponse
	Response *DescribeEventConsumeTasksResponseParams `json:"Response"`
}

func (r *DescribeEventConsumeTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventConsumeTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event name
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`
}

type DescribeEventRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event name
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`
}

func (r *DescribeEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "EventName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeEventResponseParams struct {
	// EventNote: This field may return null, indicating that no valid value can be obtained.
	Data *EventOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeEventResponse struct {
	*tchttp.BaseResponse
	Response *DescribeEventResponseParams `json:"Response"`
}

func (r *DescribeEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExecStrategyRequestParams struct {
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeExecStrategyRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeExecStrategyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExecStrategyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeExecStrategyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeExecStrategyResponseParams struct {
	// Rule Group Execution Strategy
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroupExecStrategy `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeExecStrategyResponse struct {
	*tchttp.BaseResponse
	Response *DescribeExecStrategyResponseParams `json:"Response"`
}

func (r *DescribeExecStrategyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeExecStrategyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFieldBasicInfoRequestParams struct {
	// Page Number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

type DescribeFieldBasicInfoRequest struct {
	*tchttp.BaseRequest
	
	// Page Number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

func (r *DescribeFieldBasicInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFieldBasicInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFieldBasicInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFieldBasicInfoResponseParams struct {
	// Field Metadata
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnBasicInfoList []*ColumnBasicInfo `json:"ColumnBasicInfoList,omitnil,omitempty" name:"ColumnBasicInfoList"`

	// Total number of items
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFieldBasicInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFieldBasicInfoResponseParams `json:"Response"`
}

func (r *DescribeFieldBasicInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFieldBasicInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFolderWorkflowListData struct {
	// Workflow Information List
	Items []*Workflow `json:"Items,omitnil,omitempty" name:"Items"`

	// Total number of items
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Page Number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

// Predefined struct for user
type DescribeFolderWorkflowListRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Parent Folder ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`

	// Keyword
	KeyWords *string `json:"KeyWords,omitnil,omitempty" name:"KeyWords"`

	// Page number, default is 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default is 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

type DescribeFolderWorkflowListRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Parent Folder ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`

	// Keyword
	KeyWords *string `json:"KeyWords,omitnil,omitempty" name:"KeyWords"`

	// Page number, default is 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default is 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

func (r *DescribeFolderWorkflowListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFolderWorkflowListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ParentsFolderId")
	delete(f, "KeyWords")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFolderWorkflowListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFolderWorkflowListResponseParams struct {
	// NoNote: This field may return null, indicating that no valid value can be obtained.
	Data *DescribeFolderWorkflowListData `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFolderWorkflowListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFolderWorkflowListResponseParams `json:"Response"`
}

func (r *DescribeFolderWorkflowListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFolderWorkflowListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFunctionKindsRequestParams struct {

}

type DescribeFunctionKindsRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeFunctionKindsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFunctionKindsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFunctionKindsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFunctionKindsResponseParams struct {
	// NoNote: This field may return null, indicating that no valid value can be obtained.
	Kinds []*FunctionTypeOrKind `json:"Kinds,omitnil,omitempty" name:"Kinds"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFunctionKindsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFunctionKindsResponseParams `json:"Response"`
}

func (r *DescribeFunctionKindsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFunctionKindsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFunctionTypesRequestParams struct {

}

type DescribeFunctionTypesRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeFunctionTypesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFunctionTypesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeFunctionTypesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeFunctionTypesResponseParams struct {
	// TypeNote: This field may return null, indicating that no valid value can be obtained.
	Types []*FunctionTypeOrKind `json:"Types,omitnil,omitempty" name:"Types"`

	// Error messageNote: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeFunctionTypesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeFunctionTypesResponseParams `json:"Response"`
}

func (r *DescribeFunctionTypesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeFunctionTypesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceByCycleRequestParams struct {
	// 1
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 1
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`
}

type DescribeInstanceByCycleRequest struct {
	*tchttp.BaseRequest
	
	// 1
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 1
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`
}

func (r *DescribeInstanceByCycleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceByCycleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TenantId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceByCycleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceByCycleResponseParams struct {
	// Statistical Results
	Data []*TaskByCycle `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceByCycleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceByCycleResponseParams `json:"Response"`
}

func (r *DescribeInstanceByCycleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceByCycleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLastLogRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

type DescribeInstanceLastLogRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

func (r *DescribeInstanceLastLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLastLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceLastLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLastLogResponseParams struct {
	// Log
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceLastLogResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceLastLogResponseParams `json:"Response"`
}

func (r *DescribeInstanceLastLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLastLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceListRequestParams struct {
	// Project/workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Number of items displayed per page
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Cycle List (e.g., daily, one-time), optional
	CycleList []*string `json:"CycleList,omitnil,omitempty" name:"CycleList"`

	// Person in Charge
	OwnerList []*string `json:"OwnerList,omitnil,omitempty" name:"OwnerList"`

	// Keep consistent with previous
	InstanceType *string `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Sorting Order (asc, desc)
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
	SortCol *string `json:"SortCol,omitnil,omitempty" name:"SortCol"`

	// Type List (e.g., Python Task Type: 30
	// PySpark Task Type: 31
	// hivesql task type:34
	// shell task type:35
	// sparksql task type:36 jdbcsql task type:21 dlc task type:32), optional
	TaskTypeList []*int64 `json:"TaskTypeList,omitnil,omitempty" name:"TaskTypeList"`

	// Status list (e.g., success 2, executing 1), optional
	StateList []*int64 `json:"StateList,omitnil,omitempty" name:"StateList"`

	// Task Name
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`
}

type DescribeInstanceListRequest struct {
	*tchttp.BaseRequest
	
	// Project/workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Number of items displayed per page
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Cycle List (e.g., daily, one-time), optional
	CycleList []*string `json:"CycleList,omitnil,omitempty" name:"CycleList"`

	// Person in Charge
	OwnerList []*string `json:"OwnerList,omitnil,omitempty" name:"OwnerList"`

	// Keep consistent with previous
	InstanceType *string `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Sorting Order (asc, desc)
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
	SortCol *string `json:"SortCol,omitnil,omitempty" name:"SortCol"`

	// Type List (e.g., Python Task Type: 30
	// PySpark Task Type: 31
	// hivesql task type:34
	// shell task type:35
	// sparksql task type:36 jdbcsql task type:21 dlc task type:32), optional
	TaskTypeList []*int64 `json:"TaskTypeList,omitnil,omitempty" name:"TaskTypeList"`

	// Status list (e.g., success 2, executing 1), optional
	StateList []*int64 `json:"StateList,omitnil,omitempty" name:"StateList"`

	// Task Name
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`
}

func (r *DescribeInstanceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "CycleList")
	delete(f, "OwnerList")
	delete(f, "InstanceType")
	delete(f, "Sort")
	delete(f, "SortCol")
	delete(f, "TaskTypeList")
	delete(f, "StateList")
	delete(f, "Keyword")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceListResponseParams struct {
	// Result
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// Instance ListNote: This field may return null, indicating that no valid value can be obtained.
	InstanceList []*InstanceList `json:"InstanceList,omitnil,omitempty" name:"InstanceList"`

	// Total number of itemsNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceListResponseParams `json:"Response"`
}

func (r *DescribeInstanceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogDetailRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Server Ip
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// File Name
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// Starting Row
	StartCount *int64 `json:"StartCount,omitnil,omitempty" name:"StartCount"`

	// Number of Rows Per Query
	LineCount *int64 `json:"LineCount,omitnil,omitempty" name:"LineCount"`
}

type DescribeInstanceLogDetailRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Server Ip
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// File Name
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// Starting Row
	StartCount *int64 `json:"StartCount,omitnil,omitempty" name:"StartCount"`

	// Number of Rows Per Query
	LineCount *int64 `json:"LineCount,omitnil,omitempty" name:"LineCount"`
}

func (r *DescribeInstanceLogDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	delete(f, "BrokerIp")
	delete(f, "OriginFileName")
	delete(f, "StartCount")
	delete(f, "LineCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceLogDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogDetailResponseParams struct {
	// Log results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *InstanceLogInfoOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceLogDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceLogDetailResponseParams `json:"Response"`
}

func (r *DescribeInstanceLogDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogFileRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance data time
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Executor IP
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Log file name
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`
}

type DescribeInstanceLogFileRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance data time
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Executor IP
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Log file name
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`
}

func (r *DescribeInstanceLogFileRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogFileRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	delete(f, "BrokerIp")
	delete(f, "OriginFileName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceLogFileRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogFileResponseParams struct {
	// Download File Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *InstanceDownloadLogInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceLogFileResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceLogFileResponseParams `json:"Response"`
}

func (r *DescribeInstanceLogFileResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogFileResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogListRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

type DescribeInstanceLogListRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

func (r *DescribeInstanceLogListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceLogListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogListResponseParams struct {
	// Log list
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// Log listNote: This field may return null, indicating that no valid value can be obtained.
	InstanceLogList []*InstanceLogList `json:"InstanceLogList,omitnil,omitempty" name:"InstanceLogList"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceLogListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceLogListResponseParams `json:"Response"`
}

func (r *DescribeInstanceLogListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Server Ip
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// File Name
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`
}

type DescribeInstanceLogRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Server Ip
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// File Name
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`
}

func (r *DescribeInstanceLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	delete(f, "BrokerIp")
	delete(f, "OriginFileName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeInstanceLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeInstanceLogResponseParams struct {
	// Returned result
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// Return results
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceLogInfo *IntegrationInstanceLog `json:"InstanceLogInfo,omitnil,omitempty" name:"InstanceLogInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeInstanceLogResponse struct {
	*tchttp.BaseResponse
	Response *DescribeInstanceLogResponseParams `json:"Response"`
}

func (r *DescribeInstanceLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeInstanceLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationNodeRequestParams struct {
	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type, 201 for Real-time Task, 202 for Offline Task
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type DescribeIntegrationNodeRequest struct {
	*tchttp.BaseRequest
	
	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type, 201 for Real-time Task, 202 for Offline Task
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *DescribeIntegrationNodeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationNodeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationNodeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationNodeResponseParams struct {
	// Node information\nNote: This field may return null, indicating that no valid value can be obtained.
	NodeInfo *IntegrationNodeInfo `json:"NodeInfo,omitnil,omitempty" name:"NodeInfo"`

	// Has the upstream node been modified? true Modified, needs to be prompted; false Not modified\nNote: This field may return null, indicating that no valid value can be obtained.
	SourceCheckFlag *bool `json:"SourceCheckFlag,omitnil,omitempty" name:"SourceCheckFlag"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationNodeResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationNodeResponseParams `json:"Response"`
}

func (r *DescribeIntegrationNodeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationNodeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsInstanceTrendRequestParams struct {
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`

	// Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`
}

type DescribeIntegrationStatisticsInstanceTrendRequest struct {
	*tchttp.BaseRequest
	
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`

	// Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`
}

func (r *DescribeIntegrationStatisticsInstanceTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsInstanceTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "QueryDate")
	delete(f, "ExecutorGroupId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationStatisticsInstanceTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsInstanceTrendResponseParams struct {
	// Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
	TrendsData []*IntegrationStatisticsTrendResult `json:"TrendsData,omitnil,omitempty" name:"TrendsData"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationStatisticsInstanceTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationStatisticsInstanceTrendResponseParams `json:"Response"`
}

func (r *DescribeIntegrationStatisticsInstanceTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsInstanceTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsRecordsTrendRequestParams struct {
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`
}

type DescribeIntegrationStatisticsRecordsTrendRequest struct {
	*tchttp.BaseRequest
	
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`
}

func (r *DescribeIntegrationStatisticsRecordsTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsRecordsTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "QueryDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationStatisticsRecordsTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsRecordsTrendResponseParams struct {
	// Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
	TrendsData []*IntegrationStatisticsTrendResult `json:"TrendsData,omitnil,omitempty" name:"TrendsData"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationStatisticsRecordsTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationStatisticsRecordsTrendResponseParams `json:"Response"`
}

func (r *DescribeIntegrationStatisticsRecordsTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsRecordsTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsRequestParams struct {
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`
}

type DescribeIntegrationStatisticsRequest struct {
	*tchttp.BaseRequest
	
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`
}

func (r *DescribeIntegrationStatisticsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "QueryDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationStatisticsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsResponseParams struct {
	// Total Tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalTask *int64 `json:"TotalTask,omitnil,omitempty" name:"TotalTask"`

	// Number of Production Tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProdTask *int64 `json:"ProdTask,omitnil,omitempty" name:"ProdTask"`

	// Number of Development Tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	DevTask *int64 `json:"DevTask,omitnil,omitempty" name:"DevTask"`

	// Total Number of Reads
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalReadRecords *int64 `json:"TotalReadRecords,omitnil,omitempty" name:"TotalReadRecords"`

	// Total Number of Writes
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalWriteRecords *int64 `json:"TotalWriteRecords,omitnil,omitempty" name:"TotalWriteRecords"`

	// Total Number of Dirty Data Entries
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalErrorRecords *int64 `json:"TotalErrorRecords,omitnil,omitempty" name:"TotalErrorRecords"`

	// Total Number of Alarm Events
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalAlarmEvent *int64 `json:"TotalAlarmEvent,omitnil,omitempty" name:"TotalAlarmEvent"`

	// Daily Increase in Reads
	// Note: This field may return null, indicating that no valid value can be obtained.
	IncreaseReadRecords *int64 `json:"IncreaseReadRecords,omitnil,omitempty" name:"IncreaseReadRecords"`

	// Daily Increase in Writes
	// Note: This field may return null, indicating that no valid value can be obtained.
	IncreaseWriteRecords *int64 `json:"IncreaseWriteRecords,omitnil,omitempty" name:"IncreaseWriteRecords"`

	// Daily Increase in Dirty Data Entries
	// Note: This field may return null, indicating that no valid value can be obtained.
	IncreaseErrorRecords *int64 `json:"IncreaseErrorRecords,omitnil,omitempty" name:"IncreaseErrorRecords"`

	// Daily Increase in Alarm Events
	// Note: This field may return null, indicating that no valid value can be obtained.
	IncreaseAlarmEvent *int64 `json:"IncreaseAlarmEvent,omitnil,omitempty" name:"IncreaseAlarmEvent"`

	// Alarm Event Statistics
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmEvent *string `json:"AlarmEvent,omitnil,omitempty" name:"AlarmEvent"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationStatisticsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationStatisticsResponseParams `json:"Response"`
}

func (r *DescribeIntegrationStatisticsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsTaskStatusRequestParams struct {
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`

	// Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`
}

type DescribeIntegrationStatisticsTaskStatusRequest struct {
	*tchttp.BaseRequest
	
	// Task Type (Real-time: 201, Offline: 202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`

	// Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`
}

func (r *DescribeIntegrationStatisticsTaskStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsTaskStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "QueryDate")
	delete(f, "ExecutorGroupId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationStatisticsTaskStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsTaskStatusResponseParams struct {
	// Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
	StatusData *string `json:"StatusData,omitnil,omitempty" name:"StatusData"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationStatisticsTaskStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationStatisticsTaskStatusResponseParams `json:"Response"`
}

func (r *DescribeIntegrationStatisticsTaskStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsTaskStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsTaskStatusTrendRequestParams struct {
	// Task Type (Real-time:201, Offline:202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`

	// Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`
}

type DescribeIntegrationStatisticsTaskStatusTrendRequest struct {
	*tchttp.BaseRequest
	
	// Task Type (Real-time:201, Offline:202)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Query Date
	QueryDate *string `json:"QueryDate,omitnil,omitempty" name:"QueryDate"`

	// Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`
}

func (r *DescribeIntegrationStatisticsTaskStatusTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsTaskStatusTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "ProjectId")
	delete(f, "QueryDate")
	delete(f, "ExecutorGroupId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationStatisticsTaskStatusTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationStatisticsTaskStatusTrendResponseParams struct {
	// Statistical Results
	// Note: This field may return null, indicating that no valid value can be obtained.
	TrendsData []*IntegrationStatisticsTrendResult `json:"TrendsData,omitnil,omitempty" name:"TrendsData"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationStatisticsTaskStatusTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationStatisticsTaskStatusTrendResponseParams `json:"Response"`
}

func (r *DescribeIntegrationStatisticsTaskStatusTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationStatisticsTaskStatusTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type, 201: Real-time Integration Task, 202: Offline Integration Task, default value is 201 for real-time task if not specified
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Submit version number
	InstanceVersion *int64 `json:"InstanceVersion,omitnil,omitempty" name:"InstanceVersion"`
}

type DescribeIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type, 201: Real-time Integration Task, 202: Offline Integration Task, default value is 201 for real-time task if not specified
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Submit version number
	InstanceVersion *int64 `json:"InstanceVersion,omitnil,omitempty" name:"InstanceVersion"`
}

func (r *DescribeIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	delete(f, "InstanceVersion")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationTaskResponseParams struct {
	// Task InformationNote: This field may return null, indicating that no valid value can be obtained.
	TaskInfo *IntegrationTaskInfo `json:"TaskInfo,omitnil,omitempty" name:"TaskInfo"`

	// Collector statistics
	// Note: This field may return null, indicating that no valid value can be obtained.
	AgentStatus *AgentStatus `json:"AgentStatus,omitnil,omitempty" name:"AgentStatus"`

	// Task version information
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskVersion *TaskVersionInstance `json:"TaskVersion,omitnil,omitempty" name:"TaskVersion"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationTaskResponseParams `json:"Response"`
}

func (r *DescribeIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationTasksRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page n of Pagination
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Query Filter
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Field Information
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 201. Real-time synchronization, 202. Offline Synchronization Default is real-time
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type DescribeIntegrationTasksRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page n of Pagination
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Query Filter
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Field Information
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// 201. Real-time synchronization, 202. Offline Synchronization Default is real-time
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *DescribeIntegrationTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationTasksResponseParams struct {
	// Task ListNote: This field may return null, indicating that no valid value can be obtained.
	TaskInfoSet []*IntegrationTaskInfo `json:"TaskInfoSet,omitnil,omitempty" name:"TaskInfoSet"`

	// Total Number of Tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationTasksResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationTasksResponseParams `json:"Response"`
}

func (r *DescribeIntegrationTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationVersionNodesInfoRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// The selected version's storage path for the task:
	// The value of Base64.encode($region | $bucket | $ftp.file.name) under TaskInfo.TaskExt.Properties returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
	TaskVersionPath *string `json:"TaskVersionPath,omitnil,omitempty" name:"TaskVersionPath"`

	// The selected version ID for the task:
	// The value of VersionId returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
	TaskVersion *string `json:"TaskVersion,omitnil,omitempty" name:"TaskVersion"`
}

type DescribeIntegrationVersionNodesInfoRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// The selected version's storage path for the task:
	// The value of Base64.encode($region | $bucket | $ftp.file.name) under TaskInfo.TaskExt.Properties returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
	TaskVersionPath *string `json:"TaskVersionPath,omitnil,omitempty" name:"TaskVersionPath"`

	// The selected version ID for the task:
	// The value of VersionId returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
	TaskVersion *string `json:"TaskVersion,omitnil,omitempty" name:"TaskVersion"`
}

func (r *DescribeIntegrationVersionNodesInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationVersionNodesInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "TaskVersionPath")
	delete(f, "TaskVersion")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeIntegrationVersionNodesInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeIntegrationVersionNodesInfoResponseParams struct {
	// Task Node Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Nodes []*IntegrationNodeInfo `json:"Nodes,omitnil,omitempty" name:"Nodes"`

	// Task Mapping Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Mappings []*IntegrationNodeMapping `json:"Mappings,omitnil,omitempty" name:"Mappings"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeIntegrationVersionNodesInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeIntegrationVersionNodesInfoResponseParams `json:"Response"`
}

func (r *DescribeIntegrationVersionNodesInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeIntegrationVersionNodesInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOfflineTaskTokenRequestParams struct {

}

type DescribeOfflineTaskTokenRequest struct {
	*tchttp.BaseRequest
	
}

func (r *DescribeOfflineTaskTokenRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOfflineTaskTokenRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOfflineTaskTokenRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOfflineTaskTokenResponseParams struct {
	// Long Connection Temporary Token
	Token *string `json:"Token,omitnil,omitempty" name:"Token"`

	// Long Connection Temporary Token. Same meaning as Token, prioritize Data, if Data is null, then use Token.
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOfflineTaskTokenResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOfflineTaskTokenResponseParams `json:"Response"`
}

func (r *DescribeOfflineTaskTokenResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOfflineTaskTokenResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOperateOpsTasksRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID, multiple folders separated by commas
	FolderIdList *string `json:"FolderIdList,omitnil,omitempty" name:"FolderIdList"`

	// Workflow ID, multiple Workflow IDs separated by English commas
	WorkFlowIdList *string `json:"WorkFlowIdList,omitnil,omitempty" name:"WorkFlowIdList"`

	// Workflow name, multiple Workflow names separated by English commas
	WorkFlowNameList *string `json:"WorkFlowNameList,omitnil,omitempty" name:"WorkFlowNameList"`

	// Task Name, multiple Task Names separated by English commas
	TaskNameList *string `json:"TaskNameList,omitnil,omitempty" name:"TaskNameList"`

	// Task ID, multiple Task IDs separated by English commas
	TaskIdList *string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Page Number
	PageNumber *string `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *string `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Sort Fields, supported fields are FirstSubmitTime and FirstRunTime, indicating the most recent submission and the first execution event
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Sort Type. Two values DESC,ASC
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`

	// Person in Charge, multiple Persons in Charge separated by English commas
	InChargeList *string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// Task Type ID String, multiple Task Type IDs separated by English commas
	TaskTypeIdList *string `json:"TaskTypeIdList,omitnil,omitempty" name:"TaskTypeIdList"`

	// Task Status String, multiple Task Statuses separated by English commas
	StatusList *string `json:"StatusList,omitnil,omitempty" name:"StatusList"`

	// Task Cycle Type String, multiple Task Cycles separated by English commas
	TaskCycleUnitList *string `json:"TaskCycleUnitList,omitnil,omitempty" name:"TaskCycleUnitList"`

	// Task Belonging Product Type
	ProductNameList *string `json:"ProductNameList,omitnil,omitempty" name:"ProductNameList"`

	// Data Source ID or (only for offline sync tasks) Source Data Source ID
	SourceServiceId *string `json:"SourceServiceId,omitnil,omitempty" name:"SourceServiceId"`

	// Data Source Type or (only for offline sync tasks) Source Data Source Type
	SourceServiceType *string `json:"SourceServiceType,omitnil,omitempty" name:"SourceServiceType"`

	// (Only for offline sync tasks) Target Data Source ID
	TargetServiceId *string `json:"TargetServiceId,omitnil,omitempty" name:"TargetServiceId"`

	// (Only for offline sync tasks) Target Data Source Type
	TargetServiceType *string `json:"TargetServiceType,omitnil,omitempty" name:"TargetServiceType"`

	// Alarm Type, multiple types separated by commas
	AlarmType *string `json:"AlarmType,omitnil,omitempty" name:"AlarmType"`

	// Resource Group ID, multiple Resource Group IDs separated by English commas
	ExecutorGroupIdList *string `json:"ExecutorGroupIdList,omitnil,omitempty" name:"ExecutorGroupIdList"`

	// Task tag
	TaskTags []*TaskTag `json:"TaskTags,omitnil,omitempty" name:"TaskTags"`

	// Query Keyword
	KeyWord *string `json:"KeyWord,omitnil,omitempty" name:"KeyWord"`

	// Instance Generation Method
	InitStrategy *string `json:"InitStrategy,omitnil,omitempty" name:"InitStrategy"`

	// Additional Requested Resource Types
	RequestResourceTypes []*string `json:"RequestResourceTypes,omitnil,omitempty" name:"RequestResourceTypes"`
}

type DescribeOperateOpsTasksRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID, multiple folders separated by commas
	FolderIdList *string `json:"FolderIdList,omitnil,omitempty" name:"FolderIdList"`

	// Workflow ID, multiple Workflow IDs separated by English commas
	WorkFlowIdList *string `json:"WorkFlowIdList,omitnil,omitempty" name:"WorkFlowIdList"`

	// Workflow name, multiple Workflow names separated by English commas
	WorkFlowNameList *string `json:"WorkFlowNameList,omitnil,omitempty" name:"WorkFlowNameList"`

	// Task Name, multiple Task Names separated by English commas
	TaskNameList *string `json:"TaskNameList,omitnil,omitempty" name:"TaskNameList"`

	// Task ID, multiple Task IDs separated by English commas
	TaskIdList *string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Page Number
	PageNumber *string `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *string `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Sort Fields, supported fields are FirstSubmitTime and FirstRunTime, indicating the most recent submission and the first execution event
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Sort Type. Two values DESC,ASC
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`

	// Person in Charge, multiple Persons in Charge separated by English commas
	InChargeList *string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// Task Type ID String, multiple Task Type IDs separated by English commas
	TaskTypeIdList *string `json:"TaskTypeIdList,omitnil,omitempty" name:"TaskTypeIdList"`

	// Task Status String, multiple Task Statuses separated by English commas
	StatusList *string `json:"StatusList,omitnil,omitempty" name:"StatusList"`

	// Task Cycle Type String, multiple Task Cycles separated by English commas
	TaskCycleUnitList *string `json:"TaskCycleUnitList,omitnil,omitempty" name:"TaskCycleUnitList"`

	// Task Belonging Product Type
	ProductNameList *string `json:"ProductNameList,omitnil,omitempty" name:"ProductNameList"`

	// Data Source ID or (only for offline sync tasks) Source Data Source ID
	SourceServiceId *string `json:"SourceServiceId,omitnil,omitempty" name:"SourceServiceId"`

	// Data Source Type or (only for offline sync tasks) Source Data Source Type
	SourceServiceType *string `json:"SourceServiceType,omitnil,omitempty" name:"SourceServiceType"`

	// (Only for offline sync tasks) Target Data Source ID
	TargetServiceId *string `json:"TargetServiceId,omitnil,omitempty" name:"TargetServiceId"`

	// (Only for offline sync tasks) Target Data Source Type
	TargetServiceType *string `json:"TargetServiceType,omitnil,omitempty" name:"TargetServiceType"`

	// Alarm Type, multiple types separated by commas
	AlarmType *string `json:"AlarmType,omitnil,omitempty" name:"AlarmType"`

	// Resource Group ID, multiple Resource Group IDs separated by English commas
	ExecutorGroupIdList *string `json:"ExecutorGroupIdList,omitnil,omitempty" name:"ExecutorGroupIdList"`

	// Task tag
	TaskTags []*TaskTag `json:"TaskTags,omitnil,omitempty" name:"TaskTags"`

	// Query Keyword
	KeyWord *string `json:"KeyWord,omitnil,omitempty" name:"KeyWord"`

	// Instance Generation Method
	InitStrategy *string `json:"InitStrategy,omitnil,omitempty" name:"InitStrategy"`

	// Additional Requested Resource Types
	RequestResourceTypes []*string `json:"RequestResourceTypes,omitnil,omitempty" name:"RequestResourceTypes"`
}

func (r *DescribeOperateOpsTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOperateOpsTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FolderIdList")
	delete(f, "WorkFlowIdList")
	delete(f, "WorkFlowNameList")
	delete(f, "TaskNameList")
	delete(f, "TaskIdList")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "SortItem")
	delete(f, "SortType")
	delete(f, "InChargeList")
	delete(f, "TaskTypeIdList")
	delete(f, "StatusList")
	delete(f, "TaskCycleUnitList")
	delete(f, "ProductNameList")
	delete(f, "SourceServiceId")
	delete(f, "SourceServiceType")
	delete(f, "TargetServiceId")
	delete(f, "TargetServiceType")
	delete(f, "AlarmType")
	delete(f, "ExecutorGroupIdList")
	delete(f, "TaskTags")
	delete(f, "KeyWord")
	delete(f, "InitStrategy")
	delete(f, "RequestResourceTypes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOperateOpsTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOperateOpsTasksResponseParams struct {
	// Task List Information
	Data *OpsTaskInfoPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOperateOpsTasksResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOperateOpsTasksResponseParams `json:"Response"`
}

func (r *DescribeOperateOpsTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOperateOpsTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsInstanceLogListRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

type DescribeOpsInstanceLogListRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

func (r *DescribeOpsInstanceLogListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsInstanceLogListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOpsInstanceLogListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsInstanceLogListResponseParams struct {
	// Instance Log List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*InstanceLogInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOpsInstanceLogListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOpsInstanceLogListResponseParams `json:"Response"`
}

func (r *DescribeOpsInstanceLogListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsInstanceLogListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsMakePlanInstancesRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Supplementary Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Page number, default value 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default value 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

type DescribeOpsMakePlanInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Supplementary Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Page number, default value 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default value 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

func (r *DescribeOpsMakePlanInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsMakePlanInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PlanId")
	delete(f, "TaskId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOpsMakePlanInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsMakePlanInstancesResponseParams struct {
	// Supplemental plan instance paged query results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *MakePlanInstanceOpsDtoCollection `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOpsMakePlanInstancesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOpsMakePlanInstancesResponseParams `json:"Response"`
}

func (r *DescribeOpsMakePlanInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsMakePlanInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsMakePlanTasksRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Page number, default value 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default value 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

type DescribeOpsMakePlanTasksRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Page number, default value 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default value 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

func (r *DescribeOpsMakePlanTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsMakePlanTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PlanId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOpsMakePlanTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsMakePlanTasksResponseParams struct {
	// Supplementary plan task pagination query results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *MakePlanTaskOpsDtoCollection `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOpsMakePlanTasksResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOpsMakePlanTasksResponseParams `json:"Response"`
}

func (r *DescribeOpsMakePlanTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsMakePlanTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsMakePlansRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Pagination number, default value: 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default value 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Supplemental Plan Name
	PlanName *string `json:"PlanName,omitnil,omitempty" name:"PlanName"`

	// Supplementary Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Supplementary Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Supplementary Plan Creator
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Minimum Creation Time of Supplementary Plan
	MinCreateTime *string `json:"MinCreateTime,omitnil,omitempty" name:"MinCreateTime"`

	// Maximum Creation Time of Supplementary Plan
	MaxCreateTime *string `json:"MaxCreateTime,omitnil,omitempty" name:"MaxCreateTime"`
}

type DescribeOpsMakePlansRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Pagination number, default value: 1
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size, default value 10
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Supplemental Plan Name
	PlanName *string `json:"PlanName,omitnil,omitempty" name:"PlanName"`

	// Supplementary Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Supplementary Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Supplementary Plan Creator
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Minimum Creation Time of Supplementary Plan
	MinCreateTime *string `json:"MinCreateTime,omitnil,omitempty" name:"MinCreateTime"`

	// Maximum Creation Time of Supplementary Plan
	MaxCreateTime *string `json:"MaxCreateTime,omitnil,omitempty" name:"MaxCreateTime"`
}

func (r *DescribeOpsMakePlansRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsMakePlansRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "PlanId")
	delete(f, "PlanName")
	delete(f, "TaskName")
	delete(f, "TaskId")
	delete(f, "Creator")
	delete(f, "MinCreateTime")
	delete(f, "MaxCreateTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOpsMakePlansRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsMakePlansResponseParams struct {
	// Supplemental Plan Pagination Query Results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *MakePlanOpsDtoCollection `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOpsMakePlansResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOpsMakePlansResponseParams `json:"Response"`
}

func (r *DescribeOpsMakePlansResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsMakePlansResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsWorkflowsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Product Type Name List, separated by ','
	ProductNameList *string `json:"ProductNameList,omitnil,omitempty" name:"ProductNameList"`

	// File ID list, separated by ','
	FolderIdList *string `json:"FolderIdList,omitnil,omitempty" name:"FolderIdList"`

	// Workflow ID, separated by ','
	WorkFlowIdList *string `json:"WorkFlowIdList,omitnil,omitempty" name:"WorkFlowIdList"`

	// Workflow Name List, separated by ','
	WorkFlowNameList *string `json:"WorkFlowNameList,omitnil,omitempty" name:"WorkFlowNameList"`

	// Task Name List, separated by ','
	TaskNameList *string `json:"TaskNameList,omitnil,omitempty" name:"TaskNameList"`

	// Task ID list, separated by ','
	TaskIdList *string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Status List, separated by ','
	StatusList *string `json:"StatusList,omitnil,omitempty" name:"StatusList"`

	// Person in Charge List, separated by ','
	InChargeList *string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// Page number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Sorting Item
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Sort Method, DESC or ASC
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`
}

type DescribeOpsWorkflowsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Product Type Name List, separated by ','
	ProductNameList *string `json:"ProductNameList,omitnil,omitempty" name:"ProductNameList"`

	// File ID list, separated by ','
	FolderIdList *string `json:"FolderIdList,omitnil,omitempty" name:"FolderIdList"`

	// Workflow ID, separated by ','
	WorkFlowIdList *string `json:"WorkFlowIdList,omitnil,omitempty" name:"WorkFlowIdList"`

	// Workflow Name List, separated by ','
	WorkFlowNameList *string `json:"WorkFlowNameList,omitnil,omitempty" name:"WorkFlowNameList"`

	// Task Name List, separated by ','
	TaskNameList *string `json:"TaskNameList,omitnil,omitempty" name:"TaskNameList"`

	// Task ID list, separated by ','
	TaskIdList *string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Status List, separated by ','
	StatusList *string `json:"StatusList,omitnil,omitempty" name:"StatusList"`

	// Person in Charge List, separated by ','
	InChargeList *string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// Page number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Sorting Item
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Sort Method, DESC or ASC
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`
}

func (r *DescribeOpsWorkflowsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsWorkflowsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ProductNameList")
	delete(f, "FolderIdList")
	delete(f, "WorkFlowIdList")
	delete(f, "WorkFlowNameList")
	delete(f, "TaskNameList")
	delete(f, "TaskIdList")
	delete(f, "StatusList")
	delete(f, "InChargeList")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "SortItem")
	delete(f, "SortType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOpsWorkflowsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOpsWorkflowsResponseParams struct {
	// Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
	Data *WorkflowExtOpsDtoPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOpsWorkflowsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOpsWorkflowsResponseParams `json:"Response"`
}

func (r *DescribeOpsWorkflowsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOpsWorkflowsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOrganizationalFunctionsRequestParams struct {
	// Scenario Type: Development, In Use
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Function Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Display Name
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// Standard Mode Development Environment: DEV
	// Standard Mode Production Environment: PROD
	// Simple Mode: ALL
	EnvType *string `json:"EnvType,omitnil,omitempty" name:"EnvType"`
}

type DescribeOrganizationalFunctionsRequest struct {
	*tchttp.BaseRequest
	
	// Scenario Type: Development, In Use
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Function Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Display Name
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// Standard Mode Development Environment: DEV
	// Standard Mode Production Environment: PROD
	// Simple Mode: ALL
	EnvType *string `json:"EnvType,omitnil,omitempty" name:"EnvType"`
}

func (r *DescribeOrganizationalFunctionsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOrganizationalFunctionsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "ProjectId")
	delete(f, "Name")
	delete(f, "DisplayName")
	delete(f, "EnvType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeOrganizationalFunctionsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeOrganizationalFunctionsResponseParams struct {
	// Function information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Content []*OrganizationalFunction `json:"Content,omitnil,omitempty" name:"Content"`

	// Operation failed
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeOrganizationalFunctionsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeOrganizationalFunctionsResponseParams `json:"Response"`
}

func (r *DescribeOrganizationalFunctionsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeOrganizationalFunctionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProjectRequestParams struct {
	// Project ID. It is common to use the Project ID for queries, and either this or projectName must be present.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Display Associated Cluster Information
	DescribeClusters *bool `json:"DescribeClusters,omitnil,omitempty" name:"DescribeClusters"`

	// Whether to Display Information of Associated Execution Group, only partial information.
	DescribeExecutors *bool `json:"DescribeExecutors,omitnil,omitempty" name:"DescribeExecutors"`

	// Default not to display project administrator information
	DescribeAdminUsers *bool `json:"DescribeAdminUsers,omitnil,omitempty" name:"DescribeAdminUsers"`

	// Default not to count the number of project personnel
	DescribeMemberCount *bool `json:"DescribeMemberCount,omitnil,omitempty" name:"DescribeMemberCount"`

	// Default not to query creator's information
	DescribeCreator *bool `json:"DescribeCreator,omitnil,omitempty" name:"DescribeCreator"`

	// The project name is unique within a tenant, generally used for conversion to Project ID.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`
}

type DescribeProjectRequest struct {
	*tchttp.BaseRequest
	
	// Project ID. It is common to use the Project ID for queries, and either this or projectName must be present.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Display Associated Cluster Information
	DescribeClusters *bool `json:"DescribeClusters,omitnil,omitempty" name:"DescribeClusters"`

	// Whether to Display Information of Associated Execution Group, only partial information.
	DescribeExecutors *bool `json:"DescribeExecutors,omitnil,omitempty" name:"DescribeExecutors"`

	// Default not to display project administrator information
	DescribeAdminUsers *bool `json:"DescribeAdminUsers,omitnil,omitempty" name:"DescribeAdminUsers"`

	// Default not to count the number of project personnel
	DescribeMemberCount *bool `json:"DescribeMemberCount,omitnil,omitempty" name:"DescribeMemberCount"`

	// Default not to query creator's information
	DescribeCreator *bool `json:"DescribeCreator,omitnil,omitempty" name:"DescribeCreator"`

	// The project name is unique within a tenant, generally used for conversion to Project ID.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`
}

func (r *DescribeProjectRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProjectRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "DescribeClusters")
	delete(f, "DescribeExecutors")
	delete(f, "DescribeAdminUsers")
	delete(f, "DescribeMemberCount")
	delete(f, "DescribeCreator")
	delete(f, "ProjectName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeProjectRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeProjectResponseParams struct {
	// Project Information
	Data *Project `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeProjectResponse struct {
	*tchttp.BaseResponse
	Response *DescribeProjectResponseParams `json:"Response"`
}

func (r *DescribeProjectResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeProjectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeQualityScoreRequestParams struct {
	// Statistics Date
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`

	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeQualityScoreRequest struct {
	*tchttp.BaseRequest
	
	// Statistics Date
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`

	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeQualityScoreRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeQualityScoreRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StatisticsDate")
	delete(f, "ProjectId")
	delete(f, "DatasourceId")
	delete(f, "ScoreType")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeQualityScoreRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeQualityScoreResponseParams struct {
	// Quality Score
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *QualityScore `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeQualityScoreResponse struct {
	*tchttp.BaseResponse
	Response *DescribeQualityScoreResponseParams `json:"Response"`
}

func (r *DescribeQualityScoreResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeQualityScoreResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeQualityScoreTrendRequestParams struct {
	// Start Date of Statistics
	StatisticsStartDate *int64 `json:"StatisticsStartDate,omitnil,omitempty" name:"StatisticsStartDate"`

	// Statistics End Date
	StatisticsEndDate *int64 `json:"StatisticsEndDate,omitnil,omitempty" name:"StatisticsEndDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`

	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeQualityScoreTrendRequest struct {
	*tchttp.BaseRequest
	
	// Start Date of Statistics
	StatisticsStartDate *int64 `json:"StatisticsStartDate,omitnil,omitempty" name:"StatisticsStartDate"`

	// Statistics End Date
	StatisticsEndDate *int64 `json:"StatisticsEndDate,omitnil,omitempty" name:"StatisticsEndDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`

	// Ignore Query String
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeQualityScoreTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeQualityScoreTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StatisticsStartDate")
	delete(f, "StatisticsEndDate")
	delete(f, "ProjectId")
	delete(f, "DatasourceId")
	delete(f, "ScoreType")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeQualityScoreTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeQualityScoreTrendResponseParams struct {
	// Quality score trend view
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *QualityScoreTrend `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeQualityScoreTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeQualityScoreTrendResponseParams `json:"Response"`
}

func (r *DescribeQualityScoreTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeQualityScoreTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRealTimeTaskInstanceNodeInfoRequestParams struct {
	// Real-time Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRealTimeTaskInstanceNodeInfoRequest struct {
	*tchttp.BaseRequest
	
	// Real-time Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRealTimeTaskInstanceNodeInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRealTimeTaskInstanceNodeInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRealTimeTaskInstanceNodeInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRealTimeTaskInstanceNodeInfoResponseParams struct {
	// Real-time task instance node related information
	// Note: This field may return null, indicating that no valid value can be obtained.
	RealTimeTaskInstanceNodeInfo *RealTimeTaskInstanceNodeInfo `json:"RealTimeTaskInstanceNodeInfo,omitnil,omitempty" name:"RealTimeTaskInstanceNodeInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRealTimeTaskInstanceNodeInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRealTimeTaskInstanceNodeInfoResponseParams `json:"Response"`
}

func (r *DescribeRealTimeTaskInstanceNodeInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRealTimeTaskInstanceNodeInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRealTimeTaskMetricOverviewRequestParams struct {
	// Task ID of the real-time task to be viewed, which can be obtained from the task list page
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID to be viewed
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start Time
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type DescribeRealTimeTaskMetricOverviewRequest struct {
	*tchttp.BaseRequest
	
	// Task ID of the real-time task to be viewed, which can be obtained from the task list page
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID to be viewed
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start Time
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

func (r *DescribeRealTimeTaskMetricOverviewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRealTimeTaskMetricOverviewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "StartTime")
	delete(f, "EndTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRealTimeTaskMetricOverviewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRealTimeTaskMetricOverviewResponseParams struct {
	// Total Read Records
	TotalRecordNumOfRead *uint64 `json:"TotalRecordNumOfRead,omitnil,omitempty" name:"TotalRecordNumOfRead"`

	// Total Read Bytes
	TotalRecordByteNumOfRead *uint64 `json:"TotalRecordByteNumOfRead,omitnil,omitempty" name:"TotalRecordByteNumOfRead"`

	// Total Write Records
	TotalRecordNumOfWrite *uint64 `json:"TotalRecordNumOfWrite,omitnil,omitempty" name:"TotalRecordNumOfWrite"`

	// Total Write Bytes Unit: bytes
	TotalRecordByteNumOfWrite *uint64 `json:"TotalRecordByteNumOfWrite,omitnil,omitempty" name:"TotalRecordByteNumOfWrite"`

	// Total Dirty Record Data
	TotalDirtyRecordNum *uint64 `json:"TotalDirtyRecordNum,omitnil,omitempty" name:"TotalDirtyRecordNum"`

	// Total Dirty Bytes Unit: bytes
	TotalDirtyRecordByte *uint64 `json:"TotalDirtyRecordByte,omitnil,omitempty" name:"TotalDirtyRecordByte"`

	// Execution Duration Unit: s
	TotalDuration *uint64 `json:"TotalDuration,omitnil,omitempty" name:"TotalDuration"`

	// Start Running Time
	BeginRunTime *string `json:"BeginRunTime,omitnil,omitempty" name:"BeginRunTime"`

	// Current Running Time
	EndRunTime *string `json:"EndRunTime,omitnil,omitempty" name:"EndRunTime"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRealTimeTaskMetricOverviewResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRealTimeTaskMetricOverviewResponseParams `json:"Response"`
}

func (r *DescribeRealTimeTaskMetricOverviewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRealTimeTaskMetricOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRealTimeTaskSpeedRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Timestamp with Milliseconds
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Timestamp with Milliseconds
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Granularity, 1 or 5
	Granularity *uint64 `json:"Granularity,omitnil,omitempty" name:"Granularity"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRealTimeTaskSpeedRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Timestamp with Milliseconds
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Timestamp with Milliseconds
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Granularity, 1 or 5
	Granularity *uint64 `json:"Granularity,omitnil,omitempty" name:"Granularity"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRealTimeTaskSpeedRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRealTimeTaskSpeedRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "Granularity")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRealTimeTaskSpeedRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRealTimeTaskSpeedResponseParams struct {
	// Synchronous Speed Bar/s List
	RecordsSpeedList []*RecordsSpeed `json:"RecordsSpeedList,omitnil,omitempty" name:"RecordsSpeedList"`

	// Synchronous Speed Bytes/s List
	BytesSpeedList []*BytesSpeed `json:"BytesSpeedList,omitnil,omitempty" name:"BytesSpeedList"`

	// Synchronous Speed, including RecordsSpeedList and BytesSpeedList
	Data *RealTimeTaskSpeed `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRealTimeTaskSpeedResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRealTimeTaskSpeedResponseParams `json:"Response"`
}

func (r *DescribeRealTimeTaskSpeedResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRealTimeTaskSpeedResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReportTaskDetailRequestParams struct {
	// Tenant id.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Engine task id.
	EngineTaskId *string `json:"EngineTaskId,omitnil,omitempty" name:"EngineTaskId"`
}

type DescribeReportTaskDetailRequest struct {
	*tchttp.BaseRequest
	
	// Tenant id.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Engine task id.
	EngineTaskId *string `json:"EngineTaskId,omitnil,omitempty" name:"EngineTaskId"`
}

func (r *DescribeReportTaskDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReportTaskDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TenantId")
	delete(f, "EngineTaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeReportTaskDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReportTaskDetailResponseParams struct {
	// 1
	// Note: This field may return null, indicating that no valid values can be obtained.
	Data *ReportTaskDetail `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeReportTaskDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeReportTaskDetailResponseParams `json:"Response"`
}

func (r *DescribeReportTaskDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReportTaskDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReportTaskListRequestParams struct {
	// Page number
	PageNum *uint64 `json:"PageNum,omitnil,omitempty" name:"PageNum"`

	// Entries per page.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Tenant id.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Project ID.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance ID
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Job id.
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// Engine task id.
	EngineTaskId *string `json:"EngineTaskId,omitnil,omitempty" name:"EngineTaskId"`

	// DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
	ProductSource *string `json:"ProductSource,omitnil,omitempty" name:"ProductSource"`

	// Root account.
	OnwerUid *string `json:"OnwerUid,omitnil,omitempty" name:"OnwerUid"`

	// Start time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type DescribeReportTaskListRequest struct {
	*tchttp.BaseRequest
	
	// Page number
	PageNum *uint64 `json:"PageNum,omitnil,omitempty" name:"PageNum"`

	// Entries per page.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Tenant id.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Project ID.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance ID
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Job id.
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// Engine task id.
	EngineTaskId *string `json:"EngineTaskId,omitnil,omitempty" name:"EngineTaskId"`

	// DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
	ProductSource *string `json:"ProductSource,omitnil,omitempty" name:"ProductSource"`

	// Root account.
	OnwerUid *string `json:"OnwerUid,omitnil,omitempty" name:"OnwerUid"`

	// Start time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

func (r *DescribeReportTaskListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReportTaskListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNum")
	delete(f, "PageSize")
	delete(f, "TenantId")
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "InstanceId")
	delete(f, "JobId")
	delete(f, "EngineTaskId")
	delete(f, "ProductSource")
	delete(f, "OnwerUid")
	delete(f, "StartTime")
	delete(f, "EndTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeReportTaskListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeReportTaskListResponseParams struct {
	// Task list information.
	Data *ReportTaskListInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeReportTaskListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeReportTaskListResponseParams `json:"Response"`
}

func (r *DescribeReportTaskListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeReportTaskListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeResourceManagePathTreesRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Name, for search
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// File Type
	FileType *string `json:"FileType,omitnil,omitempty" name:"FileType"`

	// File path
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// Folder Type
	// personal individual
	// project Item
	// resource
	DirType *string `json:"DirType,omitnil,omitempty" name:"DirType"`
}

type DescribeResourceManagePathTreesRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Name, for search
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// File Type
	FileType *string `json:"FileType,omitnil,omitempty" name:"FileType"`

	// File path
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// Folder Type
	// personal individual
	// project Item
	// resource
	DirType *string `json:"DirType,omitnil,omitempty" name:"DirType"`
}

func (r *DescribeResourceManagePathTreesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeResourceManagePathTreesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Name")
	delete(f, "FileType")
	delete(f, "FilePath")
	delete(f, "DirType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeResourceManagePathTreesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeResourceManagePathTreesResponseParams struct {
	// Response Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*ResourcePathTree `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeResourceManagePathTreesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeResourceManagePathTreesResponseParams `json:"Response"`
}

func (r *DescribeResourceManagePathTreesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeResourceManagePathTreesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRoleListRequestParams struct {
	// Return all Roles
	ShowAllRoles *bool `json:"ShowAllRoles,omitnil,omitempty" name:"ShowAllRoles"`

	// Role type (system, tenant, project) that needs to be returned
	IncludeRoleTypes []*string `json:"IncludeRoleTypes,omitnil,omitempty" name:"IncludeRoleTypes"`

	// Specifies the statistics of role binding personnel. Only supported in the private edition.
	DescribeMemberCount *bool `json:"DescribeMemberCount,omitnil,omitempty" name:"DescribeMemberCount"`

	// Specifies the operator information. describes the privatized multi-tenancy version.
	DescribeOperator *bool `json:"DescribeOperator,omitnil,omitempty" name:"DescribeOperator"`

	// System Role
	DescribeSystemRoleOnly *bool `json:"DescribeSystemRoleOnly,omitnil,omitempty" name:"DescribeSystemRoleOnly"`

	// Custom Role
	DescribeCustomRoleOnly *bool `json:"DescribeCustomRoleOnly,omitnil,omitempty" name:"DescribeCustomRoleOnly"`

	// Permission to view
	DescribePrivileges *bool `json:"DescribePrivileges,omitnil,omitempty" name:"DescribePrivileges"`

	// Filter criteria for Role ID
	RoleIds []*string `json:"RoleIds,omitnil,omitempty" name:"RoleIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Paging information
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Query Field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Field
	OrderFields []*OrderFields `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

type DescribeRoleListRequest struct {
	*tchttp.BaseRequest
	
	// Return all Roles
	ShowAllRoles *bool `json:"ShowAllRoles,omitnil,omitempty" name:"ShowAllRoles"`

	// Role type (system, tenant, project) that needs to be returned
	IncludeRoleTypes []*string `json:"IncludeRoleTypes,omitnil,omitempty" name:"IncludeRoleTypes"`

	// Specifies the statistics of role binding personnel. Only supported in the private edition.
	DescribeMemberCount *bool `json:"DescribeMemberCount,omitnil,omitempty" name:"DescribeMemberCount"`

	// Specifies the operator information. describes the privatized multi-tenancy version.
	DescribeOperator *bool `json:"DescribeOperator,omitnil,omitempty" name:"DescribeOperator"`

	// System Role
	DescribeSystemRoleOnly *bool `json:"DescribeSystemRoleOnly,omitnil,omitempty" name:"DescribeSystemRoleOnly"`

	// Custom Role
	DescribeCustomRoleOnly *bool `json:"DescribeCustomRoleOnly,omitnil,omitempty" name:"DescribeCustomRoleOnly"`

	// Permission to view
	DescribePrivileges *bool `json:"DescribePrivileges,omitnil,omitempty" name:"DescribePrivileges"`

	// Filter criteria for Role ID
	RoleIds []*string `json:"RoleIds,omitnil,omitempty" name:"RoleIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Page number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Paging information
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Query Field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Field
	OrderFields []*OrderFields `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

func (r *DescribeRoleListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRoleListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ShowAllRoles")
	delete(f, "IncludeRoleTypes")
	delete(f, "DescribeMemberCount")
	delete(f, "DescribeOperator")
	delete(f, "DescribeSystemRoleOnly")
	delete(f, "DescribeCustomRoleOnly")
	delete(f, "DescribePrivileges")
	delete(f, "RoleIds")
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRoleListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRoleListResponseParams struct {
	// This API is used to provide the Role List
	Data *PageRoles `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRoleListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRoleListResponseParams `json:"Response"`
}

func (r *DescribeRoleListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRoleListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleDimStatRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeRuleDimStatRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeRuleDimStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleDimStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleDimStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleDimStatResponseParams struct {
	// Result
	Data *RuleDimStat `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleDimStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleDimStatResponseParams `json:"Response"`
}

func (r *DescribeRuleDimStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleDimStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecDetailRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Execution ID
	RuleExecId *uint64 `json:"RuleExecId,omitnil,omitempty" name:"RuleExecId"`
}

type DescribeRuleExecDetailRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Execution ID
	RuleExecId *uint64 `json:"RuleExecId,omitnil,omitempty" name:"RuleExecId"`
}

func (r *DescribeRuleExecDetailRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecDetailRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "RuleExecId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleExecDetailRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecDetailResponseParams struct {
	// Rule Execution Result DetailsNote: This field may return null, indicating that no valid value can be obtained.
	Data *RuleExecResultDetail `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleExecDetailResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleExecDetailResponseParams `json:"Response"`
}

func (r *DescribeRuleExecDetailResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecLogRequestParams struct {
	// Rule Execution ID
	RuleExecId *uint64 `json:"RuleExecId,omitnil,omitempty" name:"RuleExecId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group Execution ID
	RuleGroupExecId *uint64 `json:"RuleGroupExecId,omitnil,omitempty" name:"RuleGroupExecId"`
}

type DescribeRuleExecLogRequest struct {
	*tchttp.BaseRequest
	
	// Rule Execution ID
	RuleExecId *uint64 `json:"RuleExecId,omitnil,omitempty" name:"RuleExecId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group Execution ID
	RuleGroupExecId *uint64 `json:"RuleGroupExecId,omitnil,omitempty" name:"RuleGroupExecId"`
}

func (r *DescribeRuleExecLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleExecId")
	delete(f, "ProjectId")
	delete(f, "RuleGroupExecId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleExecLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecLogResponseParams struct {
	// Rule Execution LogNote: This field may return null, indicating that no valid value can be obtained.
	Data *RuleExecLog `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleExecLogResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleExecLogResponseParams `json:"Response"`
}

func (r *DescribeRuleExecLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecResultsRequestParams struct {
	// Rule Group Execution ID
	RuleGroupExecId *uint64 `json:"RuleGroupExecId,omitnil,omitempty" name:"RuleGroupExecId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRuleExecResultsRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group Execution ID
	RuleGroupExecId *uint64 `json:"RuleGroupExecId,omitnil,omitempty" name:"RuleGroupExecId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRuleExecResultsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecResultsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupExecId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleExecResultsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecResultsResponseParams struct {
	// Rule Execution Result List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleExecResultPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleExecResultsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleExecResultsResponseParams `json:"Response"`
}

func (r *DescribeRuleExecResultsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecResultsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecStatRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeRuleExecStatRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeRuleExecStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleExecStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleExecStatResponseParams struct {
	// Result
	Data *RuleExecStat `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleExecStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleExecStatResponseParams `json:"Response"`
}

func (r *DescribeRuleExecStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleExecStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupExecResultsByPageRequestParams struct {
	// Pagination Index
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRuleGroupExecResultsByPageRequest struct {
	*tchttp.BaseRequest
	
	// Pagination Index
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRuleGroupExecResultsByPageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupExecResultsByPageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleGroupExecResultsByPageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupExecResultsByPageResponseParams struct {
	// Rule Group Execution Result List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroupExecResultPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleGroupExecResultsByPageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleGroupExecResultsByPageResponseParams `json:"Response"`
}

func (r *DescribeRuleGroupExecResultsByPageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupExecResultsByPageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupRequestParams struct {
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`
}

type DescribeRuleGroupRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`
}

func (r *DescribeRuleGroupRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupId")
	delete(f, "DatasourceId")
	delete(f, "TableId")
	delete(f, "ProjectId")
	delete(f, "DatabaseId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleGroupRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupResponseParams struct {
	// Data quality rule group details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroup `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleGroupResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleGroupResponseParams `json:"Response"`
}

func (r *DescribeRuleGroupResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupSubscriptionRequestParams struct {
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRuleGroupSubscriptionRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRuleGroupSubscriptionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupSubscriptionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleGroupSubscriptionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupSubscriptionResponseParams struct {
	// Rule Group Subscription Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroupSubscribe `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleGroupSubscriptionResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleGroupSubscriptionResponseParams `json:"Response"`
}

func (r *DescribeRuleGroupSubscriptionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupSubscriptionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupTableRequestParams struct {
	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`
}

type DescribeRuleGroupTableRequest struct {
	*tchttp.BaseRequest
	
	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`
}

func (r *DescribeRuleGroupTableRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupTableRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TableId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleGroupTableRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupTableResponseParams struct {
	// DataNote: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroupTable `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleGroupTableResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleGroupTableResponseParams `json:"Response"`
}

func (r *DescribeRuleGroupTableResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupTableResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupsByPageRequestParams struct {
	// Pagination Index
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria, each request's Filters limit is 10, Filter.Values limit is 5
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Method
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRuleGroupsByPageRequest struct {
	*tchttp.BaseRequest
	
	// Pagination Index
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria, each request's Filters limit is 10, Filter.Values limit is 5
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Method
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRuleGroupsByPageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupsByPageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleGroupsByPageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleGroupsByPageResponseParams struct {
	// Rule Group List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleGroupPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleGroupsByPageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleGroupsByPageResponseParams `json:"Response"`
}

func (r *DescribeRuleGroupsByPageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleGroupsByPageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleRequestParams struct {
	// Quality Rule ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRuleRequest struct {
	*tchttp.BaseRequest
	
	// Quality Rule ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleResponseParams struct {
	// Rule Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *Rule `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleResponseParams `json:"Response"`
}

func (r *DescribeRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleTemplateRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Template ID
	TemplateId *uint64 `json:"TemplateId,omitnil,omitempty" name:"TemplateId"`
}

type DescribeRuleTemplateRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Template ID
	TemplateId *uint64 `json:"TemplateId,omitnil,omitempty" name:"TemplateId"`
}

func (r *DescribeRuleTemplateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleTemplateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TemplateId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleTemplateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleTemplateResponseParams struct {
	// Template Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RuleTemplate `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleTemplateResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleTemplateResponseParams `json:"Response"`
}

func (r *DescribeRuleTemplateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleTemplatesByPageRequestParams struct {
	// Current Page
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Universal Sort Field
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Universal Filter Criteria
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

type DescribeRuleTemplatesByPageRequest struct {
	*tchttp.BaseRequest
	
	// Current Page
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Universal Sort Field
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Universal Filter Criteria
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`
}

func (r *DescribeRuleTemplatesByPageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleTemplatesByPageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "ProjectId")
	delete(f, "OrderFields")
	delete(f, "Filters")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleTemplatesByPageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleTemplatesByPageResponseParams struct {
	// Result
	Data *RuleTemplatePage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleTemplatesByPageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleTemplatesByPageResponseParams `json:"Response"`
}

func (r *DescribeRuleTemplatesByPageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleTemplatesByPageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleTemplatesRequestParams struct {
	// Template Type 1. System Template 2. Custom Definition Template
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 1. Constant 2. Offline Table Level 2. Offline Field Level
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Corresponding Engine Type of the Source
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`
}

type DescribeRuleTemplatesRequest struct {
	*tchttp.BaseRequest
	
	// Template Type 1. System Template 2. Custom Definition Template
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// 1. Constant 2. Offline Table Level 2. Offline Field Level
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Corresponding Engine Type of the Source
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`
}

func (r *DescribeRuleTemplatesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleTemplatesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "SourceObjectType")
	delete(f, "ProjectId")
	delete(f, "SourceEngineTypes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRuleTemplatesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRuleTemplatesResponseParams struct {
	// Rule Template List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*RuleTemplate `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRuleTemplatesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRuleTemplatesResponseParams `json:"Response"`
}

func (r *DescribeRuleTemplatesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRuleTemplatesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRulesByPageRequestParams struct {
	// Pagination Index
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeRulesByPageRequest struct {
	*tchttp.BaseRequest
	
	// Pagination Index
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeRulesByPageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRulesByPageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRulesByPageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRulesByPageResponseParams struct {
	// Rule Quality List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *RulePage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRulesByPageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRulesByPageResponseParams `json:"Response"`
}

func (r *DescribeRulesByPageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRulesByPageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRulesRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// The running execution engine, if not specified, the default execution engine under this data source will be requested
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`
}

type DescribeRulesRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// The running execution engine, if not specified, the default execution engine under this data source will be requested
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`
}

func (r *DescribeRulesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRulesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "RuleGroupId")
	delete(f, "EngineType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeRulesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeRulesResponseParams struct {
	// Rule list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*Rule `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeRulesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeRulesResponseParams `json:"Response"`
}

func (r *DescribeRulesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScheduleInstancesRequestParams struct {
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type DescribeScheduleInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *DescribeScheduleInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScheduleInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "CheckFather")
	delete(f, "RerunType")
	delete(f, "DependentWay")
	delete(f, "SkipEventListening")
	delete(f, "SonInstanceType")
	delete(f, "SearchCondition")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeScheduleInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeScheduleInstancesResponseParams struct {
	// Instance Result Set
	Data *CollectionInstanceOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeScheduleInstancesResponse struct {
	*tchttp.BaseResponse
	Response *DescribeScheduleInstancesResponseParams `json:"Response"`
}

func (r *DescribeScheduleInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeScheduleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerInstanceStatusRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type ID
	TaskTypeId *string `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Execution Resource Group ID
	ExecutionGroupId *string `json:"ExecutionGroupId,omitnil,omitempty" name:"ExecutionGroupId"`

	// Execution Resource Group Name
	ExecutionGroupName *string `json:"ExecutionGroupName,omitnil,omitempty" name:"ExecutionGroupName"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

type DescribeSchedulerInstanceStatusRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type ID
	TaskTypeId *string `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Execution Resource Group ID
	ExecutionGroupId *string `json:"ExecutionGroupId,omitnil,omitempty" name:"ExecutionGroupId"`

	// Execution Resource Group Name
	ExecutionGroupName *string `json:"ExecutionGroupName,omitnil,omitempty" name:"ExecutionGroupName"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

func (r *DescribeSchedulerInstanceStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerInstanceStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskTypeId")
	delete(f, "ExecutionGroupId")
	delete(f, "ExecutionGroupName")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "InCharge")
	delete(f, "WorkflowId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSchedulerInstanceStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerInstanceStatusResponseParams struct {
	// Response Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*ScreenInstanceInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSchedulerInstanceStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSchedulerInstanceStatusResponseParams `json:"Response"`
}

func (r *DescribeSchedulerInstanceStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerInstanceStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerRunTimeInstanceCntByStatusRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Cycle Type
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Time Unit e.g.: 12h
	TimeUnit *string `json:"TimeUnit,omitnil,omitempty" name:"TimeUnit"`

	// Start Date: 2023-03-02
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Before End Date: 2023-03-20
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Task Type
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Sort Fields
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Ascending/Descending Order
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`
}

type DescribeSchedulerRunTimeInstanceCntByStatusRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Cycle Type
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Time Unit e.g.: 12h
	TimeUnit *string `json:"TimeUnit,omitnil,omitempty" name:"TimeUnit"`

	// Start Date: 2023-03-02
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Before End Date: 2023-03-20
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Task Type
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Sort Fields
	SortItem *string `json:"SortItem,omitnil,omitempty" name:"SortItem"`

	// Ascending/Descending Order
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`
}

func (r *DescribeSchedulerRunTimeInstanceCntByStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerRunTimeInstanceCntByStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "CycleUnit")
	delete(f, "TimeUnit")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "TaskType")
	delete(f, "InCharge")
	delete(f, "WorkflowId")
	delete(f, "SortItem")
	delete(f, "SortType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSchedulerRunTimeInstanceCntByStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerRunTimeInstanceCntByStatusResponseParams struct {
	// Response Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*RuntimeInstanceCntTop `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSchedulerRunTimeInstanceCntByStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSchedulerRunTimeInstanceCntByStatusResponseParams `json:"Response"`
}

func (r *DescribeSchedulerRunTimeInstanceCntByStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerRunTimeInstanceCntByStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerTaskCntByStatusRequestParams struct {
	// 1
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Y
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// 111
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 1
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

type DescribeSchedulerTaskCntByStatusRequest struct {
	*tchttp.BaseRequest
	
	// 1
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Y
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// 111
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 1
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

func (r *DescribeSchedulerTaskCntByStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerTaskCntByStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskType")
	delete(f, "TypeName")
	delete(f, "ProjectId")
	delete(f, "InCharge")
	delete(f, "WorkflowId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSchedulerTaskCntByStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerTaskCntByStatusResponseParams struct {
	// Statistical Results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*ScreenTaskInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSchedulerTaskCntByStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSchedulerTaskCntByStatusResponseParams `json:"Response"`
}

func (r *DescribeSchedulerTaskCntByStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerTaskCntByStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerTaskTypeCntRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`
}

type DescribeSchedulerTaskTypeCntRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`
}

func (r *DescribeSchedulerTaskTypeCntRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerTaskTypeCntRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "InCharge")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSchedulerTaskTypeCntRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSchedulerTaskTypeCntResponseParams struct {
	// data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*TaskTypeCnt `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSchedulerTaskTypeCntResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSchedulerTaskTypeCntResponseParams `json:"Response"`
}

func (r *DescribeSchedulerTaskTypeCntResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSchedulerTaskTypeCntResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeStatisticInstanceStatusTrendOpsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type Id
	TaskTypeId *string `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Time Type
	TimeType *string `json:"TimeType,omitnil,omitempty" name:"TimeType"`

	// Task Type Name
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Resource Group ID
	ExecutionGroupId *string `json:"ExecutionGroupId,omitnil,omitempty" name:"ExecutionGroupId"`

	// Resource Group Name
	ExecutionGroupName *string `json:"ExecutionGroupName,omitnil,omitempty" name:"ExecutionGroupName"`

	// 1
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// 1
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// 1
	StateList []*int64 `json:"StateList,omitnil,omitempty" name:"StateList"`

	// D represents days, H represents hours
	AggregationUnit *string `json:"AggregationUnit,omitnil,omitempty" name:"AggregationUnit"`

	// 1
	AverageWindowSize *int64 `json:"AverageWindowSize,omitnil,omitempty" name:"AverageWindowSize"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

type DescribeStatisticInstanceStatusTrendOpsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type Id
	TaskTypeId *string `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Time Type
	TimeType *string `json:"TimeType,omitnil,omitempty" name:"TimeType"`

	// Task Type Name
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Resource Group ID
	ExecutionGroupId *string `json:"ExecutionGroupId,omitnil,omitempty" name:"ExecutionGroupId"`

	// Resource Group Name
	ExecutionGroupName *string `json:"ExecutionGroupName,omitnil,omitempty" name:"ExecutionGroupName"`

	// 1
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// 1
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// 1
	StateList []*int64 `json:"StateList,omitnil,omitempty" name:"StateList"`

	// D represents days, H represents hours
	AggregationUnit *string `json:"AggregationUnit,omitnil,omitempty" name:"AggregationUnit"`

	// 1
	AverageWindowSize *int64 `json:"AverageWindowSize,omitnil,omitempty" name:"AverageWindowSize"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

func (r *DescribeStatisticInstanceStatusTrendOpsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeStatisticInstanceStatusTrendOpsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskTypeId")
	delete(f, "TimeType")
	delete(f, "TypeName")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "ExecutionGroupId")
	delete(f, "ExecutionGroupName")
	delete(f, "InCharge")
	delete(f, "TaskType")
	delete(f, "StateList")
	delete(f, "AggregationUnit")
	delete(f, "AverageWindowSize")
	delete(f, "WorkflowId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeStatisticInstanceStatusTrendOpsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeStatisticInstanceStatusTrendOpsResponseParams struct {
	// Instance status statistics results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*InstanceStatisticInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeStatisticInstanceStatusTrendOpsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeStatisticInstanceStatusTrendOpsResponseParams `json:"Response"`
}

func (r *DescribeStatisticInstanceStatusTrendOpsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeStatisticInstanceStatusTrendOpsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeStreamTaskLogListRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Job ID
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// End time
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Start Time
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// container Name
	Container *string `json:"Container,omitnil,omitempty" name:"Container"`

	// Number of entries
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// Sort Type desc asc
	OrderType *string `json:"OrderType,omitnil,omitempty" name:"OrderType"`

	// Instance ID of Job Execution
	RunningOrderId *uint64 `json:"RunningOrderId,omitnil,omitempty" name:"RunningOrderId"`

	// Keyword
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`
}

type DescribeStreamTaskLogListRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Job ID
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// End time
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Start Time
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// container Name
	Container *string `json:"Container,omitnil,omitempty" name:"Container"`

	// Number of entries
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// Sort Type desc asc
	OrderType *string `json:"OrderType,omitnil,omitempty" name:"OrderType"`

	// Instance ID of Job Execution
	RunningOrderId *uint64 `json:"RunningOrderId,omitnil,omitempty" name:"RunningOrderId"`

	// Keyword
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`
}

func (r *DescribeStreamTaskLogListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeStreamTaskLogListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "JobId")
	delete(f, "EndTime")
	delete(f, "StartTime")
	delete(f, "Container")
	delete(f, "Limit")
	delete(f, "OrderType")
	delete(f, "RunningOrderId")
	delete(f, "Keyword")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeStreamTaskLogListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeStreamTaskLogListResponseParams struct {
	// Is it full
	// Note: This field may return null, indicating that no valid value can be obtained.
	ListOver *bool `json:"ListOver,omitnil,omitempty" name:"ListOver"`

	// Log Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	LogContentList []*LogContentInfo `json:"LogContentList,omitnil,omitempty" name:"LogContentList"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeStreamTaskLogListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeStreamTaskLogListResponseParams `json:"Response"`
}

func (r *DescribeStreamTaskLogListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeStreamTaskLogListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSuccessorOpsTaskInfosRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeSuccessorOpsTaskInfosRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeSuccessorOpsTaskInfosRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSuccessorOpsTaskInfosRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeSuccessorOpsTaskInfosRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeSuccessorOpsTaskInfosResponseParams struct {
	// Downstream Task List
	Data []*TaskOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeSuccessorOpsTaskInfosResponse struct {
	*tchttp.BaseResponse
	Response *DescribeSuccessorOpsTaskInfosResponseParams `json:"Response"`
}

func (r *DescribeSuccessorOpsTaskInfosResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeSuccessorOpsTaskInfosResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableBasicInfoRequestParams struct {
	// Page number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

type DescribeTableBasicInfoRequest struct {
	*tchttp.BaseRequest
	
	// Page number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

func (r *DescribeTableBasicInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableBasicInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableBasicInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableBasicInfoResponseParams struct {
	// Table Metadata
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableBasicInfoList []*TableBasicInfo `json:"TableBasicInfoList,omitnil,omitempty" name:"TableBasicInfoList"`

	// Total number of items
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableBasicInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableBasicInfoResponseParams `json:"Response"`
}

func (r *DescribeTableBasicInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableBasicInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableInfoListRequestParams struct {
	// Table name
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// If it is hive write rpc, if it is other types do not transmit
	ConnectionType *string `json:"ConnectionType,omitnil,omitempty" name:"ConnectionType"`

	// Database source type
	Catalog *string `json:"Catalog,omitnil,omitempty" name:"Catalog"`
}

type DescribeTableInfoListRequest struct {
	*tchttp.BaseRequest
	
	// Table name
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// If it is hive write rpc, if it is other types do not transmit
	ConnectionType *string `json:"ConnectionType,omitnil,omitempty" name:"ConnectionType"`

	// Database source type
	Catalog *string `json:"Catalog,omitnil,omitempty" name:"Catalog"`
}

func (r *DescribeTableInfoListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableInfoListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Filters")
	delete(f, "ConnectionType")
	delete(f, "Catalog")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableInfoListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableInfoListResponseParams struct {
	// Table informationNote: This field may return null, indicating that no valid value can be obtained.
	TableInfo []*TableInfo `json:"TableInfo,omitnil,omitempty" name:"TableInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableInfoListResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableInfoListResponseParams `json:"Response"`
}

func (r *DescribeTableInfoListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableInfoListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableLineageInfoRequestParams struct {
	// Query Direction, INPUT, OUTPUT, BOTH enumerated values
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`

	// Table information
	Data *TableLineageInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Single Query Indegree, default 1
	InputDepth *int64 `json:"InputDepth,omitnil,omitempty" name:"InputDepth"`

	// Single Query Outdegree, default 1
	OutputDepth *int64 `json:"OutputDepth,omitnil,omitempty" name:"OutputDepth"`

	// Additional Parameters (Pass Caller Information)
	ExtParams []*LineageParamRecord `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Filter Temporary Tables, default true
	IgnoreTemp *bool `json:"IgnoreTemp,omitnil,omitempty" name:"IgnoreTemp"`

	// Recursively Query Number of Secondary Nodes, default is true
	RecursiveSecond *bool `json:"RecursiveSecond,omitnil,omitempty" name:"RecursiveSecond"`
}

type DescribeTableLineageInfoRequest struct {
	*tchttp.BaseRequest
	
	// Query Direction, INPUT, OUTPUT, BOTH enumerated values
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`

	// Table information
	Data *TableLineageInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Single Query Indegree, default 1
	InputDepth *int64 `json:"InputDepth,omitnil,omitempty" name:"InputDepth"`

	// Single Query Outdegree, default 1
	OutputDepth *int64 `json:"OutputDepth,omitnil,omitempty" name:"OutputDepth"`

	// Additional Parameters (Pass Caller Information)
	ExtParams []*LineageParamRecord `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Filter Temporary Tables, default true
	IgnoreTemp *bool `json:"IgnoreTemp,omitnil,omitempty" name:"IgnoreTemp"`

	// Recursively Query Number of Secondary Nodes, default is true
	RecursiveSecond *bool `json:"RecursiveSecond,omitnil,omitempty" name:"RecursiveSecond"`
}

func (r *DescribeTableLineageInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableLineageInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Direction")
	delete(f, "Data")
	delete(f, "InputDepth")
	delete(f, "OutputDepth")
	delete(f, "ExtParams")
	delete(f, "IgnoreTemp")
	delete(f, "RecursiveSecond")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableLineageInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableLineageInfoResponseParams struct {
	// Table Lineage Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableLineageBasicInfo *TableLineageBaseInfo `json:"TableLineageBasicInfo,omitnil,omitempty" name:"TableLineageBasicInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableLineageInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableLineageInfoResponseParams `json:"Response"`
}

func (r *DescribeTableLineageInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableLineageInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableLineageRequestParams struct {
	// Enumeration value of query direction.
	// 
	// - INPUT
	// - OUTPUT
	// - BOTH
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`

	// Table information
	Data *TableLineageInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Single Query Indegree, default 1
	InputDepth *int64 `json:"InputDepth,omitnil,omitempty" name:"InputDepth"`

	// Single Query Outdegree, default 1
	OutputDepth *int64 `json:"OutputDepth,omitnil,omitempty" name:"OutputDepth"`

	// Additional Parameters (Pass Caller Information)
	ExtParams []*LineageParamRecord `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Filter Temporary Tables, default true
	IgnoreTemp *bool `json:"IgnoreTemp,omitnil,omitempty" name:"IgnoreTemp"`

	// Recursively Query Number of Secondary Nodes, default is true
	RecursiveSecond *bool `json:"RecursiveSecond,omitnil,omitempty" name:"RecursiveSecond"`
}

type DescribeTableLineageRequest struct {
	*tchttp.BaseRequest
	
	// Enumeration value of query direction.
	// 
	// - INPUT
	// - OUTPUT
	// - BOTH
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`

	// Table information
	Data *TableLineageInfo `json:"Data,omitnil,omitempty" name:"Data"`

	// Single Query Indegree, default 1
	InputDepth *int64 `json:"InputDepth,omitnil,omitempty" name:"InputDepth"`

	// Single Query Outdegree, default 1
	OutputDepth *int64 `json:"OutputDepth,omitnil,omitempty" name:"OutputDepth"`

	// Additional Parameters (Pass Caller Information)
	ExtParams []*LineageParamRecord `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Filter Temporary Tables, default true
	IgnoreTemp *bool `json:"IgnoreTemp,omitnil,omitempty" name:"IgnoreTemp"`

	// Recursively Query Number of Secondary Nodes, default is true
	RecursiveSecond *bool `json:"RecursiveSecond,omitnil,omitempty" name:"RecursiveSecond"`
}

func (r *DescribeTableLineageRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableLineageRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Direction")
	delete(f, "Data")
	delete(f, "InputDepth")
	delete(f, "OutputDepth")
	delete(f, "ExtParams")
	delete(f, "IgnoreTemp")
	delete(f, "RecursiveSecond")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableLineageRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableLineageResponseParams struct {
	// Table Lineage Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableLineage *TableLineageInfo `json:"TableLineage,omitnil,omitempty" name:"TableLineage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableLineageResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableLineageResponseParams `json:"Response"`
}

func (r *DescribeTableLineageResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableLineageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableMetaRequestParams struct {
	// Unique Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Query conditions by Name
	TableNameFilter *TableNameFilter `json:"TableNameFilter,omitnil,omitempty" name:"TableNameFilter"`

	// Query condition type: 0 by ID, 1 by Name, default is 0
	TableFilterType *uint64 `json:"TableFilterType,omitnil,omitempty" name:"TableFilterType"`
}

type DescribeTableMetaRequest struct {
	*tchttp.BaseRequest
	
	// Unique Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Query conditions by Name
	TableNameFilter *TableNameFilter `json:"TableNameFilter,omitnil,omitempty" name:"TableNameFilter"`

	// Query condition type: 0 by ID, 1 by Name, default is 0
	TableFilterType *uint64 `json:"TableFilterType,omitnil,omitempty" name:"TableFilterType"`
}

func (r *DescribeTableMetaRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableMetaRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TableId")
	delete(f, "TableNameFilter")
	delete(f, "TableFilterType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableMetaRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableMetaResponseParams struct {
	// Table Metadata InformationNote: This field may return null, indicating that no valid value can be obtained.
	TableMeta *TableMeta `json:"TableMeta,omitnil,omitempty" name:"TableMeta"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableMetaResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableMetaResponseParams `json:"Response"`
}

func (r *DescribeTableMetaResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableMetaResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableMetasRequestParams struct {
	// Page number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

type DescribeTableMetasRequest struct {
	*tchttp.BaseRequest
	
	// Page number
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter field
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sort Fields
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`
}

func (r *DescribeTableMetasRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableMetasRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableMetasRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableMetasResponseParams struct {
	// Table Metadata
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableMetas []*TableMeta `json:"TableMetas,omitnil,omitempty" name:"TableMetas"`

	// Total number of items
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableMetasResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableMetasResponseParams `json:"Response"`
}

func (r *DescribeTableMetasResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableMetasResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableQualityDetailsRequestParams struct {
	// Statistics Date
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Pagination Index
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter Parameters TableName, DatabaseId, DatabaseName, OwnerUserName
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Parameters Sort order DESC or ASC, Table score sorting TableScore
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`
}

type DescribeTableQualityDetailsRequest struct {
	*tchttp.BaseRequest
	
	// Statistics Date
	StatisticsDate *int64 `json:"StatisticsDate,omitnil,omitempty" name:"StatisticsDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Pagination Index
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter Parameters TableName, DatabaseId, DatabaseName, OwnerUserName
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting Parameters Sort order DESC or ASC, Table score sorting TableScore
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`
}

func (r *DescribeTableQualityDetailsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableQualityDetailsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "StatisticsDate")
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "DatasourceId")
	delete(f, "ScoreType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableQualityDetailsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableQualityDetailsResponseParams struct {
	// Table quality score details result
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *TableQualityDetailPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableQualityDetailsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableQualityDetailsResponseParams `json:"Response"`
}

func (r *DescribeTableQualityDetailsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableQualityDetailsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableSchemaInfoRequestParams struct {
	// Table Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Data Source Types (e.g., MYSQL, HIVE, KAFKA, etc.)
	MsType *string `json:"MsType,omitnil,omitempty" name:"MsType"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Connection Type (example value: rpc)
	ConnectionType *string `json:"ConnectionType,omitnil,omitempty" name:"ConnectionType"`

	// Schema Name under Metadata Database
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`
}

type DescribeTableSchemaInfoRequest struct {
	*tchttp.BaseRequest
	
	// Table Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Data Source Types (e.g., MYSQL, HIVE, KAFKA, etc.)
	MsType *string `json:"MsType,omitnil,omitempty" name:"MsType"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Connection Type (example value: rpc)
	ConnectionType *string `json:"ConnectionType,omitnil,omitempty" name:"ConnectionType"`

	// Schema Name under Metadata Database
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`
}

func (r *DescribeTableSchemaInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableSchemaInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "DatabaseName")
	delete(f, "MsType")
	delete(f, "DatasourceId")
	delete(f, "ConnectionType")
	delete(f, "SchemaName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableSchemaInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableSchemaInfoResponseParams struct {
	// Retrieved SchemaInfo Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchemaInfoList []*SchemaDetail `json:"SchemaInfoList,omitnil,omitempty" name:"SchemaInfoList"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableSchemaInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableSchemaInfoResponseParams `json:"Response"`
}

func (r *DescribeTableSchemaInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableSchemaInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableScoreTrendRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time Second-level Timestamp
	StatisticsStartDate *int64 `json:"StatisticsStartDate,omitnil,omitempty" name:"StatisticsStartDate"`

	// End time Second-level Timestamp
	StatisticsEndDate *int64 `json:"StatisticsEndDate,omitnil,omitempty" name:"StatisticsEndDate"`

	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`
}

type DescribeTableScoreTrendRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time Second-level Timestamp
	StatisticsStartDate *int64 `json:"StatisticsStartDate,omitnil,omitempty" name:"StatisticsStartDate"`

	// End time Second-level Timestamp
	StatisticsEndDate *int64 `json:"StatisticsEndDate,omitnil,omitempty" name:"StatisticsEndDate"`

	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
	ScoreType *string `json:"ScoreType,omitnil,omitempty" name:"ScoreType"`
}

func (r *DescribeTableScoreTrendRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableScoreTrendRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "StatisticsStartDate")
	delete(f, "StatisticsEndDate")
	delete(f, "TableId")
	delete(f, "ScoreType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTableScoreTrendRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTableScoreTrendResponseParams struct {
	// Table Scoring Trend
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *QualityScoreTrend `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTableScoreTrendResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTableScoreTrendResponseParams `json:"Response"`
}

func (r *DescribeTableScoreTrendResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTableScoreTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskAlarmRegulationsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Current Page
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria (name includes RegularStatus, AlarmLevel, AlarmIndicator, RegularName)
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting criteria (RegularId)
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Type (201 for real-time task, 202 for offline task)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type DescribeTaskAlarmRegulationsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Current Page
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of records per page
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Filter criteria (name includes RegularStatus, AlarmLevel, AlarmIndicator, RegularName)
	Filters []*Filter `json:"Filters,omitnil,omitempty" name:"Filters"`

	// Sorting criteria (RegularId)
	OrderFields []*OrderField `json:"OrderFields,omitnil,omitempty" name:"OrderFields"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Type (201 for real-time task, 202 for offline task)
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *DescribeTaskAlarmRegulationsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskAlarmRegulationsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "Filters")
	delete(f, "OrderFields")
	delete(f, "TaskId")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskAlarmRegulationsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskAlarmRegulationsResponseParams struct {
	// Alert Rule Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAlarmInfos []*TaskAlarmInfo `json:"TaskAlarmInfos,omitnil,omitempty" name:"TaskAlarmInfos"`

	// Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskAlarmRegulationsResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskAlarmRegulationsResponseParams `json:"Response"`
}

func (r *DescribeTaskAlarmRegulationsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskAlarmRegulationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskByCycleReportRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Cycle Type
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type DescribeTaskByCycleReportRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Cycle Type
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

func (r *DescribeTaskByCycleReportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskByCycleReportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Type")
	delete(f, "StartTime")
	delete(f, "EndTime")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskByCycleReportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskByCycleReportResponseParams struct {
	// Task Cycle Growth Trend Statistics
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*TaskByStatus `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskByCycleReportResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskByCycleReportResponseParams `json:"Response"`
}

func (r *DescribeTaskByCycleReportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskByCycleReportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskByCycleRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 1
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

type DescribeTaskByCycleRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// 1
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

func (r *DescribeTaskByCycleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskByCycleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "InCharge")
	delete(f, "WorkflowId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskByCycleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskByCycleResponseParams struct {
	// Periodic Task Statistics
	Data []*TaskByCycle `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskByCycleResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskByCycleResponseParams `json:"Response"`
}

func (r *DescribeTaskByCycleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskByCycleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskByStatusReportRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Time Type
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Type
	TaskType *string `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Type Name
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Aggregation Unit, H Hours
	AggregationUnit *string `json:"AggregationUnit,omitnil,omitempty" name:"AggregationUnit"`

	// Cycle
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

type DescribeTaskByStatusReportRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Time Type
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Type
	TaskType *string `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Type Name
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`

	// Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Aggregation Unit, H Hours
	AggregationUnit *string `json:"AggregationUnit,omitnil,omitempty" name:"AggregationUnit"`

	// Cycle
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

func (r *DescribeTaskByStatusReportRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskByStatusReportRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Type")
	delete(f, "TaskType")
	delete(f, "TypeName")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "AggregationUnit")
	delete(f, "CycleUnit")
	delete(f, "Status")
	delete(f, "InCharge")
	delete(f, "WorkflowId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskByStatusReportRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskByStatusReportResponseParams struct {
	// Task reporting trend indicators
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*TaskByStatus `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskByStatusReportResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskByStatusReportResponseParams `json:"Response"`
}

func (r *DescribeTaskByStatusReportResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskByStatusReportResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskLockStatusRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type: 201. stream, 202. offline
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type DescribeTaskLockStatusRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type: 201. stream, 202. offline
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *DescribeTaskLockStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskLockStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskLockStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskLockStatusResponseParams struct {
	// Task lock status information
	TaskLockStatus *TaskLockStatus `json:"TaskLockStatus,omitnil,omitempty" name:"TaskLockStatus"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskLockStatusResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskLockStatusResponseParams `json:"Response"`
}

func (r *DescribeTaskLockStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskLockStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskRunHistoryRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Search Criteria
	SearchCondition *InstanceSearchCondition `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Page Size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`
}

type DescribeTaskRunHistoryRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Search Criteria
	SearchCondition *InstanceSearchCondition `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Page Size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`
}

func (r *DescribeTaskRunHistoryRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskRunHistoryRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "SearchCondition")
	delete(f, "PageSize")
	delete(f, "PageNumber")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskRunHistoryRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskRunHistoryResponseParams struct {
	// Paginated Query Task Run History Results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *InstanceOpsInfoPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskRunHistoryResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskRunHistoryResponseParams `json:"Response"`
}

func (r *DescribeTaskRunHistoryResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskRunHistoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskScriptRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

type DescribeTaskScriptRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`
}

func (r *DescribeTaskScriptRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskScriptRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTaskScriptRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTaskScriptResponseParams struct {
	// Task Script Content
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *TaskScriptContent `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTaskScriptResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTaskScriptResponseParams `json:"Response"`
}

func (r *DescribeTaskScriptResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTaskScriptResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTemplateDimCountRequestParams struct {
	// Template Type
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeTemplateDimCountRequest struct {
	*tchttp.BaseRequest
	
	// Template Type
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeTemplateDimCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTemplateDimCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Type")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTemplateDimCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTemplateDimCountResponseParams struct {
	// Dimensional statistics results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*DimensionCount `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTemplateDimCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTemplateDimCountResponseParams `json:"Response"`
}

func (r *DescribeTemplateDimCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTemplateDimCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeThirdTaskRunLogRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance data time
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

type DescribeThirdTaskRunLogRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance data time
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

func (r *DescribeThirdTaskRunLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeThirdTaskRunLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "CurRunDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeThirdTaskRunLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeThirdTaskRunLogResponseParams struct {
	// Get third-party operation logsNote: This field may return null, indicating that no valid value can be obtained.
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeThirdTaskRunLogResponse struct {
	*tchttp.BaseResponse
	Response *DescribeThirdTaskRunLogResponseParams `json:"Response"`
}

func (r *DescribeThirdTaskRunLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeThirdTaskRunLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTopTableStatRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeTopTableStatRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeTopTableStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTopTableStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTopTableStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTopTableStatResponseParams struct {
	// Result
	Data *TopTableStat `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTopTableStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTopTableStatResponseParams `json:"Response"`
}

func (r *DescribeTopTableStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTopTableStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTrendStatRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

type DescribeTrendStatRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Start time, timestamp to the second
	BeginDate *string `json:"BeginDate,omitnil,omitempty" name:"BeginDate"`

	// End time, timestamp to the second
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`
}

func (r *DescribeTrendStatRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTrendStatRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "BeginDate")
	delete(f, "EndDate")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeTrendStatRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeTrendStatResponseParams struct {
	// Result
	Data []*RuleExecDateStat `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeTrendStatResponse struct {
	*tchttp.BaseResponse
	Response *DescribeTrendStatResponseParams `json:"Response"`
}

func (r *DescribeTrendStatResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeTrendStatResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowCanvasInfoRequestParams struct {
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeWorkflowCanvasInfoRequest struct {
	*tchttp.BaseRequest
	
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeWorkflowCanvasInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowCanvasInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WorkflowId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWorkflowCanvasInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowCanvasInfoResponseParams struct {
	// Workflow Scheduling Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *WorkflowCanvasOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWorkflowCanvasInfoResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWorkflowCanvasInfoResponseParams `json:"Response"`
}

func (r *DescribeWorkflowCanvasInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowCanvasInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowExecuteByIdRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkFlowIdList *string `json:"WorkFlowIdList,omitnil,omitempty" name:"WorkFlowIdList"`

	// Page size
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Pagination index
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

type DescribeWorkflowExecuteByIdRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkFlowIdList *string `json:"WorkFlowIdList,omitnil,omitempty" name:"WorkFlowIdList"`

	// Page size
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Pagination index
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

func (r *DescribeWorkflowExecuteByIdRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowExecuteByIdRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkFlowIdList")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWorkflowExecuteByIdRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowExecuteByIdResponseParams struct {
	// Workflow Runtime Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *WorkFlowExecuteDtoByPage `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWorkflowExecuteByIdResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWorkflowExecuteByIdResponseParams `json:"Response"`
}

func (r *DescribeWorkflowExecuteByIdResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowExecuteByIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowInfoByIdRequestParams struct {
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeWorkflowInfoByIdRequest struct {
	*tchttp.BaseRequest
	
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeWorkflowInfoByIdRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowInfoByIdRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WorkflowId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWorkflowInfoByIdRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowInfoByIdResponseParams struct {
	// Workflow Scheduling Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *WorkflowSchedulerOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWorkflowInfoByIdResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWorkflowInfoByIdResponseParams `json:"Response"`
}

func (r *DescribeWorkflowInfoByIdResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowInfoByIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowListByProjectIdRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeWorkflowListByProjectIdRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeWorkflowListByProjectIdRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowListByProjectIdRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWorkflowListByProjectIdRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowListByProjectIdResponseParams struct {
	// Obtain a list of all workflows under the project based on the project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*WorkflowCanvasOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWorkflowListByProjectIdResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWorkflowListByProjectIdResponseParams `json:"Response"`
}

func (r *DescribeWorkflowListByProjectIdResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowListByProjectIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowTaskCountRequestParams struct {
	// Workflow List
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type DescribeWorkflowTaskCountRequest struct {
	*tchttp.BaseRequest
	
	// Workflow List
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *DescribeWorkflowTaskCountRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowTaskCountRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WorkflowId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DescribeWorkflowTaskCountRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DescribeWorkflowTaskCountResponseParams struct {
	// Statistical Results
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *WorkflowTaskCountOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DescribeWorkflowTaskCountResponse struct {
	*tchttp.BaseResponse
	Response *DescribeWorkflowTaskCountResponseParams `json:"Response"`
}

func (r *DescribeWorkflowTaskCountResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DescribeWorkflowTaskCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DiagnoseProRequestParams struct {
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query Conditions (TaskId and CurRunDate need to be filled in this field for diagnosis)
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type DiagnoseProRequest struct {
	*tchttp.BaseRequest
	
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query Conditions (TaskId and CurRunDate need to be filled in this field for diagnosis)
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *DiagnoseProRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DiagnoseProRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "CheckFather")
	delete(f, "RerunType")
	delete(f, "DependentWay")
	delete(f, "SkipEventListening")
	delete(f, "SonInstanceType")
	delete(f, "SearchCondition")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DiagnoseProRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DiagnoseProResponseParams struct {
	// Result
	Data *DiagnoseRep `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DiagnoseProResponse struct {
	*tchttp.BaseResponse
	Response *DiagnoseProResponseParams `json:"Response"`
}

func (r *DiagnoseProResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DiagnoseProResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DiagnoseRep struct {
	// Diagnostic information content
	// Note: This field may return null, indicating that no valid value can be obtained.
	Content *Content `json:"Content,omitnil,omitempty" name:"Content"`

	// List of diagnostic result-related information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Table *Table `json:"Table,omitnil,omitempty" name:"Table"`
}

type DimensionCount struct {
	// Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
	// Note: This field may return null, indicating that no valid value can be obtained.
	//
	// Deprecated: DimType is deprecated.
	DimType *uint64 `json:"DimType,omitnil,omitempty" name:"DimType"`

	// Statistics value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`
}

type DimensionScore struct {
	// Dimension Scoring List
	// Note: This field may return null, indicating that no valid value can be obtained.
	DimensionScoreList []*DimensionScoreInfo `json:"DimensionScoreList,omitnil,omitempty" name:"DimensionScoreList"`
}

type DimensionScoreInfo struct {
	// Dimension NameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// WeightNote: This field may return null, indicating that no valid value can be obtained.
	Weight *float64 `json:"Weight,omitnil,omitempty" name:"Weight"`

	// Setter ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserId *int64 `json:"UserId,omitnil,omitempty" name:"UserId"`

	// Setter Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// Update Time Timestamp
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *int64 `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Number of Evaluation Forms Involved
	JoinTableNumber *int64 `json:"JoinTableNumber,omitnil,omitempty" name:"JoinTableNumber"`

	// Scoring
	Score *float64 `json:"Score,omitnil,omitempty" name:"Score"`

	// Set by User ID Str
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserIdStr *string `json:"UserIdStr,omitnil,omitempty" name:"UserIdStr"`
}

type DlcDataGovernPolicy struct {
	// Data Layout Governance Item
	// Note: This field may return null, indicating that no valid value can be obtained.
	RewriteDataPolicy *DlcRewriteDataInfo `json:"RewriteDataPolicy,omitnil,omitempty" name:"RewriteDataPolicy"`

	// Snapshot Expiration Governance Item
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExpiredSnapshotsPolicy *DlcExpiredSnapshotsInfo `json:"ExpiredSnapshotsPolicy,omitnil,omitempty" name:"ExpiredSnapshotsPolicy"`

	// Remove Isolated Files Governance Item
	// Note: This field may return null, indicating that no valid value can be obtained.
	RemoveOrphanFilesPolicy *DlcRemoveOrphanFilesInfo `json:"RemoveOrphanFilesPolicy,omitnil,omitempty" name:"RemoveOrphanFilesPolicy"`

	// Merge Metadata Manifests Governance Item
	// Note: This field may return null, indicating that no valid value can be obtained.
	MergeManifestsPolicy *DlcMergeManifestsInfo `json:"MergeManifestsPolicy,omitnil,omitempty" name:"MergeManifestsPolicy"`

	// Integration Library Rules: default (Default Inheritance), none (No Inheritance)
	// Note: This field may return null, indicating that no valid value can be obtained.
	InheritDataBase *string `json:"InheritDataBase,omitnil,omitempty" name:"InheritDataBase"`

	// Governance Rule Types, Customize: Custom Definition; Intelligence: Intelligent Governance
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleType *string `json:"RuleType,omitnil,omitempty" name:"RuleType"`

	// Governance Engine
	// Note: This field may return null, indicating that no valid value can be obtained.
	GovernEngine *string `json:"GovernEngine,omitnil,omitempty" name:"GovernEngine"`
}

type DlcExpiredSnapshotsInfo struct {
	// Whether to enable snapshot expiration governance: enable, none
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExpiredSnapshotsEnable *string `json:"ExpiredSnapshotsEnable,omitnil,omitempty" name:"ExpiredSnapshotsEnable"`

	// Name of the engine used to run snapshot expiration governance
	// Note: This field may return null, indicating that no valid value can be obtained.
	Engine *string `json:"Engine,omitnil,omitempty" name:"Engine"`

	// Number of recent snapshots to retain
	// Note: This field may return null, indicating that no valid value can be obtained.
	RetainLast *uint64 `json:"RetainLast,omitnil,omitempty" name:"RetainLast"`

	// Snapshots expired before specified days
	// Note: This field may return null, indicating that no valid value can be obtained.
	BeforeDays *uint64 `json:"BeforeDays,omitnil,omitempty" name:"BeforeDays"`

	// Number of parallel processes for cleaning up expired snapshots
	// Note: This field may return null, indicating that no valid value can be obtained.
	MaxConcurrentDeletes *uint64 `json:"MaxConcurrentDeletes,omitnil,omitempty" name:"MaxConcurrentDeletes"`

	// Snapshot expiration governance run cycle, unit: minutes
	// Note: This field may return null, indicating that no valid value can be obtained.
	IntervalMin *uint64 `json:"IntervalMin,omitnil,omitempty" name:"IntervalMin"`
}

type DlcMergeManifestsInfo struct {
	// Whether to enable merging metadata Manifests file governance items: enable, none
	// Note: This field may return null, indicating that no valid value can be obtained.
	MergeManifestsEnable *string `json:"MergeManifestsEnable,omitnil,omitempty" name:"MergeManifestsEnable"`

	// Engine name used to run merging metadata Manifests file governance items
	// Note: This field may return null, indicating that no valid value can be obtained.
	Engine *string `json:"Engine,omitnil,omitempty" name:"Engine"`

	// Merge Metadata Manifests file governance runtime cycle, in minutes
	// Note: This field may return null, indicating that no valid value can be obtained.
	IntervalMin *uint64 `json:"IntervalMin,omitnil,omitempty" name:"IntervalMin"`
}

type DlcRemoveOrphanFilesInfo struct {
	// Enable Removal of Isolated Files Governance Item: enable, none
	// Note: This field may return null, indicating that no valid value can be obtained.
	RemoveOrphanFilesEnable *string `json:"RemoveOrphanFilesEnable,omitnil,omitempty" name:"RemoveOrphanFilesEnable"`

	// Engine Name for Running Removal of Isolated Files Governance Item
	// Note: This field may return null, indicating that no valid value can be obtained.
	Engine *string `json:"Engine,omitnil,omitempty" name:"Engine"`

	// Remove Isolated Files Older Than Specified Days
	// Note: This field may return null, indicating that no valid value can be obtained.
	BeforeDays *uint64 `json:"BeforeDays,omitnil,omitempty" name:"BeforeDays"`

	// Number of Concurrent Processes for Removing Isolated Files
	// Note: This field may return null, indicating that no valid value can be obtained.
	MaxConcurrentDeletes *uint64 `json:"MaxConcurrentDeletes,omitnil,omitempty" name:"MaxConcurrentDeletes"`

	// Isolated Files Governance Run Cycle, in minutes
	// Note: This field may return null, indicating that no valid value can be obtained.
	IntervalMin *uint64 `json:"IntervalMin,omitnil,omitempty" name:"IntervalMin"`
}

type DlcRewriteDataInfo struct {
	// Whether to enable data layout governance item: enable (start), disable (do not enable, default)
	// Note: This field may return null, indicating that no valid value can be obtained.
	RewriteDataEnable *string `json:"RewriteDataEnable,omitnil,omitempty" name:"RewriteDataEnable"`

	// Engine name used to run data layout governance item
	// Note: This field may return null, indicating that no valid value can be obtained.
	Engine *string `json:"Engine,omitnil,omitempty" name:"Engine"`

	// Number of files executed by the rearrangement task
	// Note: This field may return null, indicating that no valid value can be obtained.
	MinInputFiles *uint64 `json:"MinInputFiles,omitnil,omitempty" name:"MinInputFiles"`

	// Data file size after data rearrangement, in bytes
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetFileSizeBytes *uint64 `json:"TargetFileSizeBytes,omitnil,omitempty" name:"TargetFileSizeBytes"`

	// Data layout governance runtime cycle, in minutes
	// Note: This field may return null, indicating that no valid value can be obtained.
	IntervalMin *uint64 `json:"IntervalMin,omitnil,omitempty" name:"IntervalMin"`
}

type DrInstanceOpsDto struct {
	// Task Source
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskSource *string `json:"TaskSource,omitnil,omitempty" name:"TaskSource"`

	// Orchestration Space jobId
	// Note: This field may return null, indicating that no valid value can be obtained.
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// Task Submission Record Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	RecordId *uint64 `json:"RecordId,omitnil,omitempty" name:"RecordId"`

	// Subtask record id
	// Note: This field may return null, indicating that no valid value can be obtained.
	SonRecordId *uint64 `json:"SonRecordId,omitnil,omitempty" name:"SonRecordId"`

	// Task instance Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// For orchestration space, the task id; for development space, the script id
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Script COS address
	// Note: This field may return null, indicating that no valid value can be obtained.
	RemotePath *string `json:"RemotePath,omitnil,omitempty" name:"RemotePath"`

	// Trial run content
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Task submission time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Task start time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Running duration (seconds)
	// Note: This field may return null, indicating that no valid value can be obtained.
	Duration *string `json:"Duration,omitnil,omitempty" name:"Duration"`

	// Trial run status
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// For orchestration space, the task name; for development space, the script name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Trial run submitter
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubmitUserName *string `json:"SubmitUserName,omitnil,omitempty" name:"SubmitUserName"`

	// Trial run submitter userId
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubmitUserId *string `json:"SubmitUserId,omitnil,omitempty" name:"SubmitUserId"`

	// Task TypeNote: This field may return null, indicating that no valid value can be obtained.
	TaskType *string `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Contains result set
	// Note: This field may return null, indicating that no valid value can be obtained.
	HasResultSet *bool `json:"HasResultSet,omitnil,omitempty" name:"HasResultSet"`
}

type DrInstanceOpsDtoPage struct {
	// Total Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Record List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*DrInstanceOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

// Predefined struct for user
type DryRunDIOfflineTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource Group ID
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Default 27
	TaskTypeId *uint64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`
}

type DryRunDIOfflineTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Resource Group ID
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Default 27
	TaskTypeId *uint64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`
}

func (r *DryRunDIOfflineTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DryRunDIOfflineTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "ResourceGroup")
	delete(f, "TaskTypeId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "DryRunDIOfflineTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type DryRunDIOfflineTaskResponseParams struct {
	// Data Timestamp
	CurrentRunDate *string `json:"CurrentRunDate,omitnil,omitempty" name:"CurrentRunDate"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Unique Key for Task Instance
	TaskInstanceKey *string `json:"TaskInstanceKey,omitnil,omitempty" name:"TaskInstanceKey"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type DryRunDIOfflineTaskResponse struct {
	*tchttp.BaseResponse
	Response *DryRunDIOfflineTaskResponseParams `json:"Response"`
}

func (r *DryRunDIOfflineTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *DryRunDIOfflineTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EngineTaskInfo struct {
	// Engine submission time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineSubmitTime *string `json:"EngineSubmitTime,omitnil,omitempty" name:"EngineSubmitTime"`

	// Engine execution time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeTime *string `json:"EngineExeTime,omitnil,omitempty" name:"EngineExeTime"`

	// Total execution time of the engine.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeTimes *uint64 `json:"EngineExeTimes,omitnil,omitempty" name:"EngineExeTimes"`

	// cu consumption.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CuConsume *uint64 `json:"CuConsume,omitnil,omitempty" name:"CuConsume"`

	// Resource consumption.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ResourceUsage *int64 `json:"ResourceUsage,omitnil,omitempty" name:"ResourceUsage"`

	// Engine name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineName *string `json:"EngineName,omitnil,omitempty" name:"EngineName"`

	// Engine execution status.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeStatus *string `json:"EngineExeStatus,omitnil,omitempty" name:"EngineExeStatus"`

	// Task type.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskKind *string `json:"TaskKind,omitnil,omitempty" name:"TaskKind"`

	// Task type
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskType *string `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Task SQL statement.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskContent *string `json:"TaskContent,omitnil,omitempty" name:"TaskContent"`

	// Total bytes of data scanning.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	InputBytesSum *uint64 `json:"InputBytesSum,omitnil,omitempty" name:"InputBytesSum"`

	// Total shuffle read bytes.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ShuffleReadBytesSum *uint64 `json:"ShuffleReadBytesSum,omitnil,omitempty" name:"ShuffleReadBytesSum"`

	// Total number of shuffle read lines.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ShuffleReadRecordsSum *uint64 `json:"ShuffleReadRecordsSum,omitnil,omitempty" name:"ShuffleReadRecordsSum"`

	// Total number of outputs.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	OutputRecordsSum *uint64 `json:"OutputRecordsSum,omitnil,omitempty" name:"OutputRecordsSum"`

	// Total output in bytes.
	// Note: This field may return null, indicating that no valid values can be obtained.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	OutputBytesSum *uint64 `json:"OutputBytesSum,omitnil,omitempty" name:"OutputBytesSum"`

	// Number of output files.
	// Note: This field may return null, indicating that no valid values can be obtained.
	OutputFilesNum *uint64 `json:"OutputFilesNum,omitnil,omitempty" name:"OutputFilesNum"`

	// Number of small files output.
	// Note: This field may return null, indicating that no valid values can be obtained.
	OutputSmallFilesNum *uint64 `json:"OutputSmallFilesNum,omitnil,omitempty" name:"OutputSmallFilesNum"`

	// Execution wait time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	WaitTime *uint64 `json:"WaitTime,omitnil,omitempty" name:"WaitTime"`

	// Query result time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	QueryResultTime *uint64 `json:"QueryResultTime,omitnil,omitempty" name:"QueryResultTime"`

	// Input parameters.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CmdArgs *string `json:"CmdArgs,omitnil,omitempty" name:"CmdArgs"`
}

type EventBatchCaseDTO struct {
	// Event Instance ID
	CaseId *string `json:"CaseId,omitnil,omitempty" name:"CaseId"`

	// Event
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Event Trigger Start Time
	StartDimension *string `json:"StartDimension,omitnil,omitempty" name:"StartDimension"`

	// Creation Time
	CreationTs *string `json:"CreationTs,omitnil,omitempty" name:"CreationTs"`

	// Consumer ID
	ConsumerId *string `json:"ConsumerId,omitnil,omitempty" name:"ConsumerId"`

	// Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Event Trigger End Time
	EndDimension *string `json:"EndDimension,omitnil,omitempty" name:"EndDimension"`

	// Event Cycle
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`
}

type EventCaseAuditLogOptDto struct {
	// Event Instance ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	CaseId *string `json:"CaseId,omitnil,omitempty" name:"CaseId"`

	// Event nameNote: This field may return null, indicating that no valid value can be obtained.
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// Event typeNote: This field may return null, indicating that no valid value can be obtained.
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Event Split Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`

	// Event Broadcast Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventBroadcastType *string `json:"EventBroadcastType,omitnil,omitempty" name:"EventBroadcastType"`

	// Event Instance TTL
	// Note: This field may return null, indicating that no valid value can be obtained.
	TTL *uint64 `json:"TTL,omitnil,omitempty" name:"TTL"`

	// Event Instance TTL Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	TimeUnit *string `json:"TimeUnit,omitnil,omitempty" name:"TimeUnit"`

	// Data Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Event Instance Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Event Instance Trigger Timestamp
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventTriggerTimestamp *string `json:"EventTriggerTimestamp,omitnil,omitempty" name:"EventTriggerTimestamp"`

	// Event Instance Consumption Timestamp
	// Note: This field may return null, indicating that no valid value can be obtained.
	LogTimestamp *string `json:"LogTimestamp,omitnil,omitempty" name:"LogTimestamp"`

	// Event Instance Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type EventCaseAuditLogVOCollection struct {
	// Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total PagesNote: This field may return null, indicating that no valid value can be obtained.
	TotalPage *uint64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Number of records on current page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *uint64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page NumberNote: This field may return null, indicating that no valid value can be obtained.
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page sizeNote: This field may return null, indicating that no valid value can be obtained.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Pagination Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*EventCaseAuditLogOptDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type EventCaseConsumeLogOptDto struct {
	// Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
	ConsumeLogId *string `json:"ConsumeLogId,omitnil,omitempty" name:"ConsumeLogId"`

	// Event Case ID\nNote: This field may return null, indicating that no valid value can be obtained.
	EventCaseId *string `json:"EventCaseId,omitnil,omitempty" name:"EventCaseId"`

	// Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
	ConsumerId *string `json:"ConsumerId,omitnil,omitempty" name:"ConsumerId"`

	// Consumption Timestamp\nNote: This field may return null, indicating that no valid value can be obtained.
	CreationTimestamp *string `json:"CreationTimestamp,omitnil,omitempty" name:"CreationTimestamp"`

	// Task DetailsNote: This field may return null, indicating that no valid value can be obtained.
	ConsumerDetail *TaskOpsDto `json:"ConsumerDetail,omitnil,omitempty" name:"ConsumerDetail"`
}

type EventCaseConsumeLogOptDtoCollection struct {
	// Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total Number of Pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPage *uint64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Number of Results on Current Page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *uint64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page NumberNote: This field may return null, indicating that no valid value can be obtained.
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per pageNote: This field may return null, indicating that no valid value can be obtained.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Pagination Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*EventCaseConsumeLogOptDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type EventCaseDTO struct {
	// Event Instance ID
	CaseId *string `json:"CaseId,omitnil,omitempty" name:"CaseId"`

	// Event
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Event Format
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Creation Time
	CreationTs *string `json:"CreationTs,omitnil,omitempty" name:"CreationTs"`

	// Consumer ID
	ConsumerId *string `json:"ConsumerId,omitnil,omitempty" name:"ConsumerId"`

	// Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type EventCaseOpsDto struct {
	// Case ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	CaseId *string `json:"CaseId,omitnil,omitempty" name:"CaseId"`

	// Case Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// time format
	// Note: This field may return null, indicating that no valid value can be obtained.
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreationTimestamp *string `json:"CreationTimestamp,omitnil,omitempty" name:"CreationTimestamp"`

	// Consumer ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ConsumerId *string `json:"ConsumerId,omitnil,omitempty" name:"ConsumerId"`

	// DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type EventListenerOpsDto struct {
	// Event nameNote: This field may return null, indicating that no valid value can be obtained.
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// Keyword, if it is a task, then it is the Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Trigger methodNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Event Attributes
	// Note: This field may return null, indicating that no valid value can be obtained.
	Properties *string `json:"Properties,omitnil,omitempty" name:"Properties"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreationTimestamp *string `json:"CreationTimestamp,omitnil,omitempty" name:"CreationTimestamp"`
}

type EventOpsDto struct {
	// Event nameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Event typeNote: This field may return null, indicating that no valid value can be obtained.
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Event Segmentation TypeNote: This field may return null, indicating that no valid value can be obtained.
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`

	// Event Broadcast TypeNote: This field may return null, indicating that no valid value can be obtained.
	EventBroadcastType *string `json:"EventBroadcastType,omitnil,omitempty" name:"EventBroadcastType"`

	// Data Time Format
	// Note: This field may return null, indicating that no valid value can be obtained.
	DimensionFormat *string `json:"DimensionFormat,omitnil,omitempty" name:"DimensionFormat"`

	// UptimeNote: This field may return null, indicating that no valid value can be obtained.
	TimeToLive *uint64 `json:"TimeToLive,omitnil,omitempty" name:"TimeToLive"`

	// Lifetime Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	TimeUnit *string `json:"TimeUnit,omitnil,omitempty" name:"TimeUnit"`

	// Creation Timestamp
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreationTimestamp *string `json:"CreationTimestamp,omitnil,omitempty" name:"CreationTimestamp"`

	// Owner
	// Note: This field may return null, indicating that no valid value can be obtained.
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// AttributeNote: This field may return null, indicating that no valid value can be obtained.
	Properties *string `json:"Properties,omitnil,omitempty" name:"Properties"`

	// DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Listener
	// Note: This field may return null, indicating that no valid value can be obtained.
	Listeners []*EventListenerOpsDto `json:"Listeners,omitnil,omitempty" name:"Listeners"`

	// Incident Case
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventCases []*EventCaseOpsDto `json:"EventCases,omitnil,omitempty" name:"EventCases"`
}

type FailMessage struct {
	// Unique Data Identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Failure Reason
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`
}

type FieldConfig struct {
	// Field key
	// Note: This field may return null, indicating that no valid value can be obtained.
	FieldKey *string `json:"FieldKey,omitnil,omitempty" name:"FieldKey"`

	// Field valueNote: This field may return null, indicating that no valid value can be obtained.
	FieldValue *string `json:"FieldValue,omitnil,omitempty" name:"FieldValue"`

	// Field Value Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	FieldDataType *string `json:"FieldDataType,omitnil,omitempty" name:"FieldDataType"`
}

type Filter struct {
	// Filter Field Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Filter Value List
	Values []*string `json:"Values,omitnil,omitempty" name:"Values"`
}

type FilterOptional struct {
	// Filter Field Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Filter Value List
	Values []*string `json:"Values,omitnil,omitempty" name:"Values"`
}

// Predefined struct for user
type FindAllFolderRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type FindAllFolderRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *FindAllFolderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FindAllFolderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "FindAllFolderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type FindAllFolderResponseParams struct {
	// Folder ListNote: This field may return null, indicating that no valid value can be obtained.
	FolderList []*FolderDsDto `json:"FolderList,omitnil,omitempty" name:"FolderList"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type FindAllFolderResponse struct {
	*tchttp.BaseResponse
	Response *FindAllFolderResponseParams `json:"Response"`
}

func (r *FindAllFolderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FindAllFolderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FolderDsDto struct {
	// Folder ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Folder NameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Parent Folder ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`

	// Total Workflows
	// Note: This field may return null, indicating that no valid value can be obtained.
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
	Workflows []*WorkflowCanvasOpsDto `json:"Workflows,omitnil,omitempty" name:"Workflows"`

	// Total Subfolders
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalFolders *int64 `json:"TotalFolders,omitnil,omitempty" name:"TotalFolders"`

	// Subfolder List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Folders []*FolderDsDto `json:"Folders,omitnil,omitempty" name:"Folders"`

	// Search typeNote: This field may return null, indicating that no valid value can be obtained.
	FindType *string `json:"FindType,omitnil,omitempty" name:"FindType"`
}

type FolderOpsDto struct {
	// Folder IDNote: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Folder NameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Parent Folder ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`

	// Total Workflows
	// Note: This field may return null, indicating that no valid value can be obtained.
	Total *int64 `json:"Total,omitnil,omitempty" name:"Total"`

	// Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
	Workflows []*WorkflowCanvasOpsDto `json:"Workflows,omitnil,omitempty" name:"Workflows"`

	// Total Subfolders
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalFolders *int64 `json:"TotalFolders,omitnil,omitempty" name:"TotalFolders"`

	// Subfolder List
	// Note: This field may return null, indicating that no valid value can be obtained.
	FoldersList *string `json:"FoldersList,omitnil,omitempty" name:"FoldersList"`

	// Search typeNote: This field may return null, indicating that no valid value can be obtained.
	FindType *string `json:"FindType,omitnil,omitempty" name:"FindType"`
}

// Predefined struct for user
type FreezeOpsTasksRequestParams struct {
	// Task List
	Tasks []*SimpleTaskInfo `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Whether Task Operation Notifies Downstream Task Owners
	OperateIsInform *bool `json:"OperateIsInform,omitnil,omitempty" name:"OperateIsInform"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

type FreezeOpsTasksRequest struct {
	*tchttp.BaseRequest
	
	// Task List
	Tasks []*SimpleTaskInfo `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Whether Task Operation Notifies Downstream Task Owners
	OperateIsInform *bool `json:"OperateIsInform,omitnil,omitempty" name:"OperateIsInform"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

func (r *FreezeOpsTasksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FreezeOpsTasksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Tasks")
	delete(f, "OperateIsInform")
	delete(f, "KillInstance")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "FreezeOpsTasksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type FreezeOpsTasksResponseParams struct {
	// Operation result
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type FreezeOpsTasksResponse struct {
	*tchttp.BaseResponse
	Response *FreezeOpsTasksResponseParams `json:"Response"`
}

func (r *FreezeOpsTasksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FreezeOpsTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type FreezeTasksByWorkflowIdsRequestParams struct {
	// Workflow ID List
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

type FreezeTasksByWorkflowIdsRequest struct {
	*tchttp.BaseRequest
	
	// Workflow ID List
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to terminate the generated instance
	KillInstance *bool `json:"KillInstance,omitnil,omitempty" name:"KillInstance"`
}

func (r *FreezeTasksByWorkflowIdsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FreezeTasksByWorkflowIdsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WorkflowIds")
	delete(f, "ProjectId")
	delete(f, "KillInstance")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "FreezeTasksByWorkflowIdsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type FreezeTasksByWorkflowIdsResponseParams struct {
	// Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
	Data *OperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type FreezeTasksByWorkflowIdsResponse struct {
	*tchttp.BaseResponse
	Response *FreezeTasksByWorkflowIdsResponseParams `json:"Response"`
}

func (r *FreezeTasksByWorkflowIdsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *FreezeTasksByWorkflowIdsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FunctionResource struct {
	// Resource PathNote: This field may return null, indicating that no valid value can be obtained.
	Path *string `json:"Path,omitnil,omitempty" name:"Path"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Resource Unique Identifier
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Resource MD5 Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Md5 *string `json:"Md5,omitnil,omitempty" name:"Md5"`

	// Default is HDFS
	// Note: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`
}

type FunctionTypeOrKind struct {
	// Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Function Classification English Name
	ZhName *string `json:"ZhName,omitnil,omitempty" name:"ZhName"`

	// Function Classification Chinese Name
	EnName *string `json:"EnName,omitnil,omitempty" name:"EnName"`
}

type FunctionVersion struct {
	// Version number: V0 V1 V2
	Tag *string `json:"Tag,omitnil,omitempty" name:"Tag"`

	// Submitter ID
	UserId *string `json:"UserId,omitnil,omitempty" name:"UserId"`

	// Change Type: ADD, MODIFY
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Remarks
	Comment *string `json:"Comment,omitnil,omitempty" name:"Comment"`

	// Submission Time: UTC Seconds
	Timestamp *string `json:"Timestamp,omitnil,omitempty" name:"Timestamp"`

	// Submitter Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// Version Information: json string format
	// Note: This field may return null, indicating that no valid value can be obtained.
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`
}

// Predefined struct for user
type GenHiveTableDDLSqlRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Target Database
	SinkDatabase *string `json:"SinkDatabase,omitnil,omitempty" name:"SinkDatabase"`

	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Metadata Type (MYSQL,ORACLE)
	MsType *string `json:"MsType,omitnil,omitempty" name:"MsType"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Source Library Name
	SourceDatabase *string `json:"SourceDatabase,omitnil,omitempty" name:"SourceDatabase"`

	// Source Table Name
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Target Table Metadata Type (HIVE,GBASE)
	SinkType *string `json:"SinkType,omitnil,omitempty" name:"SinkType"`

	// Source Schema Name
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`

	// Field Information of Upstream Node
	SourceFieldInfoList []*SourceFieldInfo `json:"SourceFieldInfoList,omitnil,omitempty" name:"SourceFieldInfoList"`

	// Partition Field
	Partitions []*Partition `json:"Partitions,omitnil,omitempty" name:"Partitions"`

	// Table Creation Attributes
	Properties []*Property `json:"Properties,omitnil,omitempty" name:"Properties"`

	// Table Creation Mode,0: Wizard Mode,1: ddl
	TableMode *int64 `json:"TableMode,omitnil,omitempty" name:"TableMode"`

	// DLC Table Version, v1/v2
	TableVersion *string `json:"TableVersion,omitnil,omitempty" name:"TableVersion"`

	// Whether to Upsert Writes
	UpsertFlag *bool `json:"UpsertFlag,omitnil,omitempty" name:"UpsertFlag"`

	// Table Description Information
	TableComment *string `json:"TableComment,omitnil,omitempty" name:"TableComment"`

	// Threshold for Increased Number of Files, Exceeding Value Will Trigger Small File Merge
	AddDataFiles *int64 `json:"AddDataFiles,omitnil,omitempty" name:"AddDataFiles"`

	// Threshold for Increased Number of Equality Deletes, Exceeding Value Will Trigger Small File Merge
	AddEqualityDeletes *int64 `json:"AddEqualityDeletes,omitnil,omitempty" name:"AddEqualityDeletes"`

	// Threshold for Increased Number of Position Deletes, Exceeding Value Will Trigger Small File Merge
	AddPositionDeletes *int64 `json:"AddPositionDeletes,omitnil,omitempty" name:"AddPositionDeletes"`

	// Threshold for Increased Number of Delete Files
	AddDeleteFiles *int64 `json:"AddDeleteFiles,omitnil,omitempty" name:"AddDeleteFiles"`

	// Downstream Node Data Source ID
	TargetDatasourceId *string `json:"TargetDatasourceId,omitnil,omitempty" name:"TargetDatasourceId"`

	// DLC Upsert Primary Key
	UpsertKeys []*string `json:"UpsertKeys,omitnil,omitempty" name:"UpsertKeys"`

	// DLC Table Governance Information
	TableBaseInfo *TableBaseInfo `json:"TableBaseInfo,omitnil,omitempty" name:"TableBaseInfo"`

	// Target Schema Name
	SinkSchemaName *string `json:"SinkSchemaName,omitnil,omitempty" name:"SinkSchemaName"`
}

type GenHiveTableDDLSqlRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Target Database
	SinkDatabase *string `json:"SinkDatabase,omitnil,omitempty" name:"SinkDatabase"`

	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Metadata Type (MYSQL,ORACLE)
	MsType *string `json:"MsType,omitnil,omitempty" name:"MsType"`

	// Data source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Source Library Name
	SourceDatabase *string `json:"SourceDatabase,omitnil,omitempty" name:"SourceDatabase"`

	// Source Table Name
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Target Table Metadata Type (HIVE,GBASE)
	SinkType *string `json:"SinkType,omitnil,omitempty" name:"SinkType"`

	// Source Schema Name
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`

	// Field Information of Upstream Node
	SourceFieldInfoList []*SourceFieldInfo `json:"SourceFieldInfoList,omitnil,omitempty" name:"SourceFieldInfoList"`

	// Partition Field
	Partitions []*Partition `json:"Partitions,omitnil,omitempty" name:"Partitions"`

	// Table Creation Attributes
	Properties []*Property `json:"Properties,omitnil,omitempty" name:"Properties"`

	// Table Creation Mode,0: Wizard Mode,1: ddl
	TableMode *int64 `json:"TableMode,omitnil,omitempty" name:"TableMode"`

	// DLC Table Version, v1/v2
	TableVersion *string `json:"TableVersion,omitnil,omitempty" name:"TableVersion"`

	// Whether to Upsert Writes
	UpsertFlag *bool `json:"UpsertFlag,omitnil,omitempty" name:"UpsertFlag"`

	// Table Description Information
	TableComment *string `json:"TableComment,omitnil,omitempty" name:"TableComment"`

	// Threshold for Increased Number of Files, Exceeding Value Will Trigger Small File Merge
	AddDataFiles *int64 `json:"AddDataFiles,omitnil,omitempty" name:"AddDataFiles"`

	// Threshold for Increased Number of Equality Deletes, Exceeding Value Will Trigger Small File Merge
	AddEqualityDeletes *int64 `json:"AddEqualityDeletes,omitnil,omitempty" name:"AddEqualityDeletes"`

	// Threshold for Increased Number of Position Deletes, Exceeding Value Will Trigger Small File Merge
	AddPositionDeletes *int64 `json:"AddPositionDeletes,omitnil,omitempty" name:"AddPositionDeletes"`

	// Threshold for Increased Number of Delete Files
	AddDeleteFiles *int64 `json:"AddDeleteFiles,omitnil,omitempty" name:"AddDeleteFiles"`

	// Downstream Node Data Source ID
	TargetDatasourceId *string `json:"TargetDatasourceId,omitnil,omitempty" name:"TargetDatasourceId"`

	// DLC Upsert Primary Key
	UpsertKeys []*string `json:"UpsertKeys,omitnil,omitempty" name:"UpsertKeys"`

	// DLC Table Governance Information
	TableBaseInfo *TableBaseInfo `json:"TableBaseInfo,omitnil,omitempty" name:"TableBaseInfo"`

	// Target Schema Name
	SinkSchemaName *string `json:"SinkSchemaName,omitnil,omitempty" name:"SinkSchemaName"`
}

func (r *GenHiveTableDDLSqlRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GenHiveTableDDLSqlRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "SinkDatabase")
	delete(f, "Id")
	delete(f, "MsType")
	delete(f, "DatasourceId")
	delete(f, "SourceDatabase")
	delete(f, "TableName")
	delete(f, "SinkType")
	delete(f, "SchemaName")
	delete(f, "SourceFieldInfoList")
	delete(f, "Partitions")
	delete(f, "Properties")
	delete(f, "TableMode")
	delete(f, "TableVersion")
	delete(f, "UpsertFlag")
	delete(f, "TableComment")
	delete(f, "AddDataFiles")
	delete(f, "AddEqualityDeletes")
	delete(f, "AddPositionDeletes")
	delete(f, "AddDeleteFiles")
	delete(f, "TargetDatasourceId")
	delete(f, "UpsertKeys")
	delete(f, "TableBaseInfo")
	delete(f, "SinkSchemaName")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GenHiveTableDDLSqlRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GenHiveTableDDLSqlResponseParams struct {
	// Generated DDL Statement
	DDLSql *string `json:"DDLSql,omitnil,omitempty" name:"DDLSql"`

	// Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *string `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GenHiveTableDDLSqlResponse struct {
	*tchttp.BaseResponse
	Response *GenHiveTableDDLSqlResponseParams `json:"Response"`
}

func (r *GenHiveTableDDLSqlResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GenHiveTableDDLSqlResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GeneralTaskParam struct {
	// Common Task Parameter Type, for example: SPARK_SQL
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Common Task Parameter Content, parameters that directly apply to the task. Separate different parameters with;
	// Split
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

// Predefined struct for user
type GetFileInfoRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// File pathProject Area 1470575647377821696 project, in directory f1: /datastudio/project/1470575647377821696/f1/sql1234.sql Personal Area: /datastudio/personal/sqlTTT.sql
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`
}

type GetFileInfoRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// File pathProject Area 1470575647377821696 project, in directory f1: /datastudio/project/1470575647377821696/f1/sql1234.sql Personal Area: /datastudio/personal/sqlTTT.sql
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`
}

func (r *GetFileInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetFileInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FilePath")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetFileInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetFileInfoResponseParams struct {
	// Current Script Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserFileInfo *UserFileInfo `json:"UserFileInfo,omitnil,omitempty" name:"UserFileInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetFileInfoResponse struct {
	*tchttp.BaseResponse
	Response *GetFileInfoResponseParams `json:"Response"`
}

func (r *GetFileInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetFileInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetInstanceLogRequestParams struct {
	// **Project ID**.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Unique identifier of an instance.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Lifecycle no.
	LifeRoundNum *uint64 `json:"LifeRoundNum,omitnil,omitempty" name:"LifeRoundNum"`

	// Time zone.
	// Time zone. specifies the time zone. the default value is UTC+8.
	ScheduleTimeZone *string `json:"ScheduleTimeZone,omitnil,omitempty" name:"ScheduleTimeZone"`

	// Indicates the Ip address of the executor where the log is located.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Log file.
	// When executionJobId in instance details is empty but originFileName is not empty, originFileName and brokerIp must be included in the input parameters.
	// If both executionJobId and originFileName are empty, it indicates that the instance has not been dispatched for execution or has not generated logs. for example, branch node or merge node.
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// **Execution ID**.
	// 
	// When executionJobId in instance details is not empty, executionJobId needs to be included in the input parameters. originFileName and brokerIp are not required parameters.
	ExecutionJobId *string `json:"ExecutionJobId,omitnil,omitempty" name:"ExecutionJobId"`

	// Log level.
	// Default All.
	// 
	// - Info
	// - Debug
	// - Warn
	// - Error
	// - All
	LogLevel *string `json:"LogLevel,omitnil,omitempty" name:"LogLevel"`

	// Start row number for obtaining logs.
	// The default is 1.
	StartLineNum *uint64 `json:"StartLineNum,omitnil,omitempty" name:"StartLineNum"`

	// End line number for obtaining logs.
	// The default value is 10000.
	EndLineCount *uint64 `json:"EndLineCount,omitnil,omitempty" name:"EndLineCount"`
}

type GetInstanceLogRequest struct {
	*tchttp.BaseRequest
	
	// **Project ID**.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Unique identifier of an instance.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Lifecycle no.
	LifeRoundNum *uint64 `json:"LifeRoundNum,omitnil,omitempty" name:"LifeRoundNum"`

	// Time zone.
	// Time zone. specifies the time zone. the default value is UTC+8.
	ScheduleTimeZone *string `json:"ScheduleTimeZone,omitnil,omitempty" name:"ScheduleTimeZone"`

	// Indicates the Ip address of the executor where the log is located.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Log file.
	// When executionJobId in instance details is empty but originFileName is not empty, originFileName and brokerIp must be included in the input parameters.
	// If both executionJobId and originFileName are empty, it indicates that the instance has not been dispatched for execution or has not generated logs. for example, branch node or merge node.
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// **Execution ID**.
	// 
	// When executionJobId in instance details is not empty, executionJobId needs to be included in the input parameters. originFileName and brokerIp are not required parameters.
	ExecutionJobId *string `json:"ExecutionJobId,omitnil,omitempty" name:"ExecutionJobId"`

	// Log level.
	// Default All.
	// 
	// - Info
	// - Debug
	// - Warn
	// - Error
	// - All
	LogLevel *string `json:"LogLevel,omitnil,omitempty" name:"LogLevel"`

	// Start row number for obtaining logs.
	// The default is 1.
	StartLineNum *uint64 `json:"StartLineNum,omitnil,omitempty" name:"StartLineNum"`

	// End line number for obtaining logs.
	// The default value is 10000.
	EndLineCount *uint64 `json:"EndLineCount,omitnil,omitempty" name:"EndLineCount"`
}

func (r *GetInstanceLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetInstanceLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "InstanceKey")
	delete(f, "LifeRoundNum")
	delete(f, "ScheduleTimeZone")
	delete(f, "BrokerIp")
	delete(f, "OriginFileName")
	delete(f, "ExecutionJobId")
	delete(f, "LogLevel")
	delete(f, "StartLineNum")
	delete(f, "EndLineCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetInstanceLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetInstanceLogResponseParams struct {
	// Scheduling instance details.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Data *InstanceLogVO `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetInstanceLogResponse struct {
	*tchttp.BaseResponse
	Response *GetInstanceLogResponseParams `json:"Response"`
}

func (r *GetInstanceLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetInstanceLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetIntegrationNodeColumnSchemaRequestParams struct {
	// Field Example (JSON Format)
	ColumnContent *string `json:"ColumnContent,omitnil,omitempty" name:"ColumnContent"`

	// Data Source Type MYSQL|HIVE|KAFKA|ES|MONGODB|REST_API|SYBASE|TIDB|DORIS|DM|
	DatasourceType *string `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`
}

type GetIntegrationNodeColumnSchemaRequest struct {
	*tchttp.BaseRequest
	
	// Field Example (JSON Format)
	ColumnContent *string `json:"ColumnContent,omitnil,omitempty" name:"ColumnContent"`

	// Data Source Type MYSQL|HIVE|KAFKA|ES|MONGODB|REST_API|SYBASE|TIDB|DORIS|DM|
	DatasourceType *string `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`
}

func (r *GetIntegrationNodeColumnSchemaRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetIntegrationNodeColumnSchemaRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ColumnContent")
	delete(f, "DatasourceType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetIntegrationNodeColumnSchemaRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetIntegrationNodeColumnSchemaResponseParams struct {
	// Field List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Schemas []*IntegrationNodeSchema `json:"Schemas,omitnil,omitempty" name:"Schemas"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetIntegrationNodeColumnSchemaResponse struct {
	*tchttp.BaseResponse
	Response *GetIntegrationNodeColumnSchemaResponseParams `json:"Response"`
}

func (r *GetIntegrationNodeColumnSchemaResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetIntegrationNodeColumnSchemaResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetOfflineDIInstanceListRequestParams struct {
	// Which Page
	PageIndex *uint64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Number of Items per Page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// No
	SearchCondition *SearchConditionNew `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`
}

type GetOfflineDIInstanceListRequest struct {
	*tchttp.BaseRequest
	
	// Which Page
	PageIndex *uint64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Number of Items per Page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// No
	SearchCondition *SearchConditionNew `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`
}

func (r *GetOfflineDIInstanceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetOfflineDIInstanceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "ProjectId")
	delete(f, "SearchCondition")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetOfflineDIInstanceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetOfflineDIInstanceListResponseParams struct {
	// Total number of items
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// Instance details
	List []*OfflineInstance `json:"List,omitnil,omitempty" name:"List"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetOfflineDIInstanceListResponse struct {
	*tchttp.BaseResponse
	Response *GetOfflineDIInstanceListResponseParams `json:"Response"`
}

func (r *GetOfflineDIInstanceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetOfflineDIInstanceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetOfflineInstanceListRequestParams struct {
	// Which Page
	PageIndex *string `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Number of Items per Page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// No
	SearchCondition *SearchCondition `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`
}

type GetOfflineInstanceListRequest struct {
	*tchttp.BaseRequest
	
	// Which Page
	PageIndex *string `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Number of Items per Page
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// No
	SearchCondition *SearchCondition `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`
}

func (r *GetOfflineInstanceListRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetOfflineInstanceListRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "ProjectId")
	delete(f, "SearchCondition")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetOfflineInstanceListRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetOfflineInstanceListResponseParams struct {
	// Total number of items
	Total *uint64 `json:"Total,omitnil,omitempty" name:"Total"`

	// Instance details
	List []*OfflineInstance `json:"List,omitnil,omitempty" name:"List"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetOfflineInstanceListResponse struct {
	*tchttp.BaseResponse
	Response *GetOfflineInstanceListResponseParams `json:"Response"`
}

func (r *GetOfflineInstanceListResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetOfflineInstanceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetTaskInstanceRequestParams struct {
	// **Project ID**.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Unique identifier of an instance.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Time zone.
	// Time zone. specifies the time zone. the default value is UTC+8.
	ScheduleTimeZone *string `json:"ScheduleTimeZone,omitnil,omitempty" name:"ScheduleTimeZone"`
}

type GetTaskInstanceRequest struct {
	*tchttp.BaseRequest
	
	// **Project ID**.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Unique identifier of an instance.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Time zone.
	// Time zone. specifies the time zone. the default value is UTC+8.
	ScheduleTimeZone *string `json:"ScheduleTimeZone,omitnil,omitempty" name:"ScheduleTimeZone"`
}

func (r *GetTaskInstanceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetTaskInstanceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "InstanceKey")
	delete(f, "ScheduleTimeZone")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "GetTaskInstanceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type GetTaskInstanceResponseParams struct {
	// Details of scheduling an instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Data *InstanceDetailVO `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type GetTaskInstanceResponse struct {
	*tchttp.BaseResponse
	Response *GetTaskInstanceResponseParams `json:"Response"`
}

func (r *GetTaskInstanceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *GetTaskInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceApiOpsRequest struct {
	// Single Query Condition
	Instance *InstanceOpsDto `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Sort fields, currently includes: Retry Count, Instance Data Time, Runtime Duration
	SortCol *string `json:"SortCol,omitnil,omitempty" name:"SortCol"`

	// Task ID list
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Fuzzy search by taskName
	TaskNameList []*string `json:"TaskNameList,omitnil,omitempty" name:"TaskNameList"`

	// Folder List
	FolderList []*string `json:"FolderList,omitnil,omitempty" name:"FolderList"`

	// Ascending or Descending
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// Instance Status List
	StateList []*int64 `json:"StateList,omitnil,omitempty" name:"StateList"`

	// Instance Type List
	TaskTypeList []*int64 `json:"TaskTypeList,omitnil,omitempty" name:"TaskTypeList"`

	// Cycle Type
	CycleList []*string `json:"CycleList,omitnil,omitempty" name:"CycleList"`

	// Person in Charge
	OwnerList []*string `json:"OwnerList,omitnil,omitempty" name:"OwnerList"`

	// Data Timestamp
	DateFrom *string `json:"DateFrom,omitnil,omitempty" name:"DateFrom"`

	// Data Timestamp
	DateTo *string `json:"DateTo,omitnil,omitempty" name:"DateTo"`

	// Instance Storage Time
	CreateTimeFrom *string `json:"CreateTimeFrom,omitnil,omitempty" name:"CreateTimeFrom"`

	// Instance Storage Time
	CreateTimeTo *string `json:"CreateTimeTo,omitnil,omitempty" name:"CreateTimeTo"`

	// Start Execution Time
	StartFrom *string `json:"StartFrom,omitnil,omitempty" name:"StartFrom"`

	// Start Execution Time
	StartTo *string `json:"StartTo,omitnil,omitempty" name:"StartTo"`

	// Belongs to Workflow
	WorkflowIdList []*string `json:"WorkflowIdList,omitnil,omitempty" name:"WorkflowIdList"`

	// Fuzzy search by workflowName
	WorkflowNameList []*string `json:"WorkflowNameList,omitnil,omitempty" name:"WorkflowNameList"`

	// Keyword Fuzzy Search
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// searchColumns are the list of field names to search
	SearchColumns []*string `json:"SearchColumns,omitnil,omitempty" name:"SearchColumns"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Limit
	Limit *int64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// Task Type Mapping Relationship, storing Task Type ID and Task Type Description Information
	TaskTypeMap []*TaskTypeMap `json:"TaskTypeMap,omitnil,omitempty" name:"TaskTypeMap"`

	// 0 Supplementary Entry Type 1 Periodic Instance 2 Non-periodic Instance
	InstanceType *string `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Whether it is DAG
	DagDeal *bool `json:"DagDeal,omitnil,omitempty" name:"DagDeal"`

	// 1 Parent instance 2 Child instance
	DagType *string `json:"DagType,omitnil,omitempty" name:"DagType"`

	// 1 Self-Dependency 2 Task Dependency 3 All Dependencies
	DagDependent *string `json:"DagDependent,omitnil,omitempty" name:"DagDependent"`

	// DAG Depth Default to 1, value range 1-6
	DagDepth *int64 `json:"DagDepth,omitnil,omitempty" name:"DagDepth"`

	// Tenant ID
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Inquiry based on Current Data Time or Next Data Time, default to Current Data Time
	DataTimeCycle *string `json:"DataTimeCycle,omitnil,omitempty" name:"DataTimeCycle"`

	// Resource Group ID, multiple Resource Group IDs separated by English commas
	ExecutorGroupIdList []*string `json:"ExecutorGroupIdList,omitnil,omitempty" name:"ExecutorGroupIdList"`
}

type InstanceCondition struct {
	// Execution Type
	ExecutionSpace *string `json:"ExecutionSpace,omitnil,omitempty" name:"ExecutionSpace"`

	// Task Product Type
	ProductName *string `json:"ProductName,omitnil,omitempty" name:"ProductName"`
}

type InstanceDetailVO struct {
	// Unique id of an instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Project ID.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Folder name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Workflow ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Responsible person list.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	InChargeList []*string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// Task ID
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Name
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Task cycle type.
	// Support filtering multiple items with an or relationship between conditions.
	// * O: ONEOFF_CYCLE
	// * Y: YEAR_CYCLE
	// * M: MONTH_CYCLE
	// * W: WEEK_CYCLE
	// * D: DAY_CYCLE
	// * H: HOUR_CYCLE
	// * I: MINUTE_CYCLE
	// * C: CRONTAB_CYCLE
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskCycleType *string `json:"TaskCycleType,omitnil,omitempty" name:"TaskCycleType"`

	// Task type
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskType *TaskTypeOpsDto `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Execution resource group ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Resource group name
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`

	// Standard data time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Next standard data time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	NextCurDate *string `json:"NextCurDate,omitnil,omitempty" name:"NextCurDate"`

	// Limit on the number of retries issued each time a run fails.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TryLimit *uint64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Current number of issued run attempts.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Tries *uint64 `json:"Tries,omitnil,omitempty" name:"Tries"`

	// Cumulative running times.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalRunNum *uint64 `json:"TotalRunNum,omitnil,omitempty" name:"TotalRunNum"`

	// Lifecycle no.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LifeRoundNum *uint64 `json:"LifeRoundNum,omitnil,omitempty" name:"LifeRoundNum"`

	// Instance type.
	// 
	// -0 indicates the supplementary entry type.
	// -1 indicates a periodic instance.
	// -2 indicates a non-periodic instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceType *uint64 `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Indicates the status of an instance.
	// 
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -1, 19, 22 indicate running.
	// -21: skip running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceState *uint64 `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// Planned scheduling time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	SchedulerTime *string `json:"SchedulerTime,omitnil,omitempty" name:"SchedulerTime"`

	// Start time of operation.
	// Note: This field may return null, indicating that no valid values can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Indicates the operation completion time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Time spent.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`

	// Instance running trigger type.
	// 
	// -RERUN indicates rerunning.
	// -ADDITION indicates supplementary recording.
	// -PERIODIC indicates a period.
	// -APERIODIC indicates non-periodic.
	// -RERUN_SKIP_RUN indicates re-run - empty run.
	// -ADDITION_SKIP_RUN indicates a supplementary run - empty run.
	// -PERIODIC_SKIP_RUN indicates an empty run in a periodic cycle.
	// -APERIODIC_SKIP_RUN indicates a non-periodic empty run.
	// -MANUAL_TRIGGER indicates manual triggering.
	// -RERUN_MANUAL_TRIGGER indicates manual triggering - rerun.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceRunType *string `json:"InstanceRunType,omitnil,omitempty" name:"InstanceRunType"`

	// Dispatch execution ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExecutionJobId *string `json:"ExecutionJobId,omitnil,omitempty" name:"ExecutionJobId"`

	// Instance lifecycle list.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceLifeCycleList []*InstanceLifeCycleVO `json:"InstanceLifeCycleList,omitnil,omitempty" name:"InstanceLifeCycleList"`

	// The last execution log of the instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LatestLog *InstanceLogVO `json:"LatestLog,omitnil,omitempty" name:"LatestLog"`
}

type InstanceDownloadLogInfo struct {
	// File NameNote: This field may return null, indicating that no valid value can be obtained.
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// File URL
	// Note: This field may return null, indicating that no valid value can be obtained.
	FileUrl *string `json:"FileUrl,omitnil,omitempty" name:"FileUrl"`
}

type InstanceLifeCycleOpsDto struct {
	// Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	// Note: This field may return null, indicating that no valid value can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Instance Lifecycle Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	LifeRound *int64 `json:"LifeRound,omitnil,omitempty" name:"LifeRound"`

	// Run Type Rerun/Supplement/Periodic/Non-periodic
	// Note: This field may return null, indicating that no valid value can be obtained.
	RunType *string `json:"RunType,omitnil,omitempty" name:"RunType"`

	// Number of Reruns
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tries *int64 `json:"Tries,omitnil,omitempty" name:"Tries"`

	// Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
	InstanceLifeDetailDtoList []*InstanceLifeDetailDto `json:"InstanceLifeDetailDtoList,omitnil,omitempty" name:"InstanceLifeDetailDtoList"`

	// Runner Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	RunnerState *string `json:"RunnerState,omitnil,omitempty" name:"RunnerState"`

	// Error codeNote: This field may return null, indicating that no valid value can be obtained.
	ErrorDesc *string `json:"ErrorDesc,omitnil,omitempty" name:"ErrorDesc"`

	// Error Alert Level
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorCodeLevel *string `json:"ErrorCodeLevel,omitnil,omitempty" name:"ErrorCodeLevel"`

	// Instance Log Summary
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceLogListOpsDto *InstanceLogInfo `json:"InstanceLogListOpsDto,omitnil,omitempty" name:"InstanceLogListOpsDto"`

	// Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
	InstanceState *string `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`
}

type InstanceLifeCycleVO struct {
	// Unique identifier of the instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Instance status.
	// 
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -1, 19, 22 indicate running.
	// -21: skip running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceState *uint64 `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// Lifecycle no.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LifeRoundNum *uint64 `json:"LifeRoundNum,omitnil,omitempty" name:"LifeRoundNum"`

	// Instance running trigger type.
	// 
	// -RERUN indicates rerunning.
	// -ADDITION indicates supplementary recording.
	// -PERIODIC indicates a period.
	// -APERIODIC indicates non-periodic.
	// -RERUN_SKIP_RUN means empty run for re-run.
	// -ADDITION_SKIP_RUN indicates a supplementary run - empty run.
	// -PERIODIC_SKIP_RUN indicates an empty run in a periodic cycle.
	// -APERIODIC_SKIP_RUN indicates a non-periodic empty run.
	// -MANUAL_TRIGGER indicates manual triggering.
	// -RERUN_MANUAL_TRIGGER indicates manual triggering - rerun.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RunType *string `json:"RunType,omitnil,omitempty" name:"RunType"`

	// Number of retries after failure.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Tries *uint64 `json:"Tries,omitnil,omitempty" name:"Tries"`

	// List of instance lifecycle.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LifeCycleDetailList []*InstanceLifeDetailDto `json:"LifeCycleDetailList,omitnil,omitempty" name:"LifeCycleDetailList"`

	// Instance code file.
	// The file content specifies the code used for running the execution instance this time. only some tasks support it.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeFileName *string `json:"CodeFileName,omitnil,omitempty" name:"CodeFileName"`

	// Dispatch execution ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExecutionJobId *string `json:"ExecutionJobId,omitnil,omitempty" name:"ExecutionJobId"`

	// The execution node where the log resides.
	// Note: This field may return null, indicating that no valid values can be obtained.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Log file name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// Instance log type.
	// 
	// -run: indicates the state of functioning. 
	// -kill: terminates.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LogType *string `json:"LogType,omitnil,omitempty" name:"LogType"`

	// Time spent.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`
}

type InstanceLifeDetailDto struct {
	// Indicates the status of an instance.
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -1, 19, 22 indicate running.
	// -21: skip running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	// Note: This field may return null, indicating that no valid values can be obtained.
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// Start Time of the State
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Instance lifecycle phase status.
	// 
	// -WAIT_UPSTREAM indicates waiting for event/upstream status.
	// -WAIT_RUN indicates a waiting for running status.
	// -RUNNING indicates a running state.
	// -COMPLETE indicates the final state - completed.
	// -FAILED indicates the final state - retry on failure.
	// -EXPIRED indicates the final state - failure.
	// -SKIP_RUNNING indicates the final state - a branch skipped by the upstream branch node.
	// -HISTORY indicates compatibility with historical instances.
	// Note: This field may return null, indicating that no valid values can be obtained.
	DetailState *string `json:"DetailState,omitnil,omitempty" name:"DetailState"`

	// End Time of the State
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type InstanceList struct {
	// Time Consumed
	// Note: This field may return null, indicating that no valid value can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`

	// Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Cycle type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Whether to Supplement
	// Note: This field may return null, indicating that no valid value can be obtained.
	DoFlag *int64 `json:"DoFlag,omitnil,omitempty" name:"DoFlag"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// LogNote: This field may return null, indicating that no valid value can be obtained.
	LastLog *string `json:"LastLog,omitnil,omitempty" name:"LastLog"`

	// Scheduling plan
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerDesc *string `json:"SchedulerDesc,omitnil,omitempty" name:"SchedulerDesc"`

	// Start startup time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED| COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
	// Note: This field may return null, indicating that no valid value can be obtained.
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Number of trial runs
	// Note: This field may return null, indicating that no valid value can be obtained.
	TryLimit *int64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`
}

type InstanceLogInfo struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Number of trial runs
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tries *string `json:"Tries,omitnil,omitempty" name:"Tries"`

	// Log Update Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastUpdate *string `json:"LastUpdate,omitnil,omitempty" name:"LastUpdate"`

	// Log Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// File sizeNote: This field may return null, indicating that no valid value can be obtained.
	FileSize *string `json:"FileSize,omitnil,omitempty" name:"FileSize"`

	// File Name including Full Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// Log Creation Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Instance Log Type, run: running; kill: termination
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceLogType *string `json:"InstanceLogType,omitnil,omitempty" name:"InstanceLogType"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Runtime Duration
	// Note: This field may return null, indicating that no valid value can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`

	// Instance Status COMPLETED completed FAILED failed retry EXPIRED failed RUNNING running
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceStatus *string `json:"InstanceStatus,omitnil,omitempty" name:"InstanceStatus"`

	// Instance Code File, absence indicates the corresponding code file does not exist, possibly due to the executor not being upgraded/certain types of tasks having no code.
	// Note: This field may return null, indicating that no valid value can be obtained.
	CodeFileName *string `json:"CodeFileName,omitnil,omitempty" name:"CodeFileName"`

	// Extended Attributes
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtensionInfo []*AttributeItemDTO `json:"ExtensionInfo,omitnil,omitempty" name:"ExtensionInfo"`
}

type InstanceLogInfoOpsDto struct {
	// Instance running log
	// Note: This field may return null, indicating that no valid value can be obtained.
	LogInfo *string `json:"LogInfo,omitnil,omitempty" name:"LogInfo"`

	// The Yarn log address submitted by the instance run
	// Note: This field may return null, indicating that no valid value can be obtained.
	YarnLogInfo []*string `json:"YarnLogInfo,omitnil,omitempty" name:"YarnLogInfo"`

	// The datax log generated by the instance run
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataLogInfo *string `json:"DataLogInfo,omitnil,omitempty" name:"DataLogInfo"`

	// Third-party Task Execution Log
	// Note: This field may return null, indicating that no valid value can be obtained.
	ThirdTaskRunLogInfo *string `json:"ThirdTaskRunLogInfo,omitnil,omitempty" name:"ThirdTaskRunLogInfo"`

	// Third-party Task Log Link Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	ThirdTaskLogUrlDesc *string `json:"ThirdTaskLogUrlDesc,omitnil,omitempty" name:"ThirdTaskLogUrlDesc"`

	// Number of Log Lines
	// Note: This field may return null, indicating that no valid value can be obtained.
	LineCount *int64 `json:"LineCount,omitnil,omitempty" name:"LineCount"`
}

type InstanceLogList struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Maximum number of retriesNote: This field may return null, indicating that no valid value can be obtained.
	Tries *string `json:"Tries,omitnil,omitempty" name:"Tries"`

	// Last Updated TimeNote: This field may return null, indicating that no valid value can be obtained.
	LastUpdate *string `json:"LastUpdate,omitnil,omitempty" name:"LastUpdate"`

	// Node IP
	// Note: This field may return null, indicating that no valid value can be obtained.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// File sizeNote: This field may return null, indicating that no valid value can be obtained.
	FileSize *string `json:"FileSize,omitnil,omitempty" name:"FileSize"`

	// Original File Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OriginFileName *string `json:"OriginFileName,omitnil,omitempty" name:"OriginFileName"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Instance Log Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceLogType *string `json:"InstanceLogType,omitnil,omitempty" name:"InstanceLogType"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Time Consumed
	// Note: This field may return null, indicating that no valid value can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`
}

type InstanceLogVO struct {
	// Unique id of an instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Project ID.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// **Instance status**.
	// 
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -1, 19, 22 indicate running.
	// -21: skip running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceState *uint64 `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// Instance running trigger type.
	// 
	// -RERUN indicates rerunning.
	// -ADDITION indicates supplementary recording.
	// -PERIODIC indicates a period.
	// -APERIODIC indicates non-periodic.
	// -RERUN_SKIP_RUN means empty run for re-run.
	// -ADDITION_SKIP_RUN indicates a supplementary run - empty run.
	// -PERIODIC_SKIP_RUN indicates an empty run in a periodic cycle.
	// -APERIODIC_SKIP_RUN indicates a non-periodic empty run.
	// -MANUAL_TRIGGER indicates manual triggering.
	// -RERUN_MANUAL_TRIGGER indicates manual triggering - rerun.
	// Note: This field may return null, indicating that no valid values can be obtained.
	RunType *string `json:"RunType,omitnil,omitempty" name:"RunType"`

	// Start time of running.
	// Note: This field may return null, indicating that no valid values can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Indicates the operation completion time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Run code content.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeInfo *string `json:"CodeInfo,omitnil,omitempty" name:"CodeInfo"`

	// File size for running code.
	// Unit: KB.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CodeFileSize *string `json:"CodeFileSize,omitnil,omitempty" name:"CodeFileSize"`

	// Log node information.
	// Note: This field may return null, indicating that no valid values can be obtained.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Log content.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LogInfo *string `json:"LogInfo,omitnil,omitempty" name:"LogInfo"`

	// Log file size.
	// KB.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LogFileSize *string `json:"LogFileSize,omitnil,omitempty" name:"LogFileSize"`

	// Row count of returned logs this time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	LineCount *uint64 `json:"LineCount,omitnil,omitempty" name:"LineCount"`

	// Execute platform log pagination query parameters, transparently input for each request. the value is an empty string when querying the first page.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExtInfo *string `json:"ExtInfo,omitnil,omitempty" name:"ExtInfo"`

	// Paging query for logs. indicates whether it is the last page.
	// Note: This field may return null, indicating that no valid values can be obtained.
	IsEnd *bool `json:"IsEnd,omitnil,omitempty" name:"IsEnd"`
}

type InstanceNodeInfo struct {
	// Read from node SOURCE Write to node SINK
	// Note: This field may return null, indicating that no valid value can be obtained.
	NodeType *string `json:"NodeType,omitnil,omitempty" name:"NodeType"`

	// Node IDNote: This field may return null, indicating that no valid value can be obtained.
	NodeId *string `json:"NodeId,omitnil,omitempty" name:"NodeId"`

	// Node nameNote: This field may return null, indicating that no valid value can be obtained.
	NodeName *string `json:"NodeName,omitnil,omitempty" name:"NodeName"`
}

type InstanceOpsDto struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Workflow ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Owner
	// Note: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Data Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Next Data Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	NextCurDate *string `json:"NextCurDate,omitnil,omitempty" name:"NextCurDate"`

	// Running Priority
	// Note: This field may return null, indicating that no valid value can be obtained.
	RunPriority *uint64 `json:"RunPriority,omitnil,omitempty" name:"RunPriority"`

	// Number of Attempts
	// Note: This field may return null, indicating that no valid value can be obtained.
	TryLimit *uint64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Current Running Times
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tries *uint64 `json:"Tries,omitnil,omitempty" name:"Tries"`

	// Total Retry Attempts
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalRunNum *uint64 `json:"TotalRunNum,omitnil,omitempty" name:"TotalRunNum"`

	// Whether to Supplement
	// Note: This field may return null, indicating that no valid value can be obtained.
	DoFlag *uint64 `json:"DoFlag,omitnil,omitempty" name:"DoFlag"`

	// Whether it is a Retry
	// Note: This field may return null, indicating that no valid value can be obtained.
	RedoFlag *uint64 `json:"RedoFlag,omitnil,omitempty" name:"RedoFlag"`

	// Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// Run Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuntimeBroker *string `json:"RuntimeBroker,omitnil,omitempty" name:"RuntimeBroker"`

	// Reason for Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorDesc *string `json:"ErrorDesc,omitnil,omitempty" name:"ErrorDesc"`

	// Task TypeNote: This field may return null, indicating that no valid value can be obtained.
	TaskType *TaskTypeOpsDto `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Dependency Judgment Completion Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	DependenceFulfillTime *string `json:"DependenceFulfillTime,omitnil,omitempty" name:"DependenceFulfillTime"`

	// First Dependency Judgment Pass Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstDependenceFulfillTime *string `json:"FirstDependenceFulfillTime,omitnil,omitempty" name:"FirstDependenceFulfillTime"`

	// Initial startup time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstStartTime *string `json:"FirstStartTime,omitnil,omitempty" name:"FirstStartTime"`

	// Start startup time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Operation completion time
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Time Consumed
	// Note: This field may return null, indicating that no valid value can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`

	// Elapsed time (ms)
	// Note: This field may return null, indicating that no valid value can be obtained.
	CostMillisecond *uint64 `json:"CostMillisecond,omitnil,omitempty" name:"CostMillisecond"`

	// Maximum operation duration
	// Note: This field may return null, indicating that no valid value can be obtained.
	MaxCostTime *uint64 `json:"MaxCostTime,omitnil,omitempty" name:"MaxCostTime"`

	// Minimum operation duration
	// Note: This field may return null, indicating that no valid value can be obtained.
	MinCostTime *uint64 `json:"MinCostTime,omitnil,omitempty" name:"MinCostTime"`

	// Average operation duration
	// Note: This field may return null, indicating that no valid value can be obtained.
	AvgCostTime *float64 `json:"AvgCostTime,omitnil,omitempty" name:"AvgCostTime"`

	// Recent logs
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastLog *string `json:"LastLog,omitnil,omitempty" name:"LastLog"`

	// Scheduling Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerDateTime *string `json:"SchedulerDateTime,omitnil,omitempty" name:"SchedulerDateTime"`

	// Last scheduling time
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastSchedulerDateTime *string `json:"LastSchedulerDateTime,omitnil,omitempty" name:"LastSchedulerDateTime"`

	// Last update event
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastUpdate *string `json:"LastUpdate,omitnil,omitempty" name:"LastUpdate"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Branch, Dependency Relationship and,or
	// Note: This field may return null, indicating that no valid value can be obtained.
	DependencyRel *string `json:"DependencyRel,omitnil,omitempty" name:"DependencyRel"`

	// Execution space
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionSpace *string `json:"ExecutionSpace,omitnil,omitempty" name:"ExecutionSpace"`

	// Ignore events
	// Note: This field may return null, indicating that no valid value can be obtained.
	IgnoreEvent *bool `json:"IgnoreEvent,omitnil,omitempty" name:"IgnoreEvent"`

	// Virtual Task Instance
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`

	// Folder ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Folder Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Recursive Instance Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	SonList *string `json:"SonList,omitnil,omitempty" name:"SonList"`

	// Product Business Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProductName *string `json:"ProductName,omitnil,omitempty" name:"ProductName"`

	// Resource Group
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Resource Group Specified Execution Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceInstanceId *string `json:"ResourceInstanceId,omitnil,omitempty" name:"ResourceInstanceId"`

	// Resource Queue
	// Note: This field may return null, indicating that no valid value can be obtained.
	YarnQueue *string `json:"YarnQueue,omitnil,omitempty" name:"YarnQueue"`

	// Scheduling Plan
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerDesc *string `json:"SchedulerDesc,omitnil,omitempty" name:"SchedulerDesc"`

	// Latest Submission Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstSubmitTime *string `json:"FirstSubmitTime,omitnil,omitempty" name:"FirstSubmitTime"`

	// First Execution Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstRunTime *string `json:"FirstRunTime,omitnil,omitempty" name:"FirstRunTime"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project nameNote: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Tenant ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Instance Identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Resource Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Resource Group Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`

	// Associated Instance Information.
	// Note: This field may return null, indicating that no valid value can be obtained.
	RelatedInstanceList []*InstanceOpsDto `json:"RelatedInstanceList,omitnil,omitempty" name:"RelatedInstanceList"`

	// Associated Instance Information Quantity, not strongly associated with RelatedInstanceList.
	// Note: This field may return null, indicating that no valid value can be obtained.
	RelatedInstanceSize *int64 `json:"RelatedInstanceSize,omitnil,omitempty" name:"RelatedInstanceSize"`

	// ownerId
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// User ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserId *string `json:"UserId,omitnil,omitempty" name:"UserId"`

	// Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
	InstanceLifeCycleOpsDto *InstanceLifeCycleOpsDto `json:"InstanceLifeCycleOpsDto,omitnil,omitempty" name:"InstanceLifeCycleOpsDto"`

	// Automatic Retry Attempts
	// Note: This field may return null, indicating that no valid value can be obtained.
	RetryAttempts *uint64 `json:"RetryAttempts,omitnil,omitempty" name:"RetryAttempts"`

	// Urgently Removed Dependency Parent Instance List
	// Note: This field may return null, indicating that no valid value can be obtained.
	DeletedFatherList []*string `json:"DeletedFatherList,omitnil,omitempty" name:"DeletedFatherList"`

	// Cyclic Dependency Associated Instances
	// Note: This field may return null, indicating that no valid value can be obtained.
	CirculateInstanceList []*InstanceOpsDto `json:"CirculateInstanceList,omitnil,omitempty" name:"CirculateInstanceList"`
}

type InstanceOpsInfoPage struct {
	// Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Record list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*InstanceOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type InstancePageVO struct {
	// Total number of entries.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total number of pages.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalPage *uint64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Page number
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Entries per page.
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total number of pages.
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageCount *uint64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Data List
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	Items []*InstanceVO `json:"Items,omitnil,omitempty" name:"Items"`
}

type InstanceSearchCondition struct {
	// Task Scheduling Cycle Type
	CycleList []*string `json:"CycleList,omitnil,omitempty" name:"CycleList"`

	// Start time
	DateFrom *string `json:"DateFrom,omitnil,omitempty" name:"DateFrom"`

	// Expire Time
	DateTo *string `json:"DateTo,omitnil,omitempty" name:"DateTo"`

	// Instance Filtering Conditions
	Instance *InstanceCondition `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Fuzzy Query Keywords
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Sorting Method
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// Sort Fields
	SortCol *string `json:"SortCol,omitnil,omitempty" name:"SortCol"`

	// Instance Status Type
	StateList []*string `json:"StateList,omitnil,omitempty" name:"StateList"`
}

type InstanceStatisticInfo struct {
	// Instance Status Trend Statistics
	// Note: This field may return null, indicating that no valid value can be obtained.
	CountList []*uint64 `json:"CountList,omitnil,omitempty" name:"CountList"`

	// Instance Status Trend Time Segmentation
	// Note: This field may return null, indicating that no valid value can be obtained.
	TimeList []*string `json:"TimeList,omitnil,omitempty" name:"TimeList"`

	// Instance Status Identification: WAITING_RUNNING, KILLING, FAILED, FAILED_TRYING, SUCCEED, respectively indicate waiting for execution, terminating, failed, trying again, successful, used for Instance Status Distribution and Instance Status Trend
	InstanceStatus *string `json:"InstanceStatus,omitnil,omitempty" name:"InstanceStatus"`

	// Used for Instance Status Distribution Count
	InstanceCount *uint64 `json:"InstanceCount,omitnil,omitempty" name:"InstanceCount"`

	// Current Display Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ShowTime *string `json:"ShowTime,omitnil,omitempty" name:"ShowTime"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReportTime *string `json:"ReportTime,omitnil,omitempty" name:"ReportTime"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`
}

type InstanceVO struct {
	// Unique identifier of an instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`

	// Project ID.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder ID.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Folder name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Workflow ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Responsible person list.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	InChargeList []*string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// Task ID
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Name
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Task type
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskType *TaskTypeOpsDto `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Task cycle type.
	// Supports filtering multiple conditions with an or relationship between them.
	// * O: ONEOFF_CYCLE
	// * Y: YEAR_CYCLE
	// * M: MONTH_CYCLE
	// * W: WEEK_CYCLE
	// * D: DAY_CYCLE
	// * H: HOUR_CYCLE
	// * I: MINUTE_CYCLE
	// * C: CRONTAB_CYCLE
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskCycleType *string `json:"TaskCycleType,omitnil,omitempty" name:"TaskCycleType"`

	// Standard data time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Specifies the limit on the number of retries issued each time a running failure occurs.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TryLimit *uint64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Number of retries after failure.
	// Will be reset to 0 and then recounted when triggered for execution by once again manually rerunning or using a supplementary entry instance and other methods.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Tries *uint64 `json:"Tries,omitnil,omitempty" name:"Tries"`

	// Cumulative running times.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalRunNum *uint64 `json:"TotalRunNum,omitnil,omitempty" name:"TotalRunNum"`

	// Instance type.
	// 
	// -0 indicates the supplementary entry type.
	// -1 indicates a periodic instance.
	// -2 indicates a non-periodic instance.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceType *uint64 `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Indicates the status of an instance.
	// 
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -[1, 19, 22]: running.
	// -[21] indicates skipping running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceState *uint64 `json:"InstanceState,omitnil,omitempty" name:"InstanceState"`

	// Start time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Operation completion time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Time spent.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CostTime *string `json:"CostTime,omitnil,omitempty" name:"CostTime"`

	// Planned scheduling time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	SchedulerTime *string `json:"SchedulerTime,omitnil,omitempty" name:"SchedulerTime"`

	// Execution resource group ID.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Resource group name
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`
}

type IntegrationInstanceLog struct {
	// Task log information
	// Note: This field may return null, indicating that no valid value can be obtained.
	LogInfo *string `json:"LogInfo,omitnil,omitempty" name:"LogInfo"`
}

type IntegrationNodeDetail struct {
	// Integration Node Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Integration Node Type
	NodeType *string `json:"NodeType,omitnil,omitempty" name:"NodeType"`

	// Node Data Source Type
	DataSourceType *string `json:"DataSourceType,omitnil,omitempty" name:"DataSourceType"`

	// Node Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Node Configuration Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Config []*RecordField `json:"Config,omitnil,omitempty" name:"Config"`

	// Node Extension Configuration Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Node Schema
	// Note: This field may return null, indicating that no valid value can be obtained.
	Schema []*IntegrationNodeSchema `json:"Schema,omitnil,omitempty" name:"Schema"`

	// Node Mapping
	// Note: This field may return null, indicating that no valid value can be obtained.
	NodeMapping *IntegrationNodeMapping `json:"NodeMapping,omitnil,omitempty" name:"NodeMapping"`

	// owner uin
	OwnerUin *string `json:"OwnerUin,omitnil,omitempty" name:"OwnerUin"`
}

type IntegrationNodeInfo struct {
	// Integration Node ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Task ID of the Integrated Node
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Integration Node Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Integration Node Type, INPUT: Input Node, OUTPUT: Output Node
	NodeType *string `json:"NodeType,omitnil,omitempty" name:"NodeType"`

	// Node Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
	DataSourceType *string `json:"DataSourceType,omitnil,omitempty" name:"DataSourceType"`

	// Node Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data source IDNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Node Configuration Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Config []*RecordField `json:"Config,omitnil,omitempty" name:"Config"`

	// Node Extension Configuration Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Node Schema
	// Note: This field may return null, indicating that no valid value can be obtained.
	Schema []*IntegrationNodeSchema `json:"Schema,omitnil,omitempty" name:"Schema"`

	// Node Mapping
	// Note: This field may return null, indicating that no valid value can be obtained.
	NodeMapping *IntegrationNodeMapping `json:"NodeMapping,omitnil,omitempty" name:"NodeMapping"`

	// Belonging User AppId, Display Fields Non-passed
	AppId *string `json:"AppId,omitnil,omitempty" name:"AppId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Creator UIN, Display Fields Non-passed
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreatorUin *string `json:"CreatorUin,omitnil,omitempty" name:"CreatorUin"`

	// Operator UIN, Display Fields Non-passed
	// Note: This field may return null, indicating that no valid value can be obtained.
	OperatorUin *string `json:"OperatorUin,omitnil,omitempty" name:"OperatorUin"`

	// owner uin Display Fields Non-passed
	OwnerUin *string `json:"OwnerUin,omitnil,omitempty" name:"OwnerUin"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`
}

type IntegrationNodeMapping struct {
	// Source Node ID
	SourceId *string `json:"SourceId,omitnil,omitempty" name:"SourceId"`

	// Target Node ID
	SinkId *string `json:"SinkId,omitnil,omitempty" name:"SinkId"`

	// Source Node Schema
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceSchema []*IntegrationNodeSchema `json:"SourceSchema,omitnil,omitempty" name:"SourceSchema"`

	// Node Schema Mapping
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchemaMappings []*IntegrationNodeSchemaMapping `json:"SchemaMappings,omitnil,omitempty" name:"SchemaMappings"`

	// Node Mapping Extended Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`
}

type IntegrationNodeSchema struct {
	// Schema ID Random Unique
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Schema Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Schema Type
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Schema Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`

	// Schema Extended Attributes
	// Note: This field may return null, indicating that no valid value can be obtained.
	Properties []*RecordField `json:"Properties,omitnil,omitempty" name:"Properties"`

	// Schema Alias
	// Note: This field may return null, indicating that no valid value can be obtained.
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// Field Remarks
	// Note: This field may return null, indicating that no valid value can be obtained.
	Comment *string `json:"Comment,omitnil,omitempty" name:"Comment"`
}

type IntegrationNodeSchemaMapping struct {
	// Task Node Source Schema ID
	SourceSchemaId *string `json:"SourceSchemaId,omitnil,omitempty" name:"SourceSchemaId"`

	// Task Node Target Schema ID
	SinkSchemaId *string `json:"SinkSchemaId,omitnil,omitempty" name:"SinkSchemaId"`
}

type IntegrationStatisticsTrendResult struct {
	// Statistical Attribute Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	StatisticName []*string `json:"StatisticName,omitnil,omitempty" name:"StatisticName"`

	// Statistical Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	StatisticValue []*int64 `json:"StatisticValue,omitnil,omitempty" name:"StatisticValue"`

	// Statistical Item
	// Note: This field may return null, indicating that no valid value can be obtained.
	StatisticType *string `json:"StatisticType,omitnil,omitempty" name:"StatisticType"`
}

type IntegrationTaskInfo struct {
	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Task Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Synchronization Type 1. Solution (Whole Database Migration), 2. Single Table Synchronization
	SyncType *int64 `json:"SyncType,omitnil,omitempty" name:"SyncType"`

	// 201. Real-time, 202. Offline
	TaskType *int64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Workflow ID of Task
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Scheduling ID (oceanus or us etc. Job ID), not a mandatory field
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScheduleTaskId *string `json:"ScheduleTaskId,omitnil,omitempty" name:"ScheduleTaskId"`

	// InLong Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskGroupId *string `json:"TaskGroupId,omitnil,omitempty" name:"TaskGroupId"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Creator UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreatorUin *string `json:"CreatorUin,omitnil,omitempty" name:"CreatorUin"`

	// Operator UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	OperatorUin *string `json:"OperatorUin,omitnil,omitempty" name:"OperatorUin"`

	// owner uin
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerUin *string `json:"OwnerUin,omitnil,omitempty" name:"OwnerUin"`

	// Application ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	AppId *string `json:"AppId,omitnil,omitempty" name:"AppId"`

	// 1: not started | 2: In operation | 3: Running | 4: Suspension | 5: Task Stopping | 6: Stop | 7: Execution Failure | 20: Abnormal | 21: Unknown |
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *int64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Node list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Nodes []*IntegrationNodeInfo `json:"Nodes,omitnil,omitempty" name:"Nodes"`

	// Execution Resource ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorId *string `json:"ExecutorId,omitnil,omitempty" name:"ExecutorId"`

	// Task configuration information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Config []*RecordField `json:"Config,omitnil,omitempty" name:"Config"`

	// Task extension configuration information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Task execution context information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecuteContext []*RecordField `json:"ExecuteContext,omitnil,omitempty" name:"ExecuteContext"`

	// Node Mapping
	// Note: This field may return null, indicating that no valid value can be obtained.
	Mappings []*IntegrationNodeMapping `json:"Mappings,omitnil,omitempty" name:"Mappings"`

	// Task configuration mode, 0: Canvas 1: Form 3: Script
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskMode *string `json:"TaskMode,omitnil,omitempty" name:"TaskMode"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	Incharge *string `json:"Incharge,omitnil,omitempty" name:"Incharge"`

	// Offline new parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	OfflineTaskAddEntity *OfflineTaskAddParam `json:"OfflineTaskAddEntity,omitnil,omitempty" name:"OfflineTaskAddEntity"`

	// group name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`

	// inlong manager url
	// Note: This field may return null, indicating that no valid value can be obtained.
	InLongManagerUrl *string `json:"InLongManagerUrl,omitnil,omitempty" name:"InLongManagerUrl"`

	// stream id
	// Note: This field may return null, indicating that no valid value can be obtained.
	InLongStreamId *string `json:"InLongStreamId,omitnil,omitempty" name:"InLongStreamId"`

	// version
	// Note: This field may return null, indicating that no valid value can be obtained.
	InLongManagerVersion *string `json:"InLongManagerVersion,omitnil,omitempty" name:"InLongManagerVersion"`

	// inlong dataproxy url
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataProxyUrl []*string `json:"DataProxyUrl,omitnil,omitempty" name:"DataProxyUrl"`

	// Whether the task version has been submitted for operation and maintenance
	// Note: This field may return null, indicating that no valid value can be obtained.
	Submit *bool `json:"Submit,omitnil,omitempty" name:"Submit"`

	// Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
	// Note: This field may return null, indicating that no valid value can be obtained.
	InputDatasourceType *string `json:"InputDatasourceType,omitnil,omitempty" name:"InputDatasourceType"`

	// Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
	// Note: This field may return null, indicating that no valid value can be obtained.
	OutputDatasourceType *string `json:"OutputDatasourceType,omitnil,omitempty" name:"OutputDatasourceType"`

	// Number of reads
	// Note: This field may return null, indicating that no valid value can be obtained.
	NumRecordsIn *int64 `json:"NumRecordsIn,omitnil,omitempty" name:"NumRecordsIn"`

	// Number of writes
	// Note: This field may return null, indicating that no valid value can be obtained.
	NumRecordsOut *int64 `json:"NumRecordsOut,omitnil,omitempty" name:"NumRecordsOut"`

	// Read latency
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReaderDelay *float64 `json:"ReaderDelay,omitnil,omitempty" name:"ReaderDelay"`

	// Restart Times
	// Note: This field may return null, indicating that no valid value can be obtained.
	NumRestarts *int64 `json:"NumRestarts,omitnil,omitempty" name:"NumRestarts"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Task Update Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Last task run time
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastRunTime *string `json:"LastRunTime,omitnil,omitempty" name:"LastRunTime"`

	// Task stop time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StopTime *string `json:"StopTime,omitnil,omitempty" name:"StopTime"`

	// Job Submitted?
	// Note: This field may return null, indicating that no valid value can be obtained.
	HasVersion *bool `json:"HasVersion,omitnil,omitempty" name:"HasVersion"`

	// Is the task locked?
	// Note: This field may return null, indicating that no valid value can be obtained.
	Locked *bool `json:"Locked,omitnil,omitempty" name:"Locked"`

	// Task Locked By
	// Note: This field may return null, indicating that no valid value can be obtained.
	Locker *string `json:"Locker,omitnil,omitempty" name:"Locker"`

	// Resource Consumption
	// Note: This field may return null, indicating that no valid value can be obtained.
	RunningCu *float64 `json:"RunningCu,omitnil,omitempty" name:"RunningCu"`

	// Associated Alert Rules for the Task
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAlarmRegularList []*string `json:"TaskAlarmRegularList,omitnil,omitempty" name:"TaskAlarmRegularList"`

	// Real-time task resource layering status: 0:Ongoing,1:Success,2:Failed
	// Note: This field may return null, indicating that no valid value can be obtained.
	SwitchResource *int64 `json:"SwitchResource,omitnil,omitempty" name:"SwitchResource"`

	// Real-time task reading phase: 0:Full Full,1:Partial Full,2:Full Incremental
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReadPhase *int64 `json:"ReadPhase,omitnil,omitempty" name:"ReadPhase"`

	// Real-time Task Version Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceVersion *int64 `json:"InstanceVersion,omitnil,omitempty" name:"InstanceVersion"`

	// Offline task imported into orchestration space Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ArrangeSpaceTaskId *string `json:"ArrangeSpaceTaskId,omitnil,omitempty" name:"ArrangeSpaceTaskId"`

	// Offline Task Status Differentiation 1.Not Submitted 2.Submitted 3.Exported
	// Note: This field may return null, indicating that no valid value can be obtained.
	OfflineTaskStatus *int64 `json:"OfflineTaskStatus,omitnil,omitempty" name:"OfflineTaskStatus"`
}

// Predefined struct for user
type KillOpsMakePlanInstancesRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`
}

type KillOpsMakePlanInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Supplemental Plan ID
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`
}

func (r *KillOpsMakePlanInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *KillOpsMakePlanInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "PlanId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "KillOpsMakePlanInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type KillOpsMakePlanInstancesResponseParams struct {
	// Batch Operation Result
	Data *BatchOperateResultOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type KillOpsMakePlanInstancesResponse struct {
	*tchttp.BaseResponse
	Response *KillOpsMakePlanInstancesResponseParams `json:"Response"`
}

func (r *KillOpsMakePlanInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *KillOpsMakePlanInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type KillScheduleInstancesRequestParams struct {
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type KillScheduleInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *KillScheduleInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *KillScheduleInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "CheckFather")
	delete(f, "RerunType")
	delete(f, "DependentWay")
	delete(f, "SkipEventListening")
	delete(f, "SonInstanceType")
	delete(f, "SearchCondition")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "KillScheduleInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type KillScheduleInstancesResponseParams struct {
	// Result
	Data *BatchOperateResultOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type KillScheduleInstancesResponse struct {
	*tchttp.BaseResponse
	Response *KillScheduleInstancesResponseParams `json:"Response"`
}

func (r *KillScheduleInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *KillScheduleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LineageParamRecord struct {
	// Field name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Field valueNote: This field may return null, indicating that no valid value can be obtained.
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type LinkOpsDto struct {
	// Edge ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Edge key
	// Note: This field may return null, indicating that no valid value can be obtained.
	LinkKey *string `json:"LinkKey,omitnil,omitempty" name:"LinkKey"`

	// Source node of the edge
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskFrom *string `json:"TaskFrom,omitnil,omitempty" name:"TaskFrom"`

	// Target node of the edge
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskTo *string `json:"TaskTo,omitnil,omitempty" name:"TaskTo"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Dependency Relationship Between Parent and Child TasksNote: This field may return null, indicating that no valid value can be obtained.
	LinkDependencyType *string `json:"LinkDependencyType,omitnil,omitempty" name:"LinkDependencyType"`

	// Dependency offset between parent and child tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	Offset *string `json:"Offset,omitnil,omitempty" name:"Offset"`

	// Type of edge
	// Note: This field may return null, indicating that no valid value can be obtained.
	LinkType *string `json:"LinkType,omitnil,omitempty" name:"LinkType"`

	// Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`
}

// Predefined struct for user
type ListInstancesRequestParams struct {
	// **Project ID**.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Instance plan scheduling time.
	// Filter start time. the time format is yyyy-MM-dd HH:MM:ss.
	ScheduleTimeFrom *string `json:"ScheduleTimeFrom,omitnil,omitempty" name:"ScheduleTimeFrom"`

	// Instance plan scheduling time.
	// Filter expiration time. time format: yyyy-MM-dd HH:MM:ss.
	ScheduleTimeTo *string `json:"ScheduleTimeTo,omitnil,omitempty" name:"ScheduleTimeTo"`

	// Page number, integer.
	// Use in conjunction with pageSize and cannot be less than 1. the default value is 1.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per page, integer.
	// Use in conjunction with pageNumber and should not exceed 200. default value: 10.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Field used to sort query results.
	// 
	// -SCHEDULE_DATE indicates the planned scheduling time.
	// -START_TIME indicates the start execution time of an instance.
	// -END_TIME indicates the execution end time of the instance.
	// -COST_TIME indicates the execution duration of an instance.
	SortColumn *string `json:"SortColumn,omitnil,omitempty" name:"SortColumn"`

	// Instance sorting order.
	// 
	// - ASC 
	// - DESC
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`

	// Instance type.
	// 
	// -0 indicates the supplementary entry type.
	// -1 indicates a periodic instance.
	// -2 indicates a non-periodic instance.
	InstanceType *uint64 `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Instance execution status.
	// Support filtering multiple items with an "or" relationship between conditions.
	// 
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -1, 19, 22 indicate running.
	// -[21] indicates skipping running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	InstanceStateList []*uint64 `json:"InstanceStateList,omitnil,omitempty" name:"InstanceStateList"`

	// **Task type Id** specifies the identifier for the task type.
	// 
	// -Supports filtering multiple items with an or relationship between conditions.
	// -You can use the DescribeAllTaskType API to obtain all task types supported by the project.
	TaskTypeIdList []*uint64 `json:"TaskTypeIdList,omitnil,omitempty" name:"TaskTypeIdList"`

	// Task cycle type.
	// Supports filtering multiple conditions with an or relationship between them.
	// * O: ONEOFF_CYCLE
	// * Y: YEAR_CYCLE
	// * M: MONTH_CYCLE
	// * W: WEEK_CYCLE
	// * D: DAY_CYCLE
	// * H: HOUR_CYCLE
	// * I: MINUTE_CYCLE
	// * C: CRONTAB_CYCLE
	TaskCycleList []*string `json:"TaskCycleList,omitnil,omitempty" name:"TaskCycleList"`

	// Task name or task ID.
	// Supports fuzzy search filtering. multiple items are separated by english commas.
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Task owner.
	// Support filtering multiple items with an or relationship between conditions.
	InChargeList []*string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// File to which the task belongs.
	// Supports filtering multiple conditions with an or relationship between them.
	// The FindAllFolder API can be used to obtain the folder list under a project.
	TaskFolderIdList []*string `json:"TaskFolderIdList,omitnil,omitempty" name:"TaskFolderIdList"`

	// **Associated workflow of the task**.
	// Supports filtering multiple conditions with an or relationship between them.
	// The workflow list under a project can be obtained through the DescribeOpsWorkflows api.
	WorkflowIdList []*string `json:"WorkflowIdList,omitnil,omitempty" name:"WorkflowIdList"`

	// Execution resource group Id.
	// Supports filtering multiple conditions with an or relationship between them.
	// The scheduling resource group list under the project can be obtained through the DescribeNormalSchedulerExecutorGroups api.
	// The DescribeNormalIntegrationExecutorGroups API can be used to obtain the list of all integration resource groups under a project.
	ExecutorGroupIdList []*string `json:"ExecutorGroupIdList,omitnil,omitempty" name:"ExecutorGroupIdList"`

	// **Start time**.
	// Filter start time. the time format is yyyy-MM-dd HH:MM:ss.
	StartTimeFrom *string `json:"StartTimeFrom,omitnil,omitempty" name:"StartTimeFrom"`

	// **Start time**.
	// Filter expiration time. time format: yyyy-MM-dd HH:MM:ss.
	StartTimeTo *string `json:"StartTimeTo,omitnil,omitempty" name:"StartTimeTo"`

	// Time zone.
	// Time zone. specifies the time zone. the default value is UTC+8.
	ScheduleTimeZone *string `json:"ScheduleTimeZone,omitnil,omitempty" name:"ScheduleTimeZone"`
}

type ListInstancesRequest struct {
	*tchttp.BaseRequest
	
	// **Project ID**.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Instance plan scheduling time.
	// Filter start time. the time format is yyyy-MM-dd HH:MM:ss.
	ScheduleTimeFrom *string `json:"ScheduleTimeFrom,omitnil,omitempty" name:"ScheduleTimeFrom"`

	// Instance plan scheduling time.
	// Filter expiration time. time format: yyyy-MM-dd HH:MM:ss.
	ScheduleTimeTo *string `json:"ScheduleTimeTo,omitnil,omitempty" name:"ScheduleTimeTo"`

	// Page number, integer.
	// Use in conjunction with pageSize and cannot be less than 1. the default value is 1.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Number of items per page, integer.
	// Use in conjunction with pageNumber and should not exceed 200. default value: 10.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Field used to sort query results.
	// 
	// -SCHEDULE_DATE indicates the planned scheduling time.
	// -START_TIME indicates the start execution time of an instance.
	// -END_TIME indicates the execution end time of the instance.
	// -COST_TIME indicates the execution duration of an instance.
	SortColumn *string `json:"SortColumn,omitnil,omitempty" name:"SortColumn"`

	// Instance sorting order.
	// 
	// - ASC 
	// - DESC
	SortType *string `json:"SortType,omitnil,omitempty" name:"SortType"`

	// Instance type.
	// 
	// -0 indicates the supplementary entry type.
	// -1 indicates a periodic instance.
	// -2 indicates a non-periodic instance.
	InstanceType *uint64 `json:"InstanceType,omitnil,omitempty" name:"InstanceType"`

	// Instance execution status.
	// Support filtering multiple items with an "or" relationship between conditions.
	// 
	// -Indicates waiting for event.
	// -[12] indicates waiting for upstream.
	// -[6, 7, 9, 10, 18] indicates awaiting execution.
	// -1, 19, 22 indicate running.
	// -[21] indicates skipping running.
	// -[3] indicates retry on failure.
	// -[8, 4, 5, 13] indicates a failure.
	// -[2] indicates a success.
	InstanceStateList []*uint64 `json:"InstanceStateList,omitnil,omitempty" name:"InstanceStateList"`

	// **Task type Id** specifies the identifier for the task type.
	// 
	// -Supports filtering multiple items with an or relationship between conditions.
	// -You can use the DescribeAllTaskType API to obtain all task types supported by the project.
	TaskTypeIdList []*uint64 `json:"TaskTypeIdList,omitnil,omitempty" name:"TaskTypeIdList"`

	// Task cycle type.
	// Supports filtering multiple conditions with an or relationship between them.
	// * O: ONEOFF_CYCLE
	// * Y: YEAR_CYCLE
	// * M: MONTH_CYCLE
	// * W: WEEK_CYCLE
	// * D: DAY_CYCLE
	// * H: HOUR_CYCLE
	// * I: MINUTE_CYCLE
	// * C: CRONTAB_CYCLE
	TaskCycleList []*string `json:"TaskCycleList,omitnil,omitempty" name:"TaskCycleList"`

	// Task name or task ID.
	// Supports fuzzy search filtering. multiple items are separated by english commas.
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Task owner.
	// Support filtering multiple items with an or relationship between conditions.
	InChargeList []*string `json:"InChargeList,omitnil,omitempty" name:"InChargeList"`

	// File to which the task belongs.
	// Supports filtering multiple conditions with an or relationship between them.
	// The FindAllFolder API can be used to obtain the folder list under a project.
	TaskFolderIdList []*string `json:"TaskFolderIdList,omitnil,omitempty" name:"TaskFolderIdList"`

	// **Associated workflow of the task**.
	// Supports filtering multiple conditions with an or relationship between them.
	// The workflow list under a project can be obtained through the DescribeOpsWorkflows api.
	WorkflowIdList []*string `json:"WorkflowIdList,omitnil,omitempty" name:"WorkflowIdList"`

	// Execution resource group Id.
	// Supports filtering multiple conditions with an or relationship between them.
	// The scheduling resource group list under the project can be obtained through the DescribeNormalSchedulerExecutorGroups api.
	// The DescribeNormalIntegrationExecutorGroups API can be used to obtain the list of all integration resource groups under a project.
	ExecutorGroupIdList []*string `json:"ExecutorGroupIdList,omitnil,omitempty" name:"ExecutorGroupIdList"`

	// **Start time**.
	// Filter start time. the time format is yyyy-MM-dd HH:MM:ss.
	StartTimeFrom *string `json:"StartTimeFrom,omitnil,omitempty" name:"StartTimeFrom"`

	// **Start time**.
	// Filter expiration time. time format: yyyy-MM-dd HH:MM:ss.
	StartTimeTo *string `json:"StartTimeTo,omitnil,omitempty" name:"StartTimeTo"`

	// Time zone.
	// Time zone. specifies the time zone. the default value is UTC+8.
	ScheduleTimeZone *string `json:"ScheduleTimeZone,omitnil,omitempty" name:"ScheduleTimeZone"`
}

func (r *ListInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ListInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "ScheduleTimeFrom")
	delete(f, "ScheduleTimeTo")
	delete(f, "PageNumber")
	delete(f, "PageSize")
	delete(f, "SortColumn")
	delete(f, "SortType")
	delete(f, "InstanceType")
	delete(f, "InstanceStateList")
	delete(f, "TaskTypeIdList")
	delete(f, "TaskCycleList")
	delete(f, "Keyword")
	delete(f, "InChargeList")
	delete(f, "TaskFolderIdList")
	delete(f, "WorkflowIdList")
	delete(f, "ExecutorGroupIdList")
	delete(f, "StartTimeFrom")
	delete(f, "StartTimeTo")
	delete(f, "ScheduleTimeZone")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ListInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ListInstancesResponseParams struct {
	// Instance result set.
	Data *InstancePageVO `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ListInstancesResponse struct {
	*tchttp.BaseResponse
	Response *ListInstancesResponseParams `json:"Response"`
}

func (r *ListInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ListInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type LockIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type LockIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *LockIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *LockIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "LockIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type LockIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type LockIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *LockIntegrationTaskResponseParams `json:"Response"`
}

func (r *LockIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *LockIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LogContent struct {
	// Log Timestamp, in milliseconds
	// Note: This field may return null, indicating that no valid value can be obtained.
	Time *uint64 `json:"Time,omitnil,omitempty" name:"Time"`

	// Log Package ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	PkgId *string `json:"PkgId,omitnil,omitempty" name:"PkgId"`

	// Log content
	Log *string `json:"Log,omitnil,omitempty" name:"Log"`
}

type LogContentInfo struct {
	// Log contentNote: This field may return null, indicating that no valid value can be obtained.
	Log *string `json:"Log,omitnil,omitempty" name:"Log"`

	// Log group Id\nNote: This field may return null, indicating that no valid value can be obtained.
	PkgId *string `json:"PkgId,omitnil,omitempty" name:"PkgId"`

	// Log ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	PkgLogId *string `json:"PkgLogId,omitnil,omitempty" name:"PkgLogId"`

	// TimeNote: This field may return null, indicating that no valid value can be obtained.
	Time *uint64 `json:"Time,omitnil,omitempty" name:"Time"`

	// Container Name the Log Belongs To
	// Note: This field may return null, indicating that no valid value can be obtained.
	ContainerName *string `json:"ContainerName,omitnil,omitempty" name:"ContainerName"`
}

type MakePlanInstanceOpsDtoCollection struct {
	// Total Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total Number of Pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPage *int64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Number of Records on Current Page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *int64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page NumberNote: This field may return null, indicating that no valid value can be obtained.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page SizeNote: This field may return null, indicating that no valid value can be obtained.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Record List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*InstanceOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type MakePlanOpsDto struct {
	// Supplement Plan ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	PlanId *string `json:"PlanId,omitnil,omitempty" name:"PlanId"`

	// Supplement Plan Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	MakeName *string `json:"MakeName,omitnil,omitempty" name:"MakeName"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Check Parent Task Status for Supplement
	// Note: This field may return null, indicating that no valid value can be obtained.
	CheckParent *bool `json:"CheckParent,omitnil,omitempty" name:"CheckParent"`

	// Use Original Task Self-Dependency Configuration
	// Note: This field may return null, indicating that no valid value can be obtained.
	SameSelfDependType *bool `json:"SameSelfDependType,omitnil,omitempty" name:"SameSelfDependType"`

	// Concurrency, effective when SameSelfDependType is false
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParallelNum *int64 `json:"ParallelNum,omitnil,omitempty" name:"ParallelNum"`

	// Modify Supplement Instance Generation Period
	// Note: This field may return null, indicating that no valid value can be obtained.
	SameCycle *bool `json:"SameCycle,omitnil,omitempty" name:"SameCycle"`

	// Scheduling Cycle Conversion Method - Original Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceTaskCycle *string `json:"SourceTaskCycle,omitnil,omitempty" name:"SourceTaskCycle"`

	// Scheduling Cycle Conversion Method - Target Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetTaskCycle *string `json:"TargetTaskCycle,omitnil,omitempty" name:"TargetTaskCycle"`

	// Scheduling Cycle Conversion Method - Specific Time for Target Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetTaskAction *int64 `json:"TargetTaskAction,omitnil,omitempty" name:"TargetTaskAction"`

	// Supplement Instance From Definition Parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	MapParamList []*StrToStrMap `json:"MapParamList,omitnil,omitempty" name:"MapParamList"`

	// Creator ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreatorId *string `json:"CreatorId,omitnil,omitempty" name:"CreatorId"`

	// Creator
	// Note: This field may return null, indicating that no valid value can be obtained.
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Supplementary Task ID Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskIdList []*string `json:"TaskIdList,omitnil,omitempty" name:"TaskIdList"`

	// Supplementary Plan Date Range
	// Note: This field may return null, indicating that no valid value can be obtained.
	MakeDatetimeList []*CreateMakeDatetimeInfo `json:"MakeDatetimeList,omitnil,omitempty" name:"MakeDatetimeList"`

	// Supplementary Plan Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// Supplementary Designated Scheduling Resource Group (ID)
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerResourceGroup *string `json:"SchedulerResourceGroup,omitnil,omitempty" name:"SchedulerResourceGroup"`

	// Supplementary Scheduled Resource Group Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerResourceGroupName *string `json:"SchedulerResourceGroupName,omitnil,omitempty" name:"SchedulerResourceGroupName"`

	// Supplementary Designated Integration Resource Group (ID)
	// Note: This field may return null, indicating that no valid value can be obtained.
	IntegrationResourceGroup *string `json:"IntegrationResourceGroup,omitnil,omitempty" name:"IntegrationResourceGroup"`

	// Supplementary Integrated Resource Group Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	IntegrationResourceGroupName *string `json:"IntegrationResourceGroupName,omitnil,omitempty" name:"IntegrationResourceGroupName"`

	// Number of Supplementary Plan Tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskCount *int64 `json:"TaskCount,omitnil,omitempty" name:"TaskCount"`

	// Percentage of Supplementary Plan Instances Completed
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompletePercent *int64 `json:"CompletePercent,omitnil,omitempty" name:"CompletePercent"`

	// Percentage of Supplementary Plan Instances Successful
	// Note: This field may return null, indicating that no valid value can be obtained.
	SuccessPercent *int64 `json:"SuccessPercent,omitnil,omitempty" name:"SuccessPercent"`

	// Check Parent Task Type for Supplementary. Value range:
	// <li> NONE: Do not check any </li>
	// <li> ALL: Check all upstream parent tasks </li>
	// <li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
	// Note: This field may return null, indicating that no valid value can be obtained.
	CheckParentType *string `json:"CheckParentType,omitnil,omitempty" name:"CheckParentType"`
}

type MakePlanOpsDtoCollection struct {
	// Total Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total number of records
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPage *int64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Number of records on current page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *int64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Record List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*MakePlanOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type MakePlanTaskOpsDto struct {
	// Basic task informationNote: This field may return null, indicating that no valid value can be obtained.
	TaskBaseInfo *TaskOpsDto `json:"TaskBaseInfo,omitnil,omitempty" name:"TaskBaseInfo"`

	// Supplemental instances already generated for this task
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceCount *int64 `json:"InstanceCount,omitnil,omitempty" name:"InstanceCount"`

	// Supplementary Task Instance Completion Percentage
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompletePercent *int64 `json:"CompletePercent,omitnil,omitempty" name:"CompletePercent"`

	// Supplementary Task Instance Success Percentage
	// Note: This field may return null, indicating that no valid value can be obtained.
	SuccessPercent *int64 `json:"SuccessPercent,omitnil,omitempty" name:"SuccessPercent"`

	// Estimated Total Number of Instances Generated, as generation is asynchronous, -1 indicates instances are not fully generated yet
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceTotalCount *int64 `json:"InstanceTotalCount,omitnil,omitempty" name:"InstanceTotalCount"`
}

type MakePlanTaskOpsDtoCollection struct {
	// Total Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total Number of Pages
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalPage *int64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Number of Records on Current Page
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageCount *int64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Page Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	// Note: This field may return null, indicating that no valid value can be obtained.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Record List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*MakePlanTaskOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

// Predefined struct for user
type ModifyApproveStatusRequestParams struct {
	// Approval Form IDs
	ApproveIds []*string `json:"ApproveIds,omitnil,omitempty" name:"ApproveIds"`

	// Approval Remarks
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`
}

type ModifyApproveStatusRequest struct {
	*tchttp.BaseRequest
	
	// Approval Form IDs
	ApproveIds []*string `json:"ApproveIds,omitnil,omitempty" name:"ApproveIds"`

	// Approval Remarks
	Remark *string `json:"Remark,omitnil,omitempty" name:"Remark"`

	// Status
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`
}

func (r *ModifyApproveStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyApproveStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ApproveIds")
	delete(f, "Remark")
	delete(f, "Status")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyApproveStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyApproveStatusResponseParams struct {
	// Modify Approval Form Status
	Data []*ApproveModify `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyApproveStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyApproveStatusResponseParams `json:"Response"`
}

func (r *ModifyApproveStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyApproveStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyDataSourceRequestParams struct {
	// Data Source Name, cannot be empty under the same SpaceName
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Source Category: Binding Engine, Binding Database
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Data Source Type: enumerated values
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Data Source ID
	ID *uint64 `json:"ID,omitnil,omitempty" name:"ID"`

	// Configuration Information Extension of Business Data Source
	BizParams *string `json:"BizParams,omitnil,omitempty" name:"BizParams"`

	// Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Data source description information
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source Display Name, for visual inspection
	Display *string `json:"Display,omitnil,omitempty" name:"Display"`

	// If the data source list is bound to a database, then it is the database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Instance ID of the data source engine, e.g., CDB Instance ID
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Name of the business space to which the data source belongs
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Collection Status
	Collect *string `json:"Collect,omitnil,omitempty" name:"Collect"`

	// Project ID
	OwnerProjectId *string `json:"OwnerProjectId,omitnil,omitempty" name:"OwnerProjectId"`

	// Project name
	OwnerProjectName *string `json:"OwnerProjectName,omitnil,omitempty" name:"OwnerProjectName"`

	// Project Chinese Name
	OwnerProjectIdent *string `json:"OwnerProjectIdent,omitnil,omitempty" name:"OwnerProjectIdent"`

	// cos bucket
	COSBucket *string `json:"COSBucket,omitnil,omitempty" name:"COSBucket"`

	// cos region
	COSRegion *string `json:"COSRegion,omitnil,omitempty" name:"COSRegion"`

	// Operation Item ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data Source Development Environment Configuration
	DevelopmentParams *string `json:"DevelopmentParams,omitnil,omitempty" name:"DevelopmentParams"`
}

type ModifyDataSourceRequest struct {
	*tchttp.BaseRequest
	
	// Data Source Name, cannot be empty under the same SpaceName
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Source Category: Binding Engine, Binding Database
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Data Source Type: enumerated values
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Data Source ID
	ID *uint64 `json:"ID,omitnil,omitempty" name:"ID"`

	// Configuration Information Extension of Business Data Source
	BizParams *string `json:"BizParams,omitnil,omitempty" name:"BizParams"`

	// Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Data source description information
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Data Source Display Name, for visual inspection
	Display *string `json:"Display,omitnil,omitempty" name:"Display"`

	// If the data source list is bound to a database, then it is the database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Instance ID of the data source engine, e.g., CDB Instance ID
	Instance *string `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Name of the business space to which the data source belongs
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Collection Status
	Collect *string `json:"Collect,omitnil,omitempty" name:"Collect"`

	// Project ID
	OwnerProjectId *string `json:"OwnerProjectId,omitnil,omitempty" name:"OwnerProjectId"`

	// Project name
	OwnerProjectName *string `json:"OwnerProjectName,omitnil,omitempty" name:"OwnerProjectName"`

	// Project Chinese Name
	OwnerProjectIdent *string `json:"OwnerProjectIdent,omitnil,omitempty" name:"OwnerProjectIdent"`

	// cos bucket
	COSBucket *string `json:"COSBucket,omitnil,omitempty" name:"COSBucket"`

	// cos region
	COSRegion *string `json:"COSRegion,omitnil,omitempty" name:"COSRegion"`

	// Operation Item ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data Source Development Environment Configuration
	DevelopmentParams *string `json:"DevelopmentParams,omitnil,omitempty" name:"DevelopmentParams"`
}

func (r *ModifyDataSourceRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyDataSourceRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Name")
	delete(f, "Category")
	delete(f, "Type")
	delete(f, "ID")
	delete(f, "BizParams")
	delete(f, "Params")
	delete(f, "Description")
	delete(f, "Display")
	delete(f, "DatabaseName")
	delete(f, "Instance")
	delete(f, "Status")
	delete(f, "ClusterId")
	delete(f, "Collect")
	delete(f, "OwnerProjectId")
	delete(f, "OwnerProjectName")
	delete(f, "OwnerProjectIdent")
	delete(f, "COSBucket")
	delete(f, "COSRegion")
	delete(f, "ProjectId")
	delete(f, "DevelopmentParams")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyDataSourceRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyDataSourceResponseParams struct {
	// Was it successful
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyDataSourceResponse struct {
	*tchttp.BaseResponse
	Response *ModifyDataSourceResponseParams `json:"Response"`
}

func (r *ModifyDataSourceResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyDataSourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyDimensionWeightRequestParams struct {
	// Weight Information List
	WeightInfoList []*WeightInfo `json:"WeightInfoList,omitnil,omitempty" name:"WeightInfoList"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Refresh Historical Data
	Refresh *bool `json:"Refresh,omitnil,omitempty" name:"Refresh"`
}

type ModifyDimensionWeightRequest struct {
	*tchttp.BaseRequest
	
	// Weight Information List
	WeightInfoList []*WeightInfo `json:"WeightInfoList,omitnil,omitempty" name:"WeightInfoList"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to Refresh Historical Data
	Refresh *bool `json:"Refresh,omitnil,omitempty" name:"Refresh"`
}

func (r *ModifyDimensionWeightRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyDimensionWeightRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "WeightInfoList")
	delete(f, "ProjectId")
	delete(f, "Refresh")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyDimensionWeightRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyDimensionWeightResponseParams struct {
	// Update Weight Successfully?
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyDimensionWeightResponse struct {
	*tchttp.BaseResponse
	Response *ModifyDimensionWeightResponseParams `json:"Response"`
}

func (r *ModifyDimensionWeightResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyDimensionWeightResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyDsFolderRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder Name
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Parent Folder ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`
}

type ModifyDsFolderRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder Name
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Parent Folder ID
	ParentsFolderId *string `json:"ParentsFolderId,omitnil,omitempty" name:"ParentsFolderId"`
}

func (r *ModifyDsFolderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyDsFolderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "FolderName")
	delete(f, "FolderId")
	delete(f, "ParentsFolderId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyDsFolderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyDsFolderResponseParams struct {
	// true indicates success, false indicates failure
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyDsFolderResponse struct {
	*tchttp.BaseResponse
	Response *ModifyDsFolderResponseParams `json:"Response"`
}

func (r *ModifyDsFolderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyDsFolderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyExecStrategyRequestParams struct {
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Monitoring Type 1. Not Configured, 2. Associated Production Scheduling, 3. Offline Cycle Detection
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`

	// Compute Queue
	ExecQueue *string `json:"ExecQueue,omitnil,omitempty" name:"ExecQueue"`

	// Execution Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Execution Resource Group Name
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`

	// Associated Production Scheduling Task List
	Tasks []*ProdSchedulerTask `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Offline Cycle Mode, Effective Date - Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Offline Cycle Mode, Effective Date - End Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Offline Cycle Mode, Scheduling Period 
	// MINUTE_CYCLE:I,
	// HOUR_CYCLE:H,
	// DAY_CYCLE:D,
	// WEEK_CYCLE:W,
	// MONTH_CYCLE:M
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Offline Cycle Mode, Scheduling Step
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Offline Cycle Mode, Specified Time
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Delayed Execution Time, Unit: Minute, Optional: <0-1439
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Running Execution Engine, Requests Default Execution Engine of the Data Source if Not Specified
	ExecEngineType *string `json:"ExecEngineType,omitnil,omitempty" name:"ExecEngineType"`

	// Trigger scenario
	TriggerTypes []*string `json:"TriggerTypes,omitnil,omitempty" name:"TriggerTypes"`
}

type ModifyExecStrategyRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Monitoring Type 1. Not Configured, 2. Associated Production Scheduling, 3. Offline Cycle Detection
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`

	// Compute Queue
	ExecQueue *string `json:"ExecQueue,omitnil,omitempty" name:"ExecQueue"`

	// Execution Resource Group ID
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Execution Resource Group Name
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`

	// Associated Production Scheduling Task List
	Tasks []*ProdSchedulerTask `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Offline Cycle Mode, Effective Date - Start Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Offline Cycle Mode, Effective Date - End Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Offline Cycle Mode, Scheduling Period 
	// MINUTE_CYCLE:I,
	// HOUR_CYCLE:H,
	// DAY_CYCLE:D,
	// WEEK_CYCLE:W,
	// MONTH_CYCLE:M
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Offline Cycle Mode, Scheduling Step
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Offline Cycle Mode, Specified Time
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Delayed Execution Time, Unit: Minute, Optional: <0-1439
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Running Execution Engine, Requests Default Execution Engine of the Data Source if Not Specified
	ExecEngineType *string `json:"ExecEngineType,omitnil,omitempty" name:"ExecEngineType"`

	// Trigger scenario
	TriggerTypes []*string `json:"TriggerTypes,omitnil,omitempty" name:"TriggerTypes"`
}

func (r *ModifyExecStrategyRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyExecStrategyRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupId")
	delete(f, "MonitorType")
	delete(f, "ExecQueue")
	delete(f, "ExecutorGroupId")
	delete(f, "ExecutorGroupName")
	delete(f, "Tasks")
	delete(f, "ProjectId")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "CycleType")
	delete(f, "CycleStep")
	delete(f, "TaskAction")
	delete(f, "DelayTime")
	delete(f, "DatabaseId")
	delete(f, "DatasourceId")
	delete(f, "TableId")
	delete(f, "ExecEngineType")
	delete(f, "TriggerTypes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyExecStrategyRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyExecStrategyResponseParams struct {
	// Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
	Data *uint64 `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyExecStrategyResponse struct {
	*tchttp.BaseResponse
	Response *ModifyExecStrategyResponseParams `json:"Response"`
}

func (r *ModifyExecStrategyResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyExecStrategyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyIntegrationNodeRequestParams struct {
	// Integrated Node Information
	NodeInfo *IntegrationNodeInfo `json:"NodeInfo,omitnil,omitempty" name:"NodeInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type "201. stream, 202. offline"
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Distinguish Canvas Mode and Form "1. Canvas, 2. Form" mode
	TaskMode *uint64 `json:"TaskMode,omitnil,omitempty" name:"TaskMode"`
}

type ModifyIntegrationNodeRequest struct {
	*tchttp.BaseRequest
	
	// Integrated Node Information
	NodeInfo *IntegrationNodeInfo `json:"NodeInfo,omitnil,omitempty" name:"NodeInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type "201. stream, 202. offline"
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Distinguish Canvas Mode and Form "1. Canvas, 2. Form" mode
	TaskMode *uint64 `json:"TaskMode,omitnil,omitempty" name:"TaskMode"`
}

func (r *ModifyIntegrationNodeRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyIntegrationNodeRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "NodeInfo")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	delete(f, "TaskMode")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyIntegrationNodeRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyIntegrationNodeResponseParams struct {
	// Node ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyIntegrationNodeResponse struct {
	*tchttp.BaseResponse
	Response *ModifyIntegrationNodeResponseParams `json:"Response"`
}

func (r *ModifyIntegrationNodeResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyIntegrationNodeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyIntegrationTaskRequestParams struct {
	// Task Information
	TaskInfo *IntegrationTaskInfo `json:"TaskInfo,omitnil,omitempty" name:"TaskInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Default is false. When true, it indicates rolling back to the node logic
	RollbackFlag *bool `json:"RollbackFlag,omitnil,omitempty" name:"RollbackFlag"`
}

type ModifyIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task Information
	TaskInfo *IntegrationTaskInfo `json:"TaskInfo,omitnil,omitempty" name:"TaskInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Default is false. When true, it indicates rolling back to the node logic
	RollbackFlag *bool `json:"RollbackFlag,omitnil,omitempty" name:"RollbackFlag"`
}

func (r *ModifyIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskInfo")
	delete(f, "ProjectId")
	delete(f, "RollbackFlag")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyIntegrationTaskResponseParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *ModifyIntegrationTaskResponseParams `json:"Response"`
}

func (r *ModifyIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMonitorStatusRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Monitor switch status
	MonitorStatus *bool `json:"MonitorStatus,omitnil,omitempty" name:"MonitorStatus"`
}

type ModifyMonitorStatusRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Monitor switch status
	MonitorStatus *bool `json:"MonitorStatus,omitnil,omitempty" name:"MonitorStatus"`
}

func (r *ModifyMonitorStatusRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMonitorStatusRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "RuleGroupId")
	delete(f, "MonitorStatus")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyMonitorStatusRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyMonitorStatusResponseParams struct {
	// Monitoring Status Modified Successfully
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyMonitorStatusResponse struct {
	*tchttp.BaseResponse
	Response *ModifyMonitorStatusResponseParams `json:"Response"`
}

func (r *ModifyMonitorStatusResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyMonitorStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRuleGroupSubscriptionRequestParams struct {
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Subscriber Information
	Receivers []*SubscribeReceiver `json:"Receivers,omitnil,omitempty" name:"Receivers"`

	// Data Subscription Type
	SubscribeType []*uint64 `json:"SubscribeType,omitnil,omitempty" name:"SubscribeType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Group Robot Webhook Information
	WebHooks []*SubscribeWebHook `json:"WebHooks,omitnil,omitempty" name:"WebHooks"`
}

type ModifyRuleGroupSubscriptionRequest struct {
	*tchttp.BaseRequest
	
	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Subscriber Information
	Receivers []*SubscribeReceiver `json:"Receivers,omitnil,omitempty" name:"Receivers"`

	// Data Subscription Type
	SubscribeType []*uint64 `json:"SubscribeType,omitnil,omitempty" name:"SubscribeType"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database ID
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data Source ID
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Group Robot Webhook Information
	WebHooks []*SubscribeWebHook `json:"WebHooks,omitnil,omitempty" name:"WebHooks"`
}

func (r *ModifyRuleGroupSubscriptionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRuleGroupSubscriptionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "RuleGroupId")
	delete(f, "Receivers")
	delete(f, "SubscribeType")
	delete(f, "ProjectId")
	delete(f, "DatabaseId")
	delete(f, "DatasourceId")
	delete(f, "TableId")
	delete(f, "WebHooks")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRuleGroupSubscriptionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRuleGroupSubscriptionResponseParams struct {
	// Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
	Data *uint64 `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRuleGroupSubscriptionResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRuleGroupSubscriptionResponseParams `json:"Response"`
}

func (r *ModifyRuleGroupSubscriptionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRuleGroupSubscriptionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRuleRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Rule name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Rule Template ID
	RuleTemplateId *uint64 `json:"RuleTemplateId,omitnil,omitempty" name:"RuleTemplateId"`

	// Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Field Detailed Type, int, string
	SourceObjectDataTypeName *string `json:"SourceObjectDataTypeName,omitnil,omitempty" name:"SourceObjectDataTypeName"`

	// Source Field Name
	SourceObjectValue *string `json:"SourceObjectValue,omitnil,omitempty" name:"SourceObjectValue"`

	// Detection Range 1.Whole Table 2.Conditional Scan
	ConditionType *uint64 `json:"ConditionType,omitnil,omitempty" name:"ConditionType"`

	// Conditional Scan WHERE Condition Expression
	ConditionExpression *string `json:"ConditionExpression,omitnil,omitempty" name:"ConditionExpression"`

	// Custom Definition SQL
	CustomSql *string `json:"CustomSql,omitnil,omitempty" name:"CustomSql"`

	// Alert Trigger Condition
	CompareRule *CompareRule `json:"CompareRule,omitnil,omitempty" name:"CompareRule"`

	// Alert Trigger Level 1.Low, 2.Medium, 3.High
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Rule Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Target Database Id
	TargetDatabaseId *string `json:"TargetDatabaseId,omitnil,omitempty" name:"TargetDatabaseId"`

	// Target Table Id
	TargetTableId *string `json:"TargetTableId,omitnil,omitempty" name:"TargetTableId"`

	// Target Filter Condition Expression
	TargetConditionExpr *string `json:"TargetConditionExpr,omitnil,omitempty" name:"TargetConditionExpr"`

	// Source Field and Target Field Association Condition ON Expression
	RelConditionExpr *string `json:"RelConditionExpr,omitnil,omitempty" name:"RelConditionExpr"`

	// Custom Definition Template SQL Expression Field Replacement Parameter
	FieldConfig *RuleFieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`

	// Target Field Name CITY
	TargetObjectValue *string `json:"TargetObjectValue,omitnil,omitempty" name:"TargetObjectValue"`

	// Execution engine adapted to the rule
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`
}

type ModifyRuleRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Rule ID
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule Group ID
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Rule name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Data Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Rule Template ID
	RuleTemplateId *uint64 `json:"RuleTemplateId,omitnil,omitempty" name:"RuleTemplateId"`

	// Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Field Detailed Type, int, string
	SourceObjectDataTypeName *string `json:"SourceObjectDataTypeName,omitnil,omitempty" name:"SourceObjectDataTypeName"`

	// Source Field Name
	SourceObjectValue *string `json:"SourceObjectValue,omitnil,omitempty" name:"SourceObjectValue"`

	// Detection Range 1.Whole Table 2.Conditional Scan
	ConditionType *uint64 `json:"ConditionType,omitnil,omitempty" name:"ConditionType"`

	// Conditional Scan WHERE Condition Expression
	ConditionExpression *string `json:"ConditionExpression,omitnil,omitempty" name:"ConditionExpression"`

	// Custom Definition SQL
	CustomSql *string `json:"CustomSql,omitnil,omitempty" name:"CustomSql"`

	// Alert Trigger Condition
	CompareRule *CompareRule `json:"CompareRule,omitnil,omitempty" name:"CompareRule"`

	// Alert Trigger Level 1.Low, 2.Medium, 3.High
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Rule Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Target Database Id
	TargetDatabaseId *string `json:"TargetDatabaseId,omitnil,omitempty" name:"TargetDatabaseId"`

	// Target Table Id
	TargetTableId *string `json:"TargetTableId,omitnil,omitempty" name:"TargetTableId"`

	// Target Filter Condition Expression
	TargetConditionExpr *string `json:"TargetConditionExpr,omitnil,omitempty" name:"TargetConditionExpr"`

	// Source Field and Target Field Association Condition ON Expression
	RelConditionExpr *string `json:"RelConditionExpr,omitnil,omitempty" name:"RelConditionExpr"`

	// Custom Definition Template SQL Expression Field Replacement Parameter
	FieldConfig *RuleFieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`

	// Target Field Name CITY
	TargetObjectValue *string `json:"TargetObjectValue,omitnil,omitempty" name:"TargetObjectValue"`

	// Execution engine adapted to the rule
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`
}

func (r *ModifyRuleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRuleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "RuleId")
	delete(f, "RuleGroupId")
	delete(f, "Name")
	delete(f, "TableId")
	delete(f, "RuleTemplateId")
	delete(f, "Type")
	delete(f, "QualityDim")
	delete(f, "SourceObjectDataTypeName")
	delete(f, "SourceObjectValue")
	delete(f, "ConditionType")
	delete(f, "ConditionExpression")
	delete(f, "CustomSql")
	delete(f, "CompareRule")
	delete(f, "AlarmLevel")
	delete(f, "Description")
	delete(f, "TargetDatabaseId")
	delete(f, "TargetTableId")
	delete(f, "TargetConditionExpr")
	delete(f, "RelConditionExpr")
	delete(f, "FieldConfig")
	delete(f, "TargetObjectValue")
	delete(f, "SourceEngineTypes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRuleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRuleResponseParams struct {
	// Whether Update Successful
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRuleResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRuleResponseParams `json:"Response"`
}

func (r *ModifyRuleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRuleTemplateRequestParams struct {
	// Template ID
	TemplateId *uint64 `json:"TemplateId,omitnil,omitempty" name:"TemplateId"`

	// Template Type 1. System Template 2. Custom Definition Template
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Template Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Corresponding Engine Type of the Source
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`

	// Whether to Associate with Other Databases and Tables
	MultiSourceFlag *bool `json:"MultiSourceFlag,omitnil,omitempty" name:"MultiSourceFlag"`

	// SQL Expression
	SqlExpression *string `json:"SqlExpression,omitnil,omitempty" name:"SqlExpression"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to add where parameter
	WhereFlag *bool `json:"WhereFlag,omitnil,omitempty" name:"WhereFlag"`
}

type ModifyRuleTemplateRequest struct {
	*tchttp.BaseRequest
	
	// Template ID
	TemplateId *uint64 `json:"TemplateId,omitnil,omitempty" name:"TemplateId"`

	// Template Type 1. System Template 2. Custom Definition Template
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Template Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Corresponding Engine Type of the Source
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`

	// Whether to Associate with Other Databases and Tables
	MultiSourceFlag *bool `json:"MultiSourceFlag,omitnil,omitempty" name:"MultiSourceFlag"`

	// SQL Expression
	SqlExpression *string `json:"SqlExpression,omitnil,omitempty" name:"SqlExpression"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Whether to add where parameter
	WhereFlag *bool `json:"WhereFlag,omitnil,omitempty" name:"WhereFlag"`
}

func (r *ModifyRuleTemplateRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRuleTemplateRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TemplateId")
	delete(f, "Type")
	delete(f, "Name")
	delete(f, "QualityDim")
	delete(f, "SourceObjectType")
	delete(f, "Description")
	delete(f, "SourceEngineTypes")
	delete(f, "MultiSourceFlag")
	delete(f, "SqlExpression")
	delete(f, "ProjectId")
	delete(f, "WhereFlag")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyRuleTemplateRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyRuleTemplateResponseParams struct {
	// Modification successful
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyRuleTemplateResponse struct {
	*tchttp.BaseResponse
	Response *ModifyRuleTemplateResponseParams `json:"Response"`
}

func (r *ModifyRuleTemplateResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyRuleTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskAlarmRegularRequestParams struct {
	// Rule ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Rule Information
	TaskAlarmInfo *TaskAlarmInfo `json:"TaskAlarmInfo,omitnil,omitempty" name:"TaskAlarmInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type ModifyTaskAlarmRegularRequest struct {
	*tchttp.BaseRequest
	
	// Rule ID
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Rule Information
	TaskAlarmInfo *TaskAlarmInfo `json:"TaskAlarmInfo,omitnil,omitempty" name:"TaskAlarmInfo"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *ModifyTaskAlarmRegularRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskAlarmRegularRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Id")
	delete(f, "TaskAlarmInfo")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyTaskAlarmRegularRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskAlarmRegularResponseParams struct {
	// Modify Successfully Determined?
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyTaskAlarmRegularResponse struct {
	*tchttp.BaseResponse
	Response *ModifyTaskAlarmRegularResponseParams `json:"Response"`
}

func (r *ModifyTaskAlarmRegularResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskAlarmRegularResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskInfoRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Execution time, in minutes, applicable to daily/weekly/monthly/yearly scheduling. For example, with daily scheduling, executing once at 02:00 AM every day, delayTime is 120 minutes
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Start Time
	StartupTime *int64 `json:"StartupTime,omitnil,omitempty" name:"StartupTime"`

	// Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
	SelfDepend *int64 `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// Effective Start Time, format yyyy-MM-dd HH:mm:ss
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Effective End Time, format yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
	CycleType *int64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Step Length, Interval Time, minimum of 1
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Cron Expression is required only for Cron Tab Scheduling
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// New Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Failure Retry Interval, in minutes, a default value has already been provided during task creation
	RetryWait *int64 `json:"RetryWait,omitnil,omitempty" name:"RetryWait"`

	// Number of Retry Attempts on Failure, a default value has already been provided during task creation
	TryLimit *int64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Whether to Retry, 1 for yes
	Retriable *int64 `json:"Retriable,omitnil,omitempty" name:"Retriable"`

	// Running Priority, 4 for High, 5 for Medium, 6 for Low
	RunPriority *int64 `json:"RunPriority,omitnil,omitempty" name:"RunPriority"`

	// Extended Task Configuration
	TaskExt []*TaskExtInfo `json:"TaskExt,omitnil,omitempty" name:"TaskExt"`

	// Execution Resource Group ID, needs to be created on the Resource Management Service and bind to a CVM machine
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Resource Pool Queue Name
	YarnQueue *string `json:"YarnQueue,omitnil,omitempty" name:"YarnQueue"`

	// Specific Execution Machine under Resource Group, 'any' means it can run on any machine.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Person in Charge
	//
	// Deprecated: InCharge is deprecated.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Task notes
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`

	// Task Parameters
	TaskParamInfos []*ParamInfo `json:"TaskParamInfos,omitnil,omitempty" name:"TaskParamInfos"`

	// Source Data Source
	SourceServer *string `json:"SourceServer,omitnil,omitempty" name:"SourceServer"`

	// Target Data Source
	TargetServer *string `json:"TargetServer,omitnil,omitempty" name:"TargetServer"`

	// Supports Workflow Dependencies yes/no, default no
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`

	// Dependency Configuration
	DependencyConfigDTOs []*DependencyConfig `json:"DependencyConfigDTOs,omitnil,omitempty" name:"DependencyConfigDTOs"`

	// Execution Duration
	ExecutionTTL *int64 `json:"ExecutionTTL,omitnil,omitempty" name:"ExecutionTTL"`

	// Whether the Script has Changed
	ScriptChange *bool `json:"ScriptChange,omitnil,omitempty" name:"ScriptChange"`

	// Responsible Person ID
	InChargeIds []*string `json:"InChargeIds,omitnil,omitempty" name:"InChargeIds"`
}

type ModifyTaskInfoRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Execution time, in minutes, applicable to daily/weekly/monthly/yearly scheduling. For example, with daily scheduling, executing once at 02:00 AM every day, delayTime is 120 minutes
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Start Time
	StartupTime *int64 `json:"StartupTime,omitnil,omitempty" name:"StartupTime"`

	// Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
	SelfDepend *int64 `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// Effective Start Time, format yyyy-MM-dd HH:mm:ss
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Effective End Time, format yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
	CycleType *int64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Step Length, Interval Time, minimum of 1
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Cron Expression is required only for Cron Tab Scheduling
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// New Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Failure Retry Interval, in minutes, a default value has already been provided during task creation
	RetryWait *int64 `json:"RetryWait,omitnil,omitempty" name:"RetryWait"`

	// Number of Retry Attempts on Failure, a default value has already been provided during task creation
	TryLimit *int64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Whether to Retry, 1 for yes
	Retriable *int64 `json:"Retriable,omitnil,omitempty" name:"Retriable"`

	// Running Priority, 4 for High, 5 for Medium, 6 for Low
	RunPriority *int64 `json:"RunPriority,omitnil,omitempty" name:"RunPriority"`

	// Extended Task Configuration
	TaskExt []*TaskExtInfo `json:"TaskExt,omitnil,omitempty" name:"TaskExt"`

	// Execution Resource Group ID, needs to be created on the Resource Management Service and bind to a CVM machine
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Resource Pool Queue Name
	YarnQueue *string `json:"YarnQueue,omitnil,omitempty" name:"YarnQueue"`

	// Specific Execution Machine under Resource Group, 'any' means it can run on any machine.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Person in Charge
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Task notes
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`

	// Task Parameters
	TaskParamInfos []*ParamInfo `json:"TaskParamInfos,omitnil,omitempty" name:"TaskParamInfos"`

	// Source Data Source
	SourceServer *string `json:"SourceServer,omitnil,omitempty" name:"SourceServer"`

	// Target Data Source
	TargetServer *string `json:"TargetServer,omitnil,omitempty" name:"TargetServer"`

	// Supports Workflow Dependencies yes/no, default no
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`

	// Dependency Configuration
	DependencyConfigDTOs []*DependencyConfig `json:"DependencyConfigDTOs,omitnil,omitempty" name:"DependencyConfigDTOs"`

	// Execution Duration
	ExecutionTTL *int64 `json:"ExecutionTTL,omitnil,omitempty" name:"ExecutionTTL"`

	// Whether the Script has Changed
	ScriptChange *bool `json:"ScriptChange,omitnil,omitempty" name:"ScriptChange"`

	// Responsible Person ID
	InChargeIds []*string `json:"InChargeIds,omitnil,omitempty" name:"InChargeIds"`
}

func (r *ModifyTaskInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "DelayTime")
	delete(f, "StartupTime")
	delete(f, "SelfDepend")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "TaskAction")
	delete(f, "CycleType")
	delete(f, "CycleStep")
	delete(f, "CrontabExpression")
	delete(f, "ExecutionStartTime")
	delete(f, "ExecutionEndTime")
	delete(f, "TaskName")
	delete(f, "RetryWait")
	delete(f, "TryLimit")
	delete(f, "Retriable")
	delete(f, "RunPriority")
	delete(f, "TaskExt")
	delete(f, "ResourceGroup")
	delete(f, "YarnQueue")
	delete(f, "BrokerIp")
	delete(f, "InCharge")
	delete(f, "Notes")
	delete(f, "TaskParamInfos")
	delete(f, "SourceServer")
	delete(f, "TargetServer")
	delete(f, "DependencyWorkflow")
	delete(f, "DependencyConfigDTOs")
	delete(f, "ExecutionTTL")
	delete(f, "ScriptChange")
	delete(f, "InChargeIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyTaskInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskInfoResponseParams struct {
	// Execution Result
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyTaskInfoResponse struct {
	*tchttp.BaseResponse
	Response *ModifyTaskInfoResponseParams `json:"Response"`
}

func (r *ModifyTaskInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskLinksRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Parent Task ID
	TaskFrom *string `json:"TaskFrom,omitnil,omitempty" name:"TaskFrom"`

	// Subtask ID
	TaskTo *string `json:"TaskTo,omitnil,omitempty" name:"TaskTo"`

	// Subtask Workflow
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Parent Task Workflow
	RealFromWorkflowId *string `json:"RealFromWorkflowId,omitnil,omitempty" name:"RealFromWorkflowId"`

	// Dependency Relationship Between Parent and Child Tasks
	LinkDependencyType *string `json:"LinkDependencyType,omitnil,omitempty" name:"LinkDependencyType"`
}

type ModifyTaskLinksRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Parent Task ID
	TaskFrom *string `json:"TaskFrom,omitnil,omitempty" name:"TaskFrom"`

	// Subtask ID
	TaskTo *string `json:"TaskTo,omitnil,omitempty" name:"TaskTo"`

	// Subtask Workflow
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Parent Task Workflow
	RealFromWorkflowId *string `json:"RealFromWorkflowId,omitnil,omitempty" name:"RealFromWorkflowId"`

	// Dependency Relationship Between Parent and Child Tasks
	LinkDependencyType *string `json:"LinkDependencyType,omitnil,omitempty" name:"LinkDependencyType"`
}

func (r *ModifyTaskLinksRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskLinksRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskFrom")
	delete(f, "TaskTo")
	delete(f, "WorkflowId")
	delete(f, "RealFromWorkflowId")
	delete(f, "LinkDependencyType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyTaskLinksRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskLinksResponseParams struct {
	// Success or Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyTaskLinksResponse struct {
	*tchttp.BaseResponse
	Response *ModifyTaskLinksResponseParams `json:"Response"`
}

func (r *ModifyTaskLinksResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskLinksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskNameRequestParams struct {
	// Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// id
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project/workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Remarks
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`
}

type ModifyTaskNameRequest struct {
	*tchttp.BaseRequest
	
	// Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// id
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project/workspace ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Remarks
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`
}

func (r *ModifyTaskNameRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskNameRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskName")
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "Notes")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyTaskNameRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskNameResponseParams struct {
	// Result
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyTaskNameResponse struct {
	*tchttp.BaseResponse
	Response *ModifyTaskNameResponseParams `json:"Response"`
}

func (r *ModifyTaskNameResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskNameResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskScriptRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Script content Base64 encoded
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Integrated Task Script Configuration
	IntegrationNodeDetails []*IntegrationNodeDetail `json:"IntegrationNodeDetails,omitnil,omitempty" name:"IntegrationNodeDetails"`
}

type ModifyTaskScriptRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Script content Base64 encoded
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Integrated Task Script Configuration
	IntegrationNodeDetails []*IntegrationNodeDetail `json:"IntegrationNodeDetails,omitnil,omitempty" name:"IntegrationNodeDetails"`
}

func (r *ModifyTaskScriptRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskScriptRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "ScriptContent")
	delete(f, "IntegrationNodeDetails")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyTaskScriptRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyTaskScriptResponseParams struct {
	// Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *CommonContent `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyTaskScriptResponse struct {
	*tchttp.BaseResponse
	Response *ModifyTaskScriptResponseParams `json:"Response"`
}

func (r *ModifyTaskScriptResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyTaskScriptResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWorkflowInfoRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Person in Charge
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Responsible Person ID
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// Remarks
	WorkflowDesc *string `json:"WorkflowDesc,omitnil,omitempty" name:"WorkflowDesc"`

	// Workflow name
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Parent Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow User Group ID If multiple, separated by semicolons: a;b;c
	UserGroupId *string `json:"UserGroupId,omitnil,omitempty" name:"UserGroupId"`

	// Workflow User Group Name If multiple, separated by semicolons: a;b;c
	UserGroupName *string `json:"UserGroupName,omitnil,omitempty" name:"UserGroupName"`

	// Workflow Parameter List
	WorkflowParams []*ParamInfo `json:"WorkflowParams,omitnil,omitempty" name:"WorkflowParams"`

	// Used to configure optimized parameters (Thread, Memory, CPU Core Count, etc.), applicable only to Spark SQL Node. Separate multiple parameters with English semicolons.
	GeneralTaskParams []*GeneralTaskParam `json:"GeneralTaskParams,omitnil,omitempty" name:"GeneralTaskParams"`
}

type ModifyWorkflowInfoRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Person in Charge
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Responsible Person ID
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// Remarks
	WorkflowDesc *string `json:"WorkflowDesc,omitnil,omitempty" name:"WorkflowDesc"`

	// Workflow name
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Parent Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow User Group ID If multiple, separated by semicolons: a;b;c
	UserGroupId *string `json:"UserGroupId,omitnil,omitempty" name:"UserGroupId"`

	// Workflow User Group Name If multiple, separated by semicolons: a;b;c
	UserGroupName *string `json:"UserGroupName,omitnil,omitempty" name:"UserGroupName"`

	// Workflow Parameter List
	WorkflowParams []*ParamInfo `json:"WorkflowParams,omitnil,omitempty" name:"WorkflowParams"`

	// Used to configure optimized parameters (Thread, Memory, CPU Core Count, etc.), applicable only to Spark SQL Node. Separate multiple parameters with English semicolons.
	GeneralTaskParams []*GeneralTaskParam `json:"GeneralTaskParams,omitnil,omitempty" name:"GeneralTaskParams"`
}

func (r *ModifyWorkflowInfoRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWorkflowInfoRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	delete(f, "Owner")
	delete(f, "OwnerId")
	delete(f, "WorkflowDesc")
	delete(f, "WorkflowName")
	delete(f, "FolderId")
	delete(f, "UserGroupId")
	delete(f, "UserGroupName")
	delete(f, "WorkflowParams")
	delete(f, "GeneralTaskParams")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWorkflowInfoRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWorkflowInfoResponseParams struct {
	// true indicates success, false indicates failure
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWorkflowInfoResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWorkflowInfoResponseParams `json:"Response"`
}

func (r *ModifyWorkflowInfoResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWorkflowInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWorkflowScheduleRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Delay time, in minutes
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Start Time
	StartupTime *int64 `json:"StartupTime,omitnil,omitempty" name:"StartupTime"`

	// Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
	SelfDepend *int64 `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
	CycleType *int64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Step Length, Interval Time, minimum of 1
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Effective Start Time, format yyyy-MM-dd HH:mm:ss
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Effective End Time, format yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Cron Expression is required only for Cron Tab Scheduling
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// Workflow Dependency, yes or no
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`
}

type ModifyWorkflowScheduleRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Delay time, in minutes
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Start Time
	StartupTime *int64 `json:"StartupTime,omitnil,omitempty" name:"StartupTime"`

	// Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
	SelfDepend *int64 `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
	CycleType *int64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Step Length, Interval Time, minimum of 1
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Effective Start Time, format yyyy-MM-dd HH:mm:ss
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Effective End Time, format yyyy-MM-dd HH:mm:ss
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Cron Expression is required only for Cron Tab Scheduling
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// Workflow Dependency, yes or no
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`
}

func (r *ModifyWorkflowScheduleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWorkflowScheduleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	delete(f, "DelayTime")
	delete(f, "StartupTime")
	delete(f, "SelfDepend")
	delete(f, "CycleType")
	delete(f, "CycleStep")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "TaskAction")
	delete(f, "CrontabExpression")
	delete(f, "ExecutionStartTime")
	delete(f, "ExecutionEndTime")
	delete(f, "DependencyWorkflow")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ModifyWorkflowScheduleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ModifyWorkflowScheduleResponseParams struct {
	// Execution Result
	Data *BatchResult `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ModifyWorkflowScheduleResponse struct {
	*tchttp.BaseResponse
	Response *ModifyWorkflowScheduleResponseParams `json:"Response"`
}

func (r *ModifyWorkflowScheduleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ModifyWorkflowScheduleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type MoveTasksToFolderRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task Folder ID
	TaskFolderId *string `json:"TaskFolderId,omitnil,omitempty" name:"TaskFolderId"`

	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Virtual Task ID
	VirtualTaskIds []*string `json:"VirtualTaskIds,omitnil,omitempty" name:"VirtualTaskIds"`
}

type MoveTasksToFolderRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Task Folder ID
	TaskFolderId *string `json:"TaskFolderId,omitnil,omitempty" name:"TaskFolderId"`

	// Task ID
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Virtual Task ID
	VirtualTaskIds []*string `json:"VirtualTaskIds,omitnil,omitempty" name:"VirtualTaskIds"`
}

func (r *MoveTasksToFolderRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *MoveTasksToFolderRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	delete(f, "TaskFolderId")
	delete(f, "TaskIds")
	delete(f, "VirtualTaskIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "MoveTasksToFolderRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type MoveTasksToFolderResponseParams struct {
	// true represents success
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type MoveTasksToFolderResponse struct {
	*tchttp.BaseResponse
	Response *MoveTasksToFolderResponseParams `json:"Response"`
}

func (r *MoveTasksToFolderResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *MoveTasksToFolderResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OfflineInstance struct {
	// Create Account Sub UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateUin *string `json:"CreateUin,omitnil,omitempty" name:"CreateUin"`

	// Operate Account Sub UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	OperatorUin *string `json:"OperatorUin,omitnil,omitempty" name:"OperatorUin"`

	// Primary AccountNote: This field may return null, indicating that no valid value can be obtained.
	OwnerUin *string `json:"OwnerUin,omitnil,omitempty" name:"OwnerUin"`

	// AccountsNote: This field may return null, indicating that no valid value can be obtained.
	AppId *string `json:"AppId,omitnil,omitempty" name:"AppId"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkspaceId *string `json:"WorkspaceId,omitnil,omitempty" name:"WorkspaceId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Data Timestamp
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`

	// Issuance time
	IssueId *string `json:"IssueId,omitnil,omitempty" name:"IssueId"`

	// Resource Group ID Issuance, not an input item
	// Note: This field may return null, indicating that no valid value can be obtained.
	InlongTaskId *string `json:"InlongTaskId,omitnil,omitempty" name:"InlongTaskId"`

	// Resource Group
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Task Type (1 Debugging, 2 Scheduled Execution)
	TaskRunType *uint64 `json:"TaskRunType,omitnil,omitempty" name:"TaskRunType"`

	// Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED|COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// Start TimeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timeNote: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Last Updated Time
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Unique Key
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceKey *string `json:"InstanceKey,omitnil,omitempty" name:"InstanceKey"`
}

type OfflineTaskAddParam struct {
	// Name
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Dependencies: yes, no
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`

	// Task Start Data Time. Not Empty. Default to Current Time
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Task End Data Time. Not Empty. Default to Current Time
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Cycle Type. One-time task: 6, Minute Task: 1, Hourly task: 2, Daily Task: 3, Weekly Task: 4, Monthly Task: 5, Cron task: 0
	CycleType *uint64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Interval, optional, default is 1. Not null. Default is 1
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Delayed Execution Time, in minutes
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Task cron expression, used only for cron tasks, else defaults to empty
	// Note: This field may return null, indicating that no valid value can be obtained.
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Retry Wait
	RetryWait *uint64 `json:"RetryWait,omitnil,omitempty" name:"RetryWait"`

	// Is Retry Allowed
	Retriable *uint64 `json:"Retriable,omitnil,omitempty" name:"Retriable"`

	// Retry Limit
	TryLimit *uint64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Priority
	RunPriority *uint64 `json:"RunPriority,omitnil,omitempty" name:"RunPriority"`

	// Product
	ProductName *string `json:"ProductName,omitnil,omitempty" name:"ProductName"`

	// 1 Ordered Serialization, one at a time, queued orderly
	// 2 Unordered Serial, one at a time, not queued serial
	// 3 Parallel, multiple at a time parallel
	SelfDepend *uint64 `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// Time Specification, such as 1,3 for monthly tasks, enter 1,3. Not empty. Default ""
	// Monthly Task: for specific days like "1,3", specifying end of month as "L" alone, cannot be mixed with specific dates
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Scheduled Execution End Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// Scheduled Execution Start Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Is Auto-submit
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAutoSubmit *bool `json:"TaskAutoSubmit,omitnil,omitempty" name:"TaskAutoSubmit"`

	// Instance Generation Method, T_PLUS_0 schedule task on the same day / T_PLUS_1 schedule task the next day
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceInitStrategy *string `json:"InstanceInitStrategy,omitnil,omitempty" name:"InstanceInitStrategy"`
}

type OperationOpsDto struct {
	// Operation Success
	// Note: This field may return null, indicating that no valid value can be obtained.
	Result *bool `json:"Result,omitnil,omitempty" name:"Result"`

	// Operation Result Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResultMsg *string `json:"ResultMsg,omitnil,omitempty" name:"ResultMsg"`

	// Operation Failure Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorId *string `json:"ErrorId,omitnil,omitempty" name:"ErrorId"`

	// Operation Failure Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorDesc *string `json:"ErrorDesc,omitnil,omitempty" name:"ErrorDesc"`
}

type OpsTaskCanvasDto struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Project nameNote: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Task status, 'Y', 'F', 'O', 'T', 'INVALID' respectively indicate Scheduling In Progress, Stopped, Paused, Stopping, Expired
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Task Type ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskTypeId *uint64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Task Type Description, where the corresponding relationship between Task Type ID and Task Type Description is as follows
	// 20	Universal Data Synchronization Task
	// 21	JDBC SQL
	// 22	Tbase
	// 25	Data ETL
	// 30	Python
	// 31	PySpark
	// 34	Hive SQL
	// 35	Shell
	// 36	Spark SQL
	// 37	HDFS to HBase
	// 38	SHELL
	// 39	Spark
	// 45	DATA_QUALITY
	// 55	THIVE to MySQL
	// 56	THIVE to PostgreSQL
	// 66	HDFS to PostgreSQL
	// 67	HDFS to Oracle
	// 68	HDFS to MySQL
	// 69	FTP to HDFS
	// 70	HIVE SQL
	// 72	HIVE to HDFS
	// 75	HDFS to HIVE
	// 81	Python SQL Script
	// 82	Spark Scala Computation
	// 83	Wormhole Task
	// 84	Verify Reconciliation File
	// 85	HDFS to THIVE
	// 86	TDW to HDFS
	// 87	HDFS to TDW
	// 88	Verify Reconciliation File
	// 91	FLINK Task
	// 92	MapReduce
	// 98	custom topology
	// 99	kafkatoHDFS
	// 100	kafkatoHbase
	// 101	Import MYSQL to HIVE(DX)
	// 104	MYSQL to HIVE
	// 105	HIVE to MYSQL
	// 106	SQL SERVER to HIVE
	// 107	HIVE to SQL SERVER
	// 108	ORACLE to HIVE
	// 109	HIVE to ORACLE
	// 111	HIVE to MYSQL (NEW)
	// 112	HIVE to PG
	// 113	HIVE to PHOENIX
	// 118	MYSQL to HDFS
	// 119	PG to HDFS
	// 120	ORACLE to HDFS
	// 121	Data Quality
	// 10000	Custom Definition Business
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskTypeDesc *string `json:"TaskTypeDesc,omitnil,omitempty" name:"TaskTypeDesc"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Folder NameNote: This field may return null, indicating that no valid value can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Folder IDNote: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Latest Submission Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstSubmitTime *string `json:"FirstSubmitTime,omitnil,omitempty" name:"FirstSubmitTime"`

	// First Execution Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstRunTime *string `json:"FirstRunTime,omitnil,omitempty" name:"FirstRunTime"`

	// Scheduling Plan Display Description Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScheduleDesc *string `json:"ScheduleDesc,omitnil,omitempty" name:"ScheduleDesc"`

	// Owner
	// Note: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Scheduling Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Canvas X-axis Coordinate Point
	// Note: This field may return null, indicating that no valid value can be obtained.
	LeftCoordinate *float64 `json:"LeftCoordinate,omitnil,omitempty" name:"LeftCoordinate"`

	// Canvas Y-axis Coordinate Point
	// Note: This field may return null, indicating that no valid value can be obtained.
	TopCoordinate *float64 `json:"TopCoordinate,omitnil,omitempty" name:"TopCoordinate"`

	// Cross-Workflow Virtual Task Identifier; true indicates a cross-workflow task; false indicates an in-workflow task
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`

	// Elastic Cycle Configuration
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// DelayNote: This field may return null, indicating that no valid value can be obtained.
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Execution Start Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution End Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// Hierarchy
	// Note: This field may return null, indicating that no valid value can be obtained.
	Layer *string `json:"Layer,omitnil,omitempty" name:"Layer"`

	// Source Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceServiceId *string `json:"SourceServiceId,omitnil,omitempty" name:"SourceServiceId"`

	// Source Data Source Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceServiceType *string `json:"SourceServiceType,omitnil,omitempty" name:"SourceServiceType"`

	// Target Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetServiceId *string `json:"TargetServiceId,omitnil,omitempty" name:"TargetServiceId"`

	// Target Data Source Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetServiceType *string `json:"TargetServiceType,omitnil,omitempty" name:"TargetServiceType"`

	// Task Alert Types
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmType *string `json:"AlarmType,omitnil,omitempty" name:"AlarmType"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`
}

type OpsTaskCanvasInfoList struct {
	// Canvas Task Information
	TasksList []*OpsTaskCanvasDto `json:"TasksList,omitnil,omitempty" name:"TasksList"`

	// Canvas Task Link Information
	LinksList []*OpsTaskLinkInfoDto `json:"LinksList,omitnil,omitempty" name:"LinksList"`

	// Canvas Cyclic Dependency Task Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	CirculateTaskList []*OpsTaskCanvasDto `json:"CirculateTaskList,omitnil,omitempty" name:"CirculateTaskList"`
}

type OpsTaskInfoPage struct {
	// Page Number
	PageNumber *uint64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Page Size
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Task List Information
	Items []*TaskOpsDto `json:"Items,omitnil,omitempty" name:"Items"`

	// Total Pages
	TotalPage *uint64 `json:"TotalPage,omitnil,omitempty" name:"TotalPage"`

	// Page Number
	PageCount *uint64 `json:"PageCount,omitnil,omitempty" name:"PageCount"`

	// Total number of items
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`
}

type OpsTaskLinkInfoDto struct {
	// Downstream task ID
	TaskTo *string `json:"TaskTo,omitnil,omitempty" name:"TaskTo"`

	// Upstream task ID
	TaskFrom *string `json:"TaskFrom,omitnil,omitempty" name:"TaskFrom"`

	// Dependency Edge Type 1,"real_real" indicates task->task; 2, "virtual_real" crossed workflow task->task
	LinkType *string `json:"LinkType,omitnil,omitempty" name:"LinkType"`

	// Dependency Edge ID
	LinkId *string `json:"LinkId,omitnil,omitempty" name:"LinkId"`

	// To distinguish newly added cyclic dependency. Default is normal, for cyclic dependency it is circulate
	// Note: This field may return null, indicating that no valid value can be obtained.
	LinkStyle *string `json:"LinkStyle,omitnil,omitempty" name:"LinkStyle"`
}

type OrderField struct {
	// Sorting Field Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Sorting Direction: ASC|DESC
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`
}

type OrderFieldOptional struct {
	// Sorting Field Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Sorting Direction: ASC|DESC
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`
}

type OrderFields struct {
	// Field
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Sort
	Direction *string `json:"Direction,omitnil,omitempty" name:"Direction"`
}

type OrganizationalFunction struct {
	// Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Display Name
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// Hierarchical Path
	LayerPath *string `json:"LayerPath,omitnil,omitempty" name:"LayerPath"`

	// Parent Hierarchical Path
	ParentLayerPath *string `json:"ParentLayerPath,omitnil,omitempty" name:"ParentLayerPath"`

	// Function Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Function Classification: Window functions, Aggregation functions, Date functions...
	// Note: This field may return null, indicating that no valid value can be obtained.
	Kind *string `json:"Kind,omitnil,omitempty" name:"Kind"`

	// Function Category: System functions, Custom Definition functions
	// Note: This field may return null, indicating that no valid value can be obtained.
	Category *string `json:"Category,omitnil,omitempty" name:"Category"`

	// Function Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Function DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Function Usage
	// Note: This field may return null, indicating that no valid value can be obtained.
	Usage *string `json:"Usage,omitnil,omitempty" name:"Usage"`

	// Function Parameter Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParamDesc *string `json:"ParamDesc,omitnil,omitempty" name:"ParamDesc"`

	// Function Return Value Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReturnDesc *string `json:"ReturnDesc,omitnil,omitempty" name:"ReturnDesc"`

	// Function Example
	// Note: This field may return null, indicating that no valid value can be obtained.
	Example *string `json:"Example,omitnil,omitempty" name:"Example"`

	// Cluster Instance Engine IDNote: This field may return null, indicating that no valid value can be obtained.
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Function IDNote: This field may return null, indicating that no valid value can be obtained.
	FuncId *string `json:"FuncId,omitnil,omitempty" name:"FuncId"`

	// Function Class Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClassName *string `json:"ClassName,omitnil,omitempty" name:"ClassName"`

	// Function Resource List
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceList []*FunctionVersion `json:"ResourceList,omitnil,omitempty" name:"ResourceList"`

	// Operator ID List
	// Note: This field may return null, indicating that no valid value can be obtained.
	OperatorUserIds []*int64 `json:"OperatorUserIds,omitnil,omitempty" name:"OperatorUserIds"`

	// Public cloud Owner ID list
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerUserIds []*int64 `json:"OwnerUserIds,omitnil,omitempty" name:"OwnerUserIds"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Submission failed error message
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubmitErrorMsg *string `json:"SubmitErrorMsg,omitnil,omitempty" name:"SubmitErrorMsg"`

	// Pattern nameNote: This field may return null, indicating that no valid value can be obtained.
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`

	// Function Command FormatNote: This field may return null, indicating that no valid value can be obtained.
	CommandFormat *string `json:"CommandFormat,omitnil,omitempty" name:"CommandFormat"`

	// NameNote: This field may return null, indicating that no valid value can be obtained.
	OwnerName *string `json:"OwnerName,omitnil,omitempty" name:"OwnerName"`

	// TimestampNote: This field may return null, indicating that no valid value can be obtained.
	SubmitTimestamp *string `json:"SubmitTimestamp,omitnil,omitempty" name:"SubmitTimestamp"`

	// Function tag
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tag *string `json:"Tag,omitnil,omitempty" name:"Tag"`

	// Operator ID List
	// Note: This field may return null, indicating that no valid value can be obtained.
	OperatorUserIdsStr []*string `json:"OperatorUserIdsStr,omitnil,omitempty" name:"OperatorUserIdsStr"`

	// Public Cloud Owner ID List
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerUserIdsStr []*string `json:"OwnerUserIdsStr,omitnil,omitempty" name:"OwnerUserIdsStr"`
}

type PageRoles struct {
	// Role information.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Rows []*BaseRole `json:"Rows,omitnil,omitempty" name:"Rows"`

	// Page number
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageNumber *int64 `json:"PageNumber,omitnil,omitempty" name:"PageNumber"`

	// Pagination size
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total number
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total pagination pages.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalPageNumber *int64 `json:"TotalPageNumber,omitnil,omitempty" name:"TotalPageNumber"`
}

type Pair struct {
	// Key Name
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Value
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type PairDto struct {
	// Key Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// ValueNote: This field may return null, indicating that no valid value can be obtained.
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type ParamInfo struct {
	// Parameter Name
	ParamKey *string `json:"ParamKey,omitnil,omitempty" name:"ParamKey"`

	// Parameter Value
	ParamValue *string `json:"ParamValue,omitnil,omitempty" name:"ParamValue"`
}

type Partition struct {
	// Partition Conversion Strategy
	Transform *string `json:"Transform,omitnil,omitempty" name:"Transform"`

	// Partition Field Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Policy Parameter
	TransformArgs []*string `json:"TransformArgs,omitnil,omitempty" name:"TransformArgs"`
}

type PathNodeDsVO struct {
	// PathNode ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// PathNode Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	Title *string `json:"Title,omitnil,omitempty" name:"Title"`

	// PathNode Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Unique Identifier of Parent Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentId *string `json:"ParentId,omitnil,omitempty" name:"ParentId"`

	// Is Leaf Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsLeaf *bool `json:"IsLeaf,omitnil,omitempty" name:"IsLeaf"`

	// Child Node List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Children []*PathNodeDsVO `json:"Children,omitnil,omitempty" name:"Children"`

	// Business Parameters, base64 encoded JSON string, to obtain specific parameters, base64 decoding is required
	// Note: This field may return null, indicating that no valid value can be obtained.
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`
}

type ProdSchedulerTask struct {
	// Production Scheduling Task Workflow ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Production Scheduling Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Production Scheduling Task Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Production Scheduling Task Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *int64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`
}

type Project struct {
	// Tenant ID of the project
	// Note: This field may return null, indicating that no valid value can be obtained.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier, English Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Project Display Name, can be Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DisplayName *string `json:"DisplayName,omitnil,omitempty" name:"DisplayName"`

	// RegionNote: This field may return null, indicating that no valid value can be obtained.
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// RemarksNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Creator
	// Note: This field may return null, indicating that no valid value can be obtained.
	Creator *BaseUser `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Tenant Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tenant *BaseTenant `json:"Tenant,omitnil,omitempty" name:"Tenant"`

	// Project Administrator
	// Note: This field may return null, indicating that no valid value can be obtained.
	AdminUsers []*BaseUser `json:"AdminUsers,omitnil,omitempty" name:"AdminUsers"`

	// Project-related cluster information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Clusters []*BaseClusterInfo `json:"Clusters,omitnil,omitempty" name:"Clusters"`

	// Additional configuration parameters for the project
	// Note: This field may return null, indicating that no valid value can be obtained.
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Project Status: 0: disabled, 1: enabled, -3: disabling, 2: enabling
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Project Type, SIMPLE: simple mode STANDARD: standard mode
	// Note: This field may return null, indicating that no valid value can be obtained.
	Model *string `json:"Model,omitnil,omitempty" name:"Model"`
}

type ProjectBaseInfoOpsRequest struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Whether admin
	IsAdmin *bool `json:"IsAdmin,omitnil,omitempty" name:"IsAdmin"`
}

type Property struct {
	// Key Value
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Value
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type QualityScore struct {
	// Composite Score
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompositeScore *float64 `json:"CompositeScore,omitnil,omitempty" name:"CompositeScore"`

	// Score Distribution
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScoringDistribution []*TableScoreStatisticsInfo `json:"ScoringDistribution,omitnil,omitempty" name:"ScoringDistribution"`

	// Total Number of Tables
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalTableNumber *int64 `json:"TotalTableNumber,omitnil,omitempty" name:"TotalTableNumber"`
}

type QualityScoreTrend struct {
	// Periodic Average Score
	// Note: This field may return null, indicating that no valid value can be obtained.
	AverageScore *float64 `json:"AverageScore,omitnil,omitempty" name:"AverageScore"`

	// Daily Score List
	// Note: This field may return null, indicating that no valid value can be obtained.
	DailyScoreList []*DailyScoreInfo `json:"DailyScoreList,omitnil,omitempty" name:"DailyScoreList"`
}

type QuietPeriod struct {
	// Represents the days of the week, 1 for Monday, 7 for Sunday, and so on
	// Note: This field may return null, indicating that no valid value can be obtained.
	DaysOfWeek []*uint64 `json:"DaysOfWeek,omitnil,omitempty" name:"DaysOfWeek"`

	// Start TimeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timeNote: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`
}

type RealTimeTaskInstanceNodeInfo struct {
	// Task Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Real-time Task Instance Node Information List
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceNodeInfoList []*InstanceNodeInfo `json:"InstanceNodeInfoList,omitnil,omitempty" name:"InstanceNodeInfoList"`
}

type RealTimeTaskSpeed struct {
	// Synchronous Speed Bar/s List
	RecordsSpeedList []*RecordsSpeed `json:"RecordsSpeedList,omitnil,omitempty" name:"RecordsSpeedList"`

	// Synchronous Speed Bytes/s List
	BytesSpeedList []*BytesSpeed `json:"BytesSpeedList,omitnil,omitempty" name:"BytesSpeedList"`
}

type RecordField struct {
	// Field Name, Extended Field Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Field Value, Extended Field Value
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type RecordsSpeed struct {
	// Node TypeNote: This field may return null, indicating that no valid value can be obtained.
	NodeType *string `json:"NodeType,omitnil,omitempty" name:"NodeType"`

	// Node nameNote: This field may return null, indicating that no valid value can be obtained.
	NodeName *string `json:"NodeName,omitnil,omitempty" name:"NodeName"`

	// Speed value list
	// Note: This field may return null, indicating that no valid value can be obtained.
	Values []*SpeedValue `json:"Values,omitnil,omitempty" name:"Values"`
}

// Predefined struct for user
type RegisterEventListenerRequestParams struct {
	// Keyword, if it refers to a task, then pass the Task ID
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Event name
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event type, default REST_API
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Configuration information, for example, maximum waiting time 1 day configuration in json: {"maxWaitEventTime":1,"maxWaitEventTimeUnit":"DAYS"}
	Properties *string `json:"Properties,omitnil,omitempty" name:"Properties"`
}

type RegisterEventListenerRequest struct {
	*tchttp.BaseRequest
	
	// Keyword, if it refers to a task, then pass the Task ID
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Event name
	EventName *string `json:"EventName,omitnil,omitempty" name:"EventName"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event type, default REST_API
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Configuration information, for example, maximum waiting time 1 day configuration in json: {"maxWaitEventTime":1,"maxWaitEventTimeUnit":"DAYS"}
	Properties *string `json:"Properties,omitnil,omitempty" name:"Properties"`
}

func (r *RegisterEventListenerRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RegisterEventListenerRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Key")
	delete(f, "EventName")
	delete(f, "ProjectId")
	delete(f, "Type")
	delete(f, "Properties")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RegisterEventListenerRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RegisterEventListenerResponseParams struct {
	// Success or Failure
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *BatchReturn `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RegisterEventListenerResponse struct {
	*tchttp.BaseResponse
	Response *RegisterEventListenerResponseParams `json:"Response"`
}

func (r *RegisterEventListenerResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RegisterEventListenerResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RegisterEventRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Name, supports English, numbers, and underscores, up to 20 characters long, cannot start with a number or underscore.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Event Segmentation Type, cycle types: DAY, HOUR, MIN, SECOND
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`

	// Broadcast: BROADCAST, Unicast: SINGLE
	EventBroadcastType *string `json:"EventBroadcastType,omitnil,omitempty" name:"EventBroadcastType"`

	// For cycle types of day and hour: HOURS, For minutes: MINUTES, For seconds: SECONDS
	TimeUnit *string `json:"TimeUnit,omitnil,omitempty" name:"TimeUnit"`

	// Event Owner
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Event Type, default value: TIME_SERIES
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Corresponding DAY: yyyyMMdd, Corresponding HOUR: yyyyMMddHH, Corresponding MIN: yyyyMMddHHmm, Corresponding SECOND: yyyyMMddHHmmss
	DimensionFormat *string `json:"DimensionFormat,omitnil,omitempty" name:"DimensionFormat"`

	// Uptime
	TimeToLive *int64 `json:"TimeToLive,omitnil,omitempty" name:"TimeToLive"`

	// Event Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type RegisterEventRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Name, supports English, numbers, and underscores, up to 20 characters long, cannot start with a number or underscore.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Event Segmentation Type, cycle types: DAY, HOUR, MIN, SECOND
	EventSubType *string `json:"EventSubType,omitnil,omitempty" name:"EventSubType"`

	// Broadcast: BROADCAST, Unicast: SINGLE
	EventBroadcastType *string `json:"EventBroadcastType,omitnil,omitempty" name:"EventBroadcastType"`

	// For cycle types of day and hour: HOURS, For minutes: MINUTES, For seconds: SECONDS
	TimeUnit *string `json:"TimeUnit,omitnil,omitempty" name:"TimeUnit"`

	// Event Owner
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Event Type, default value: TIME_SERIES
	EventType *string `json:"EventType,omitnil,omitempty" name:"EventType"`

	// Corresponding DAY: yyyyMMdd, Corresponding HOUR: yyyyMMddHH, Corresponding MIN: yyyyMMddHHmm, Corresponding SECOND: yyyyMMddHHmmss
	DimensionFormat *string `json:"DimensionFormat,omitnil,omitempty" name:"DimensionFormat"`

	// Uptime
	TimeToLive *int64 `json:"TimeToLive,omitnil,omitempty" name:"TimeToLive"`

	// Event Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

func (r *RegisterEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RegisterEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Name")
	delete(f, "EventSubType")
	delete(f, "EventBroadcastType")
	delete(f, "TimeUnit")
	delete(f, "Owner")
	delete(f, "EventType")
	delete(f, "DimensionFormat")
	delete(f, "TimeToLive")
	delete(f, "Description")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RegisterEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RegisterEventResponseParams struct {
	// Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
	Data *BatchReturn `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RegisterEventResponse struct {
	*tchttp.BaseResponse
	Response *RegisterEventResponseParams `json:"Response"`
}

func (r *RegisterEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RegisterEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RemoveWorkflowDsRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Whether to delete the script
	DeleteScript *string `json:"DeleteScript,omitnil,omitempty" name:"DeleteScript"`

	// Notify downstream if deleted
	OperateIsInform *string `json:"OperateIsInform,omitnil,omitempty" name:"OperateIsInform"`

	// Whether to terminate ongoing tasks
	DeleteMode *string `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`
}

type RemoveWorkflowDsRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Whether to delete the script
	DeleteScript *string `json:"DeleteScript,omitnil,omitempty" name:"DeleteScript"`

	// Notify downstream if deleted
	OperateIsInform *string `json:"OperateIsInform,omitnil,omitempty" name:"OperateIsInform"`

	// Whether to terminate ongoing tasks
	DeleteMode *string `json:"DeleteMode,omitnil,omitempty" name:"DeleteMode"`
}

func (r *RemoveWorkflowDsRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RemoveWorkflowDsRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	delete(f, "DeleteScript")
	delete(f, "OperateIsInform")
	delete(f, "DeleteMode")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RemoveWorkflowDsRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RemoveWorkflowDsResponseParams struct {
	// Whether deletion was successful
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RemoveWorkflowDsResponse struct {
	*tchttp.BaseResponse
	Response *RemoveWorkflowDsResponseParams `json:"Response"`
}

func (r *RemoveWorkflowDsResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RemoveWorkflowDsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReportTaskDetail struct {
	// Engine task id.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineTaskId *string `json:"EngineTaskId,omitnil,omitempty" name:"EngineTaskId"`

	// Engine execution status, enumerate.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeStatus *string `json:"EngineExeStatus,omitnil,omitempty" name:"EngineExeStatus"`

	// Engine execution start time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeStartTime *string `json:"EngineExeStartTime,omitnil,omitempty" name:"EngineExeStartTime"`

	// Engine execution end time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeEndTime *string `json:"EngineExeEndTime,omitnil,omitempty" name:"EngineExeEndTime"`

	// Task type id.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskTypeId *uint64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Business information.
	// Note: This field may return null, indicating that no valid values can be obtained.
	BusinessInfo *string `json:"BusinessInfo,omitnil,omitempty" name:"BusinessInfo"`

	// Engine task information.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineTaskInfo *EngineTaskInfo `json:"EngineTaskInfo,omitnil,omitempty" name:"EngineTaskInfo"`
}

type ReportTaskListInfo struct {
	// Task list details.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Rows []*TaskInfoVo `json:"Rows,omitnil,omitempty" name:"Rows"`

	// Page number
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageNum *uint64 `json:"PageNum,omitnil,omitempty" name:"PageNum"`

	// Entries per page.
	// Note: This field may return null, indicating that no valid values can be obtained.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total number of records
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Total pages
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TotalPageNumber *uint64 `json:"TotalPageNumber,omitnil,omitempty" name:"TotalPageNumber"`
}

type ResourcePathTree struct {
	// Resource name
	// Note: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Is leaf node
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsLeaf *bool `json:"IsLeaf,omitnil,omitempty" name:"IsLeaf"`

	// Resource ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// Local path
	// Note: This field may return null, indicating that no valid value can be obtained.
	LocalPath *string `json:"LocalPath,omitnil,omitempty" name:"LocalPath"`

	// Remote path
	// Note: This field may return null, indicating that no valid value can be obtained.
	RemotePath *string `json:"RemotePath,omitnil,omitempty" name:"RemotePath"`

	// File TypeNote: This field may return null, indicating that no valid value can be obtained.
	FileExtensionType *string `json:"FileExtensionType,omitnil,omitempty" name:"FileExtensionType"`

	// File sizeNote: This field may return null, indicating that no valid value can be obtained.
	Size *int64 `json:"Size,omitnil,omitempty" name:"Size"`

	// File MD5 value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Md5Value *string `json:"Md5Value,omitnil,omitempty" name:"Md5Value"`

	// File Owner's Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerName *string `json:"OwnerName,omitnil,omitempty" name:"OwnerName"`

	// Updater
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateUser *string `json:"UpdateUser,omitnil,omitempty" name:"UpdateUser"`

	// File Updater UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateUserId *string `json:"UpdateUserId,omitnil,omitempty" name:"UpdateUserId"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *uint64 `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *uint64 `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// COS Bucket Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	CosBucket *string `json:"CosBucket,omitnil,omitempty" name:"CosBucket"`

	// COS Region
	// Note: This field may return null, indicating that no valid value can be obtained.
	CosRegion *string `json:"CosRegion,omitnil,omitempty" name:"CosRegion"`

	// Additional InformationNote: This field may return null, indicating that no valid value can be obtained.
	ExtraInfo *string `json:"ExtraInfo,omitnil,omitempty" name:"ExtraInfo"`
}

// Predefined struct for user
type ResumeIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// Additional parameters
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Describe the type of front-end operation
	EventDesc *string `json:"EventDesc,omitnil,omitempty" name:"EventDesc"`
}

type ResumeIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// Additional parameters
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Describe the type of front-end operation
	EventDesc *string `json:"EventDesc,omitnil,omitempty" name:"EventDesc"`
}

func (r *ResumeIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ResumeIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "Event")
	delete(f, "ExtConfig")
	delete(f, "EventDesc")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "ResumeIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type ResumeIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type ResumeIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *ResumeIntegrationTaskResponseParams `json:"Response"`
}

func (r *ResumeIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *ResumeIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RobAndLockIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type: 201. stream, 202. offline
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type RobAndLockIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task Type: 201. stream, 202. offline
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *RobAndLockIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RobAndLockIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RobAndLockIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RobAndLockIntegrationTaskResponseParams struct {
	// Lock Acquisition Status
	RobLockState *RobLockState `json:"RobLockState,omitnil,omitempty" name:"RobLockState"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RobAndLockIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *RobAndLockIntegrationTaskResponseParams `json:"Response"`
}

func (r *RobAndLockIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RobAndLockIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RobLockState struct {
	// Whether to Grab the Lock
	IsRob *bool `json:"IsRob,omitnil,omitempty" name:"IsRob"`

	// Current Lock Holder
	Locker *string `json:"Locker,omitnil,omitempty" name:"Locker"`
}

type RolePrivilege struct {
	// id
	// Note: This field may return null, indicating that no valid values can be obtained.
	PrivilegeId *string `json:"PrivilegeId,omitnil,omitempty" name:"PrivilegeId"`

	// Name
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	PrivilegeName *string `json:"PrivilegeName,omitnil,omitempty" name:"PrivilegeName"`

	// Path
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	RestPath *string `json:"RestPath,omitnil,omitempty" name:"RestPath"`

	// Method.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	RestMethod *string `json:"RestMethod,omitnil,omitempty" name:"RestMethod"`

	// Description
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Module ID
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ModuleId *string `json:"ModuleId,omitnil,omitempty" name:"ModuleId"`

	// Permission type: N, R, RW, RWD.
	// Note: This field may return null, indicating that no valid values can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`
}

type Rule struct {
	// Rule ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Data Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Rule nameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Rule Type 1. System Template, 2. Custom Definition Template, 3. Custom Definition SQL
	// Note: This field may return null, indicating that no valid value can be obtained.
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Rule Template ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleTemplateId *uint64 `json:"RuleTemplateId,omitnil,omitempty" name:"RuleTemplateId"`

	// Rule Template Overview
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleTemplateContent *string `json:"RuleTemplateContent,omitnil,omitempty" name:"RuleTemplateContent"`

	// Quality Dimension of Rule 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Applicable Source Data Object Type (1: Numeric, 2: String)
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceObjectDataType *uint64 `json:"SourceObjectDataType,omitnil,omitempty" name:"SourceObjectDataType"`

	// Source Field Detailed Type, INT, STRING
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceObjectDataTypeName *string `json:"SourceObjectDataTypeName,omitnil,omitempty" name:"SourceObjectDataTypeName"`

	// Source Field Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceObjectValue *string `json:"SourceObjectValue,omitnil,omitempty" name:"SourceObjectValue"`

	// Detection Range 1. Whole Table, 2. Conditional Scan
	// Note: This field may return null, indicating that no valid value can be obtained.
	ConditionType *uint64 `json:"ConditionType,omitnil,omitempty" name:"ConditionType"`

	// Conditional Scan WHERE Condition Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	ConditionExpression *string `json:"ConditionExpression,omitnil,omitempty" name:"ConditionExpression"`

	// Custom Template SQL Expression from Definition
	// Note: This field may return null, indicating that no valid value can be obtained.
	CustomSql *string `json:"CustomSql,omitnil,omitempty" name:"CustomSql"`

	// Alert Trigger Condition
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompareRule *CompareRule `json:"CompareRule,omitnil,omitempty" name:"CompareRule"`

	// Alert Trigger Level 1. Low, 2. Medium, 3. High
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Rule DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Rule Configurator
	// Note: This field may return null, indicating that no valid value can be obtained.
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Target Database Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetDatabaseId *string `json:"TargetDatabaseId,omitnil,omitempty" name:"TargetDatabaseId"`

	// Target Database Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetDatabaseName *string `json:"TargetDatabaseName,omitnil,omitempty" name:"TargetDatabaseName"`

	// Target Table Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetTableId *string `json:"TargetTableId,omitnil,omitempty" name:"TargetTableId"`

	// Target Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetTableName *string `json:"TargetTableName,omitnil,omitempty" name:"TargetTableName"`

	// Target Field Filter Condition Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetConditionExpr *string `json:"TargetConditionExpr,omitnil,omitempty" name:"TargetConditionExpr"`

	// Source and target field association conditions in ON expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	RelConditionExpr *string `json:"RelConditionExpr,omitnil,omitempty" name:"RelConditionExpr"`

	// From Definition template SQL expression parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	FieldConfig *RuleFieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`

	// Whether to join multiple tables
	// Note: This field may return null, indicating that no valid value can be obtained.
	MultiSourceFlag *bool `json:"MultiSourceFlag,omitnil,omitempty" name:"MultiSourceFlag"`

	// Whether WHERE parameters exist
	// Note: This field may return null, indicating that no valid value can be obtained.
	WhereFlag *bool `json:"WhereFlag,omitnil,omitempty" name:"WhereFlag"`

	// Template original SQL
	// Note: This field may return null, indicating that no valid value can be obtained.
	TemplateSql *string `json:"TemplateSql,omitnil,omitempty" name:"TemplateSql"`

	// Template sub-dimensions: 0.Parent dimension type, 1.Consistency: Enum range consistency, 2.Consistency: Numeric range consistency, 3.Consistency: Field data correlation
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubQualityDim *uint64 `json:"SubQualityDim,omitnil,omitempty" name:"SubQualityDim"`

	// Rule applicable target data object types (1: Constant, 2: Offline table level, 3: Offline field level)
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetObjectType *uint64 `json:"TargetObjectType,omitnil,omitempty" name:"TargetObjectType"`

	// Rule applicable target data object types (1: Numeric, 2: String)
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetObjectDataType *uint64 `json:"TargetObjectDataType,omitnil,omitempty" name:"TargetObjectDataType"`

	// Target field detailed types, INT, STRING
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetObjectDataTypeName *string `json:"TargetObjectDataTypeName,omitnil,omitempty" name:"TargetObjectDataTypeName"`

	// Target field name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetObjectValue *string `json:"TargetObjectValue,omitnil,omitempty" name:"TargetObjectValue"`

	// Source engine type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`

	// Table name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Table manager name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerName *string `json:"TableOwnerName,omitnil,omitempty" name:"TableOwnerName"`

	// Execution strategy information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecStrategy *RuleGroupExecStrategy `json:"ExecStrategy,omitnil,omitempty" name:"ExecStrategy"`

	// Subscription information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Subscription *RuleGroupSubscribe `json:"Subscription,omitnil,omitempty" name:"Subscription"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *uint64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Monitoring enabled. 0 false, 1 true
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorStatus *int64 `json:"MonitorStatus,omitnil,omitempty" name:"MonitorStatus"`

	// Trigger conditionNote: This field may return null, indicating that no valid value can be obtained.
	TriggerCondition *string `json:"TriggerCondition,omitnil,omitempty" name:"TriggerCondition"`

	// 0, or not returned, or null: Undefined, 1: Production, 2: Development
	// Note: This field may return null, indicating that no valid value can be obtained.
	DsEnvType *int64 `json:"DsEnvType,omitnil,omitempty" name:"DsEnvType"`
}

type RuleConfig struct {
	// Rule IDNote: This field may return null, indicating that no valid value can be obtained.
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule Detection Range Type 1. Whole Table  2. Conditional Scan
	// Note: This field may return null, indicating that no valid value can be obtained.
	ConditionType *uint64 `json:"ConditionType,omitnil,omitempty" name:"ConditionType"`

	// Detection Range Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	Condition *string `json:"Condition,omitnil,omitempty" name:"Condition"`

	// Target Detection Range Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetCondition *string `json:"TargetCondition,omitnil,omitempty" name:"TargetCondition"`
}

type RuleDimCnt struct {
	// 1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity
	Dim *uint64 `json:"Dim,omitnil,omitempty" name:"Dim"`

	// count Number
	Cnt *uint64 `json:"Cnt,omitnil,omitempty" name:"Cnt"`
}

type RuleDimStat struct {
	// Total number
	TotalCnt *uint64 `json:"TotalCnt,omitnil,omitempty" name:"TotalCnt"`

	// Dimension Count Statistics
	DimCntList []*RuleDimCnt `json:"DimCntList,omitnil,omitempty" name:"DimCntList"`
}

type RuleExecConfig struct {
	// Compute Queue Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	QueueName *string `json:"QueueName,omitnil,omitempty" name:"QueueName"`

	// Execution Resource Group
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// The running execution engine, if not specified, the default execution engine under this data source will be requested
	// Note: This field may return null, indicating that no valid value can be obtained.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`
}

type RuleExecDateStat struct {
	// Statistics Date
	StatDate *string `json:"StatDate,omitnil,omitempty" name:"StatDate"`

	// Number of Alerts
	AlarmCnt *uint64 `json:"AlarmCnt,omitnil,omitempty" name:"AlarmCnt"`

	// Number of blocked processes
	PipelineCnt *uint64 `json:"PipelineCnt,omitnil,omitempty" name:"PipelineCnt"`
}

type RuleExecLog struct {
	// Completion Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	Finished *bool `json:"Finished,omitnil,omitempty" name:"Finished"`

	// ContentNote: This field may return null, indicating that no valid value can be obtained.
	Log *string `json:"Log,omitnil,omitempty" name:"Log"`
}

type RuleExecResult struct {
	// Rule Execution ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleExecId *uint64 `json:"RuleExecId,omitnil,omitempty" name:"RuleExecId"`

	// Rule Group Execution ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupExecId *uint64 `json:"RuleGroupExecId,omitnil,omitempty" name:"RuleGroupExecId"`

	// Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Rule IDNote: This field may return null, indicating that no valid value can be obtained.
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule nameNote: This field may return null, indicating that no valid value can be obtained.
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQLNote: This field may return null, indicating that no valid value can be obtained.
	RuleType *uint64 `json:"RuleType,omitnil,omitempty" name:"RuleType"`

	// Source Field Detailed Type, int string
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceObjectDataTypeName *string `json:"SourceObjectDataTypeName,omitnil,omitempty" name:"SourceObjectDataTypeName"`

	// Source Field NameNote: This field may return null, indicating that no valid value can be obtained.
	SourceObjectValue *string `json:"SourceObjectValue,omitnil,omitempty" name:"SourceObjectValue"`

	// Conditional Scan WHERE Condition ExpressionNote: This field may return null, indicating that no valid value can be obtained.
	ConditionExpression *string `json:"ConditionExpression,omitnil,omitempty" name:"ConditionExpression"`

	// Test Results (1: Detection passed, 2: Trigger Rules, 3: Detection failed)
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecResultStatus *uint64 `json:"ExecResultStatus,omitnil,omitempty" name:"ExecResultStatus"`

	// Trigger Result, Alert Sent Successfully, Block Task Successful
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerResult *string `json:"TriggerResult,omitnil,omitempty" name:"TriggerResult"`

	// Comparison Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompareResult *CompareResult `json:"CompareResult,omitnil,omitempty" name:"CompareResult"`

	// Template name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TemplateName *string `json:"TemplateName,omitnil,omitempty" name:"TemplateName"`

	// Quality Dimension
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Target Table - Database Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetDBTableName *string `json:"TargetDBTableName,omitnil,omitempty" name:"TargetDBTableName"`

	// Target Table - Field Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetObjectValue *string `json:"TargetObjectValue,omitnil,omitempty" name:"TargetObjectValue"`

	// Target Table - Field Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetObjectDataType *string `json:"TargetObjectDataType,omitnil,omitempty" name:"TargetObjectDataType"`

	// Custom Definition Template SQL Expression Parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	FieldConfig *RuleFieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`

	// Source Field and Target Field Association Condition ON ExpressionNote: This field may return null, indicating that no valid value can be obtained.
	RelConditionExpr *string `json:"RelConditionExpr,omitnil,omitempty" name:"RelConditionExpr"`

	// Execution timeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// 1/2/3: Low/Medium/High
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`
}

type RuleExecResultDetail struct {
	// Data source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *uint64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Database GUID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// table guid
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table nameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// rule execution record
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleExecResult *RuleExecResult `json:"RuleExecResult,omitnil,omitempty" name:"RuleExecResult"`

	// table owner userId
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerUserId *uint64 `json:"TableOwnerUserId,omitnil,omitempty" name:"TableOwnerUserId"`

	// 2.HIVE 3.DLC
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceType *uint64 `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`
}

type RuleExecResultPage struct {
	// Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Rule Execution Result
	Items []*RuleExecResult `json:"Items,omitnil,omitempty" name:"Items"`
}

type RuleExecStat struct {
	// Total Rule Executions
	TotalCnt *uint64 `json:"TotalCnt,omitnil,omitempty" name:"TotalCnt"`

	// Quarter-over-quarter total rule executions
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastTotalCnt *uint64 `json:"LastTotalCnt,omitnil,omitempty" name:"LastTotalCnt"`

	// Percentage of total rule executions
	TotalCntRatio *float64 `json:"TotalCntRatio,omitnil,omitempty" name:"TotalCntRatio"`

	// Quarter-over-quarter change in total rule executions
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastTotalCntRatio *float64 `json:"LastTotalCntRatio,omitnil,omitempty" name:"LastTotalCntRatio"`

	// Number of rule triggers
	TriggerCnt *uint64 `json:"TriggerCnt,omitnil,omitempty" name:"TriggerCnt"`

	// Quarter-over-quarter number of rule triggers
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastTriggerCnt *uint64 `json:"LastTriggerCnt,omitnil,omitempty" name:"LastTriggerCnt"`

	// Percentage of triggers in total
	TriggerCntRatio *float64 `json:"TriggerCntRatio,omitnil,omitempty" name:"TriggerCntRatio"`

	// Quarter-over-quarter change in rule triggers
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastTriggerCntRatio *float64 `json:"LastTriggerCntRatio,omitnil,omitempty" name:"LastTriggerCntRatio"`

	// Number of rule alerts
	AlarmCnt *uint64 `json:"AlarmCnt,omitnil,omitempty" name:"AlarmCnt"`

	// Quarter-over-quarter number of rule alerts
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastAlarmCnt *uint64 `json:"LastAlarmCnt,omitnil,omitempty" name:"LastAlarmCnt"`

	// Percentage of alerts in total
	AlarmCntRatio *float64 `json:"AlarmCntRatio,omitnil,omitempty" name:"AlarmCntRatio"`

	// Quarter-over-quarter change in alert numbers
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastAlarmCntRatio *float64 `json:"LastAlarmCntRatio,omitnil,omitempty" name:"LastAlarmCntRatio"`

	// Number of block occurrences
	PipelineCnt *uint64 `json:"PipelineCnt,omitnil,omitempty" name:"PipelineCnt"`

	// Quarter-over-quarter number of block occurrences
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastPipelineCnt *uint64 `json:"LastPipelineCnt,omitnil,omitempty" name:"LastPipelineCnt"`

	// Percentage of blocks in total
	PipelineCntRatio *float64 `json:"PipelineCntRatio,omitnil,omitempty" name:"PipelineCntRatio"`

	// Quarter-over-quarter change in block occurrences
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastPipelineCntRatio *float64 `json:"LastPipelineCntRatio,omitnil,omitempty" name:"LastPipelineCntRatio"`
}

type RuleFieldConfig struct {
	// Where Variable
	// Note: This field may return null, indicating that no valid value can be obtained.
	WhereConfig []*FieldConfig `json:"WhereConfig,omitnil,omitempty" name:"WhereConfig"`

	// Database Table Variable
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableConfig []*TableConfig `json:"TableConfig,omitnil,omitempty" name:"TableConfig"`
}

type RuleGroup struct {
	// Rule Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Data source typeNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceType *uint64 `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`

	// Monitoring Type: 1. Not Configured, 2. Associate Production Scheduling, 3. Offline Period Detection
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Associated Data Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Associated Data Table Id
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Associated Data Table Owner
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerName *string `json:"TableOwnerName,omitnil,omitempty" name:"TableOwnerName"`

	// Execution policyNote: This field may return null, indicating that no valid value can be obtained.
	ExecStrategy *RuleGroupExecStrategy `json:"ExecStrategy,omitnil,omitempty" name:"ExecStrategy"`

	// Execution policyNote: This field may return null, indicating that no valid value can be obtained.
	Subscription *RuleGroupSubscribe `json:"Subscription,omitnil,omitempty" name:"Subscription"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Permission Granted
	// Note: This field may return null, indicating that no valid value can be obtained.
	Permission *bool `json:"Permission,omitnil,omitempty" name:"Permission"`

	// Number of Rules Configured
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleCount *uint64 `json:"RuleCount,omitnil,omitempty" name:"RuleCount"`

	// Monitoring Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorStatus *bool `json:"MonitorStatus,omitnil,omitempty" name:"MonitorStatus"`

	// Table Leader UserId
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerUserId *uint64 `json:"TableOwnerUserId,omitnil,omitempty" name:"TableOwnerUserId"`

	// Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Execution Strategy Configured?
	// Note: This field may return null, indicating that no valid value can be obtained.
	StrategyConfig *bool `json:"StrategyConfig,omitnil,omitempty" name:"StrategyConfig"`

	// Execution Strategy Configured?
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubscribeConfig *bool `json:"SubscribeConfig,omitnil,omitempty" name:"SubscribeConfig"`

	// Data Source Environment: 0 or not returned. Undefined, 1. Production, 2. Development
	// Note: This field may return null, indicating that no valid value can be obtained.
	DsEnvType *int64 `json:"DsEnvType,omitnil,omitempty" name:"DsEnvType"`
}

type RuleGroupExecResult struct {
	// Rule Group Execution ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupExecId *uint64 `json:"RuleGroupExecId,omitnil,omitempty" name:"RuleGroupExecId"`

	// Rule Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Execution Trigger Type (1: Manual Trigger, 2: In-process Scheduling Trigger, 3: Periodic Scheduling Trigger)
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Execution time yyyy-MM-dd HH:mm:ss
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecTime *string `json:"ExecTime,omitnil,omitempty" name:"ExecTime"`

	// Execution Status (1. Submitted, 2. Under detection, 3. Normal, 4. Abnormal)
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`

	// Number of Exceptional Rules
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmRuleCount *uint64 `json:"AlarmRuleCount,omitnil,omitempty" name:"AlarmRuleCount"`

	// Total Number of Rules
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalRuleCount *uint64 `json:"TotalRuleCount,omitnil,omitempty" name:"TotalRuleCount"`

	// Source Table Responsible Person
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerName *string `json:"TableOwnerName,omitnil,omitempty" name:"TableOwnerName"`

	// Source Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Permission Availability
	// Note: This field may return null, indicating that no valid value can be obtained.
	Permission *bool `json:"Permission,omitnil,omitempty" name:"Permission"`

	// Execution Details, Scheduling Plan, or Associated Production Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecDetail *string `json:"ExecDetail,omitnil,omitempty" name:"ExecDetail"`

	// Actual Execution Engine
	// Note: This field may return null, indicating that no valid value can be obtained.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// Rule Execution Result
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleExecResultVOList []*RuleExecResult `json:"RuleExecResultVOList,omitnil,omitempty" name:"RuleExecResultVOList"`
}

type RuleGroupExecResultPage struct {
	// Record CountNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Rule Group Execution ResultNote: This field may return null, indicating that no valid value can be obtained.
	Items []*RuleGroupExecResult `json:"Items,omitnil,omitempty" name:"Items"`
}

type RuleGroupExecStrategy struct {
	// Rule Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Monitoring Type 1. Not configured, 2. Associated with production scheduling, 3. Offline cycle detection
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorType *uint64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`

	// Calculation Queue
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecQueue *string `json:"ExecQueue,omitnil,omitempty" name:"ExecQueue"`

	// Execution Resource Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Execution Resource Group Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`

	// Associated Production Scheduling Task List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tasks []*ProdSchedulerTask `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Cycle Start Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Cycle End Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Scheduling Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Delayed Scheduling Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Interval
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Time Specification
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Execution engine to run, if not provided, the default execution engine for this data source will be requested
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecEngineType *string `json:"ExecEngineType,omitnil,omitempty" name:"ExecEngineType"`

	// Execution planNote: This field may return null, indicating that no valid value can be obtained.
	ExecPlan *string `json:"ExecPlan,omitnil,omitempty" name:"ExecPlan"`

	// Rule ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule nameNote: This field may return null, indicating that no valid value can be obtained.
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`

	// Trigger Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerTypes []*string `json:"TriggerTypes,omitnil,omitempty" name:"TriggerTypes"`
}

type RuleGroupPage struct {
	// Record CountNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Rule Group List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*RuleGroup `json:"Items,omitnil,omitempty" name:"Items"`
}

type RuleGroupSchedulerInfo struct {
	// Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
	Id *int64 `json:"Id,omitnil,omitempty" name:"Id"`

	// 1: Unconfigured 2: Associated with production scheduling 3: Offline cycle detection
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorType *int64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`

	// Start TimeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timeNote: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Abbreviation for cycle type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Cycle step length
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleStep *int64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Cycle type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleDesc *string `json:"CycleDesc,omitnil,omitempty" name:"CycleDesc"`

	// Specified time under offline cycle detection
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Delay time under offline cycle detection
	// Note: This field may return null, indicating that no valid value can be obtained.
	DelayTime *int64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Task ID registered to the task scheduler under offline cycle detection
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleTaskId *string `json:"CycleTaskId,omitnil,omitempty" name:"CycleTaskId"`

	// Associated task ID under associated production scheduling
	// Note: This field may return null, indicating that no valid value can be obtained.
	AssociateTaskIds []*string `json:"AssociateTaskIds,omitnil,omitempty" name:"AssociateTaskIds"`
}

type RuleGroupSubscribe struct {
	// Rule Group ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroupId *uint64 `json:"RuleGroupId,omitnil,omitempty" name:"RuleGroupId"`

	// Subscription Recipient List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Receivers []*SubscribeReceiver `json:"Receivers,omitnil,omitempty" name:"Receivers"`

	// Subscription Method 1. Email  2. SMS
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubscribeType []*uint64 `json:"SubscribeType,omitnil,omitempty" name:"SubscribeType"`

	// Group Robot Configuration's Webhook Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	WebHooks []*SubscribeWebHook `json:"WebHooks,omitnil,omitempty" name:"WebHooks"`

	// Rule ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleId *uint64 `json:"RuleId,omitnil,omitempty" name:"RuleId"`

	// Rule nameNote: This field may return null, indicating that no valid value can be obtained.
	RuleName *string `json:"RuleName,omitnil,omitempty" name:"RuleName"`
}

type RuleGroupTable struct {
	// Table Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableInfo *RuleGroupTableInnerInfo `json:"TableInfo,omitnil,omitempty" name:"TableInfo"`

	// Rule Group Scheduling Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	RuleGroups []*RuleGroupSchedulerInfo `json:"RuleGroups,omitnil,omitempty" name:"RuleGroups"`

	// Subscriber Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Subscriptions []*RuleGroupSubscribe `json:"Subscriptions,omitnil,omitempty" name:"Subscriptions"`
}

type RuleGroupTableInnerInfo struct {
	// Table IDNote: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table NameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Instance IDNote: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Data source typeNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceType *int64 `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *int64 `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Responsible Person ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserId *int64 `json:"UserId,omitnil,omitempty" name:"UserId"`
}

type RulePage struct {
	// Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Rule List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*Rule `json:"Items,omitnil,omitempty" name:"Items"`
}

type RuleTemplate struct {
	// Rule Template ID
	RuleTemplateId *uint64 `json:"RuleTemplateId,omitnil,omitempty" name:"RuleTemplateId"`

	// Rule Template Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Rule Template Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Template Type (1: System Template, 2: Self Definition)
	Type *uint64 `json:"Type,omitnil,omitempty" name:"Type"`

	// Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
	SourceObjectType *uint64 `json:"SourceObjectType,omitnil,omitempty" name:"SourceObjectType"`

	// Applicable Source Data Object Type (1: Numeric, 2: String)
	SourceObjectDataType *uint64 `json:"SourceObjectDataType,omitnil,omitempty" name:"SourceObjectDataType"`

	// Rule Template Source Side Content, distinguish engine, JSON Structure
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceContent *string `json:"SourceContent,omitnil,omitempty" name:"SourceContent"`

	// Applicable Source Data Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceEngineTypes []*uint64 `json:"SourceEngineTypes,omitnil,omitempty" name:"SourceEngineTypes"`

	// Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity)
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualityDim *uint64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`

	// Supported Comparison Types for Rule (1: Fixed Value Comparison, greater than, less than, greater than or equal, etc. 2: Fluctuation Value Comparison, absolute value, increase, decrease)
	// Note: This field may return null, indicating that no valid value can be obtained.
	CompareType *uint64 `json:"CompareType,omitnil,omitempty" name:"CompareType"`

	// Number of References
	// Note: This field may return null, indicating that no valid value can be obtained.
	CitationCount *uint64 `json:"CitationCount,omitnil,omitempty" name:"CitationCount"`

	// Creator ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserId *uint64 `json:"UserId,omitnil,omitempty" name:"UserId"`

	// Creator Nickname
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserName *string `json:"UserName,omitnil,omitempty" name:"UserName"`

	// Update Time yyyy-MM-dd HH:mm:ss
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Whether to add where parameter
	// Note: This field may return null, indicating that no valid value can be obtained.
	WhereFlag *bool `json:"WhereFlag,omitnil,omitempty" name:"WhereFlag"`

	// Whether to Associate Multiple Tables
	// Note: This field may return null, indicating that no valid value can be obtained.
	MultiSourceFlag *bool `json:"MultiSourceFlag,omitnil,omitempty" name:"MultiSourceFlag"`

	// Custom Template SQL Expression from Definition
	// Note: This field may return null, indicating that no valid value can be obtained.
	SqlExpression *string `json:"SqlExpression,omitnil,omitempty" name:"SqlExpression"`

	// Template Sub-dimension,0. Parent Dimension Type,1. Consistency: Enumeration Range Consistency,2. Consistency: Numeric Range Consistency,3. Consistency: Field Data Correlation
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubQualityDim *uint64 `json:"SubQualityDim,omitnil,omitempty" name:"SubQualityDim"`

	// SQL Expression Parsing Object
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResolvedSqlExpression *SqlExpression `json:"ResolvedSqlExpression,omitnil,omitempty" name:"ResolvedSqlExpression"`

	// Supported Data Source Types
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceTypes []*int64 `json:"DatasourceTypes,omitnil,omitempty" name:"DatasourceTypes"`

	// Created by User ID Str
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserIdStr *string `json:"UserIdStr,omitnil,omitempty" name:"UserIdStr"`
}

type RuleTemplatePage struct {
	// Record Count
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Template List
	Items []*RuleTemplate `json:"Items,omitnil,omitempty" name:"Items"`
}

// Predefined struct for user
type RunForceSucScheduleInstancesRequestParams struct {
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type RunForceSucScheduleInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *RunForceSucScheduleInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RunForceSucScheduleInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "CheckFather")
	delete(f, "RerunType")
	delete(f, "DependentWay")
	delete(f, "SkipEventListening")
	delete(f, "SonInstanceType")
	delete(f, "SearchCondition")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RunForceSucScheduleInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RunForceSucScheduleInstancesResponseParams struct {
	// Result
	Data *BatchOperateResultOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RunForceSucScheduleInstancesResponse struct {
	*tchttp.BaseResponse
	Response *RunForceSucScheduleInstancesResponseParams `json:"Response"`
}

func (r *RunForceSucScheduleInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RunForceSucScheduleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RunRerunScheduleInstancesRequestParams struct {
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

type RunRerunScheduleInstancesRequest struct {
	*tchttp.BaseRequest
	
	// Instance List
	Instances []*InstanceOpsDto `json:"Instances,omitnil,omitempty" name:"Instances"`

	// Check Parent Task Type, true: Check parent task; false: Do not check parent task
	CheckFather *bool `json:"CheckFather,omitnil,omitempty" name:"CheckFather"`

	// Rerun Type, 1: Self; 3: Child; 2: Self and Child
	RerunType *string `json:"RerunType,omitnil,omitempty" name:"RerunType"`

	// Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
	DependentWay *string `json:"DependentWay,omitnil,omitempty" name:"DependentWay"`

	// Rerun Ignore Event Listening or Not
	SkipEventListening *bool `json:"SkipEventListening,omitnil,omitempty" name:"SkipEventListening"`

	// Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
	SonInstanceType *string `json:"SonInstanceType,omitnil,omitempty" name:"SonInstanceType"`

	// Query conditions
	SearchCondition *InstanceApiOpsRequest `json:"SearchCondition,omitnil,omitempty" name:"SearchCondition"`

	// Access type
	OptType *string `json:"OptType,omitnil,omitempty" name:"OptType"`

	// Operator Name
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Operator ID
	OperatorId *string `json:"OperatorId,omitnil,omitempty" name:"OperatorId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Index Page Number
	PageIndex *int64 `json:"PageIndex,omitnil,omitempty" name:"PageIndex"`

	// Page size
	PageSize *int64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`

	// Total Data
	Count *int64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Basic Request Information
	RequestBaseInfo *ProjectBaseInfoOpsRequest `json:"RequestBaseInfo,omitnil,omitempty" name:"RequestBaseInfo"`

	// Whether to Calculate Total
	IsCount *bool `json:"IsCount,omitnil,omitempty" name:"IsCount"`
}

func (r *RunRerunScheduleInstancesRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RunRerunScheduleInstancesRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "Instances")
	delete(f, "CheckFather")
	delete(f, "RerunType")
	delete(f, "DependentWay")
	delete(f, "SkipEventListening")
	delete(f, "SonInstanceType")
	delete(f, "SearchCondition")
	delete(f, "OptType")
	delete(f, "OperatorName")
	delete(f, "OperatorId")
	delete(f, "ProjectId")
	delete(f, "ProjectIdent")
	delete(f, "ProjectName")
	delete(f, "PageIndex")
	delete(f, "PageSize")
	delete(f, "Count")
	delete(f, "RequestBaseInfo")
	delete(f, "IsCount")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RunRerunScheduleInstancesRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RunRerunScheduleInstancesResponseParams struct {
	// Result
	Data *BatchOperateResultOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RunRerunScheduleInstancesResponse struct {
	*tchttp.BaseResponse
	Response *RunRerunScheduleInstancesResponseParams `json:"Response"`
}

func (r *RunRerunScheduleInstancesResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RunRerunScheduleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RunTasksByMultiWorkflowRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID List
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Whether to supplement intermediate instances 0. Do not supplement 1. Supplement instance
	EnableMakeUp *uint64 `json:"EnableMakeUp,omitnil,omitempty" name:"EnableMakeUp"`
}

type RunTasksByMultiWorkflowRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID List
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Whether to supplement intermediate instances 0. Do not supplement 1. Supplement instance
	EnableMakeUp *uint64 `json:"EnableMakeUp,omitnil,omitempty" name:"EnableMakeUp"`
}

func (r *RunTasksByMultiWorkflowRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RunTasksByMultiWorkflowRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowIds")
	delete(f, "EnableMakeUp")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "RunTasksByMultiWorkflowRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type RunTasksByMultiWorkflowResponseParams struct {
	// Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
	Data *OperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type RunTasksByMultiWorkflowResponse struct {
	*tchttp.BaseResponse
	Response *RunTasksByMultiWorkflowResponseParams `json:"Response"`
}

func (r *RunTasksByMultiWorkflowResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *RunTasksByMultiWorkflowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RuntimeInstanceCntTop struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Task Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
	State *string `json:"State,omitnil,omitempty" name:"State"`

	// Time Consumption
	// Note: This field may return null, indicating that no valid value can be obtained.
	RunTime *uint64 `json:"RunTime,omitnil,omitempty" name:"RunTime"`

	// Instance Running TimeNote: This field may return null, indicating that no valid value can be obtained.
	CurRunTime *string `json:"CurRunTime,omitnil,omitempty" name:"CurRunTime"`

	// Waiting for Scheduling Duration
	// Note: This field may return null, indicating that no valid value can be obtained.
	WaitScheduleTime *uint64 `json:"WaitScheduleTime,omitnil,omitempty" name:"WaitScheduleTime"`
}

// Predefined struct for user
type SaveCustomFunctionRequestParams struct {
	// Function Unique Identifier
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Classification: Window functions, Aggregation functions, Date functions...
	Kind *string `json:"Kind,omitnil,omitempty" name:"Kind"`

	// Cluster Engine Instance
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Class
	ClassName *string `json:"ClassName,omitnil,omitempty" name:"ClassName"`

	// Resource list
	ResourceList []*FunctionResource `json:"ResourceList,omitnil,omitempty" name:"ResourceList"`

	// Function Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Usage
	Usage *string `json:"Usage,omitnil,omitempty" name:"Usage"`

	// Parameter description
	ParamDesc *string `json:"ParamDesc,omitnil,omitempty" name:"ParamDesc"`

	// Return value description
	ReturnDesc *string `json:"ReturnDesc,omitnil,omitempty" name:"ReturnDesc"`

	// Sample code
	Example *string `json:"Example,omitnil,omitempty" name:"Example"`

	// Project ID, cannot be modified, used by DLC when saving the function
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database Name, cannot be modified, used by DLC when saving the function
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Function Name, cannot be modified, used by DLC when saving the function
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type SaveCustomFunctionRequest struct {
	*tchttp.BaseRequest
	
	// Function Unique Identifier
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Classification: Window functions, Aggregation functions, Date functions...
	Kind *string `json:"Kind,omitnil,omitempty" name:"Kind"`

	// Cluster Engine Instance
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Class
	ClassName *string `json:"ClassName,omitnil,omitempty" name:"ClassName"`

	// Resource list
	ResourceList []*FunctionResource `json:"ResourceList,omitnil,omitempty" name:"ResourceList"`

	// Function Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Usage
	Usage *string `json:"Usage,omitnil,omitempty" name:"Usage"`

	// Parameter description
	ParamDesc *string `json:"ParamDesc,omitnil,omitempty" name:"ParamDesc"`

	// Return value description
	ReturnDesc *string `json:"ReturnDesc,omitnil,omitempty" name:"ReturnDesc"`

	// Sample code
	Example *string `json:"Example,omitnil,omitempty" name:"Example"`

	// Project ID, cannot be modified, used by DLC when saving the function
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database Name, cannot be modified, used by DLC when saving the function
	DbName *string `json:"DbName,omitnil,omitempty" name:"DbName"`

	// Function Name, cannot be modified, used by DLC when saving the function
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

func (r *SaveCustomFunctionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SaveCustomFunctionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "FunctionId")
	delete(f, "Kind")
	delete(f, "ClusterIdentifier")
	delete(f, "ClassName")
	delete(f, "ResourceList")
	delete(f, "Description")
	delete(f, "Usage")
	delete(f, "ParamDesc")
	delete(f, "ReturnDesc")
	delete(f, "Example")
	delete(f, "ProjectId")
	delete(f, "DbName")
	delete(f, "Name")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SaveCustomFunctionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SaveCustomFunctionResponseParams struct {
	// Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SaveCustomFunctionResponse struct {
	*tchttp.BaseResponse
	Response *SaveCustomFunctionResponseParams `json:"Response"`
}

func (r *SaveCustomFunctionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SaveCustomFunctionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SchedulerTaskInstanceInfo struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Instance Running Time
	CurRunDate *string `json:"CurRunDate,omitnil,omitempty" name:"CurRunDate"`
}

type SchemaDetail struct {
	// Column
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnKey *string `json:"ColumnKey,omitnil,omitempty" name:"ColumnKey"`

	// DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// NameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// TypeNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`
}

type ScreenInstanceInfo struct {
	// Statistical Indicator 0: All Instances, 1: Current Day, 2: YesterdayNote: This field may return null, indicating that no valid value can be obtained.
	CountTag *uint64 `json:"CountTag,omitnil,omitempty" name:"CountTag"`

	// Total numberNote: This field may return null, indicating that no valid value can be obtained.
	TotalNum *uint64 `json:"TotalNum,omitnil,omitempty" name:"TotalNum"`

	// RunningNote: This field may return null, indicating that no valid value can be obtained.
	RunningNum *uint64 `json:"RunningNum,omitnil,omitempty" name:"RunningNum"`

	// Pending Execution
	// Note: This field may return null, indicating that no valid value can be obtained.
	WaitRunningNum *uint64 `json:"WaitRunningNum,omitnil,omitempty" name:"WaitRunningNum"`

	// Wait for Upstream
	// Note: This field may return null, indicating that no valid value can be obtained.
	DependencyNum *uint64 `json:"DependencyNum,omitnil,omitempty" name:"DependencyNum"`

	// Waiting for Event
	// Note: This field may return null, indicating that no valid value can be obtained.
	WaitEventNum *string `json:"WaitEventNum,omitnil,omitempty" name:"WaitEventNum"`

	// Terminating
	// Note: This field may return null, indicating that no valid value can be obtained.
	StoppingNum *uint64 `json:"StoppingNum,omitnil,omitempty" name:"StoppingNum"`

	// SuccessNote: This field may return null, indicating that no valid value can be obtained.
	SucceedNum *uint64 `json:"SucceedNum,omitnil,omitempty" name:"SucceedNum"`

	// Failed
	// Note: This field may return null, indicating that no valid value can be obtained.
	FailedNum *uint64 `json:"FailedNum,omitnil,omitempty" name:"FailedNum"`
}

type ScreenTaskInfo struct {
	// Statistical Indicator 0: All Instances, 1: Current Day, 2: Yesterday
	CountTag *uint64 `json:"CountTag,omitnil,omitempty" name:"CountTag"`

	// Total numberNote: This field may return null, indicating that no valid value can be obtained.
	TotalNum *uint64 `json:"TotalNum,omitnil,omitempty" name:"TotalNum"`

	// RunningNote: This field may return null, indicating that no valid value can be obtained.
	RunningNum *uint64 `json:"RunningNum,omitnil,omitempty" name:"RunningNum"`

	// StoppingNote: This field may return null, indicating that no valid value can be obtained.
	StoppingNum *uint64 `json:"StoppingNum,omitnil,omitempty" name:"StoppingNum"`

	// StoppedNote: This field may return null, indicating that no valid value can be obtained.
	StoppedNum *uint64 `json:"StoppedNum,omitnil,omitempty" name:"StoppedNum"`

	// Pause
	// Note: This field may return null, indicating that no valid value can be obtained.
	FrozenNum *uint64 `json:"FrozenNum,omitnil,omitempty" name:"FrozenNum"`

	// Annual task
	// Note: This field may return null, indicating that no valid value can be obtained.
	YearNum *uint64 `json:"YearNum,omitnil,omitempty" name:"YearNum"`

	// Monthly task
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonthNum *uint64 `json:"MonthNum,omitnil,omitempty" name:"MonthNum"`

	// Weekly task
	// Note: This field may return null, indicating that no valid value can be obtained.
	WeekNum *uint64 `json:"WeekNum,omitnil,omitempty" name:"WeekNum"`

	// Daily task
	// Note: This field may return null, indicating that no valid value can be obtained.
	DayNum *uint64 `json:"DayNum,omitnil,omitempty" name:"DayNum"`

	// Hourly task
	// Note: This field may return null, indicating that no valid value can be obtained.
	HourNum *uint64 `json:"HourNum,omitnil,omitempty" name:"HourNum"`

	// Minute Task
	// Note: This field may return null, indicating that no valid value can be obtained.
	MinuteNum *uint64 `json:"MinuteNum,omitnil,omitempty" name:"MinuteNum"`
}

type ScriptInfoResponse struct {
	// Resource IDNote: This field may return null, indicating that no valid value can be obtained.
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// Script Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// File Extension Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	FileExtensionType *string `json:"FileExtensionType,omitnil,omitempty" name:"FileExtensionType"`

	// File TypeNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// md5 Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Md5Value *string `json:"Md5Value,omitnil,omitempty" name:"Md5Value"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// File sizeNote: This field may return null, indicating that no valid value can be obtained.
	Size *float64 `json:"Size,omitnil,omitempty" name:"Size"`

	// Local Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	LocalPath *string `json:"LocalPath,omitnil,omitempty" name:"LocalPath"`

	// Remote Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	RemotePath *string `json:"RemotePath,omitnil,omitempty" name:"RemotePath"`

	// UsernameNote: This field may return null, indicating that no valid value can be obtained.
	OwnerName *string `json:"OwnerName,omitnil,omitempty" name:"OwnerName"`

	// User ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Path Depth
	// Note: This field may return null, indicating that no valid value can be obtained.
	PathDepth *int64 `json:"PathDepth,omitnil,omitempty" name:"PathDepth"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Additional Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtraInfo *string `json:"ExtraInfo,omitnil,omitempty" name:"ExtraInfo"`

	// Local Temporary File Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	LocalTempPath *string `json:"LocalTempPath,omitnil,omitempty" name:"LocalTempPath"`

	// Local Compressed File Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	ZipPath *string `json:"ZipPath,omitnil,omitempty" name:"ZipPath"`

	// COS Bucket Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	Bucket *string `json:"Bucket,omitnil,omitempty" name:"Bucket"`

	// COS Region
	// Note: This field may return null, indicating that no valid value can be obtained.
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`
}

type ScriptRequestInfo struct {
	// Script path
	// Project area 1470575647377821696 project, under the f1 directory:
	// /datastudio/project/1470575647377821696/f1/sql1234.sql
	// Personal area:
	// /datastudio/personal/sqlTTT.sql
	FilePath *string `json:"FilePath,omitnil,omitempty" name:"FilePath"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Script Version
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// Operation Type
	Operation *string `json:"Operation,omitnil,omitempty" name:"Operation"`

	// Additional Information
	ExtraInfo *string `json:"ExtraInfo,omitnil,omitempty" name:"ExtraInfo"`

	// Bucket Name
	BucketName *string `json:"BucketName,omitnil,omitempty" name:"BucketName"`

	// Region
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// File Extension Type
	FileExtensionType *string `json:"FileExtensionType,omitnil,omitempty" name:"FileExtensionType"`
}

type SearchColumnDocVO struct {
	// Field NameNote: This field may return null, indicating that no valid value can be obtained.
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Field Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChineseName *string `json:"ChineseName,omitnil,omitempty" name:"ChineseName"`

	// Field TypeNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Field Type Length
	// Note: This field may return null, indicating that no valid value can be obtained.
	Length *uint64 `json:"Length,omitnil,omitempty" name:"Length"`

	// Field Type Precision
	// Note: This field may return null, indicating that no valid value can be obtained.
	Precision *uint64 `json:"Precision,omitnil,omitempty" name:"Precision"`

	// Field Type scale
	// Note: This field may return null, indicating that no valid value can be obtained.
	Scale *int64 `json:"Scale,omitnil,omitempty" name:"Scale"`

	// Field Default Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	DefaultValue *string `json:"DefaultValue,omitnil,omitempty" name:"DefaultValue"`

	// Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Field Order
	// Note: This field may return null, indicating that no valid value can be obtained.
	Position *int64 `json:"Position,omitnil,omitempty" name:"Position"`

	// Is Partition Field
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsPartition *bool `json:"IsPartition,omitnil,omitempty" name:"IsPartition"`

	// Index Type on the column Primary Key: PRI, Unique Index: UNI, General Index: MUL
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnKey *string `json:"ColumnKey,omitnil,omitempty" name:"ColumnKey"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	ModifiedTime *string `json:"ModifiedTime,omitnil,omitempty" name:"ModifiedTime"`
}

type SearchCondition struct {
	// Query Framework, Required
	Instance *SearchConditionInstanceNew `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Query Keyword (Task ID exact match, Task Name fuzzy match), Optional
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Sorting Order (asc, desc)
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
	SortCol *string `json:"SortCol,omitnil,omitempty" name:"SortCol"`
}

type SearchConditionInstanceNew struct {
	// Execution space, optional 
	//  "DRY_RUN"
	ExecutionSpace *string `json:"ExecutionSpace,omitnil,omitempty" name:"ExecutionSpace"`

	// Business Products, options: <DATA_DEV / DATA_QUALITY / DATA_INTEGRATION, default DATA_DEV. Non-empty. Default own project
	ProductName *string `json:"ProductName,omitnil,omitempty" name:"ProductName"`

	// Resource Group Information, optional
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`
}

type SearchConditionNew struct {
	// Query Framework, required
	Instance *SearchConditionInstanceNew `json:"Instance,omitnil,omitempty" name:"Instance"`

	// Query keyword (Task ID exact match, Task Name fuzzy match), optional
	Keyword *string `json:"Keyword,omitnil,omitempty" name:"Keyword"`

	// Sorting Order (asc, desc)
	Sort *string `json:"Sort,omitnil,omitempty" name:"Sort"`

	// Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
	SortCol *string `json:"SortCol,omitnil,omitempty" name:"SortCol"`
}

// Predefined struct for user
type SetTaskAlarmNewRequestParams struct {
	// Setting Task Timeout Alert and Failure Alert Information
	AlarmInfoList []*AlarmInfo `json:"AlarmInfoList,omitnil,omitempty" name:"AlarmInfoList"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type SetTaskAlarmNewRequest struct {
	*tchttp.BaseRequest
	
	// Setting Task Timeout Alert and Failure Alert Information
	AlarmInfoList []*AlarmInfo `json:"AlarmInfoList,omitnil,omitempty" name:"AlarmInfoList"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *SetTaskAlarmNewRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetTaskAlarmNewRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "AlarmInfoList")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SetTaskAlarmNewRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SetTaskAlarmNewResponseParams struct {
	// Returns the number of successful batch operations, the number of failures, and the total number of operations
	Data *BatchOperateResult `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SetTaskAlarmNewResponse struct {
	*tchttp.BaseResponse
	Response *SetTaskAlarmNewResponseParams `json:"Response"`
}

func (r *SetTaskAlarmNewResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SetTaskAlarmNewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleColumnInfo struct {
	// Column ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Qualified Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualifiedName *string `json:"QualifiedName,omitnil,omitempty" name:"QualifiedName"`

	// Column nameNote: This field may return null, indicating that no valid value can be obtained.
	ColumnName *string `json:"ColumnName,omitnil,omitempty" name:"ColumnName"`

	// Column Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnNameCn *string `json:"ColumnNameCn,omitnil,omitempty" name:"ColumnNameCn"`

	// Column Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnType *string `json:"ColumnType,omitnil,omitempty" name:"ColumnType"`

	// Column Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Prefix Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	PrefixPath *string `json:"PrefixPath,omitnil,omitempty" name:"PrefixPath"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Downstream Quantity
	// Note: This field may return null, indicating that no valid value can be obtained.
	DownStreamCount *int64 `json:"DownStreamCount,omitnil,omitempty" name:"DownStreamCount"`

	// Upstream Quantity
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpStreamCount *int64 `json:"UpStreamCount,omitnil,omitempty" name:"UpStreamCount"`

	// Relationship Parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	RelationParams *string `json:"RelationParams,omitnil,omitempty" name:"RelationParams"`

	// ParameterNote: This field may return null, indicating that no valid value can be obtained.
	Params *string `json:"Params,omitnil,omitempty" name:"Params"`

	// Task Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tasks []*string `json:"Tasks,omitnil,omitempty" name:"Tasks"`
}

type SimpleTaskInfo struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`
}

type SourceFieldInfo struct {
	// Field Name
	FieldName *string `json:"FieldName,omitnil,omitempty" name:"FieldName"`

	// Field Type
	FieldType *string `json:"FieldType,omitnil,omitempty" name:"FieldType"`

	// Field Alias
	Alias *string `json:"Alias,omitnil,omitempty" name:"Alias"`

	// Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	Comment *string `json:"Comment,omitnil,omitempty" name:"Comment"`
}

type SpeedValue struct {
	// Timestamp with MillisecondsNote: This field may return null, indicating that no valid value can be obtained.
	Time *uint64 `json:"Time,omitnil,omitempty" name:"Time"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	Speed *float64 `json:"Speed,omitnil,omitempty" name:"Speed"`
}

type SqlExpression struct {
	// SQL Expression Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableExpressions []*SqlExpressionTable `json:"TableExpressions,omitnil,omitempty" name:"TableExpressions"`

	// SQL Expression Column Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParamExpressions []*string `json:"ParamExpressions,omitnil,omitempty" name:"ParamExpressions"`
}

type SqlExpressionTable struct {
	// SQL expression table name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableExpression *string `json:"TableExpression,omitnil,omitempty" name:"TableExpression"`

	// SQL expression column name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnExpression []*string `json:"ColumnExpression,omitnil,omitempty" name:"ColumnExpression"`
}

type StageCloudApiRequest struct {
	// No
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// No
	StageId *string `json:"StageId,omitnil,omitempty" name:"StageId"`

	// No
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// No
	StageName *string `json:"StageName,omitnil,omitempty" name:"StageName"`

	// No
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// No
	Mode *string `json:"Mode,omitnil,omitempty" name:"Mode"`

	// No
	Version *string `json:"Version,omitnil,omitempty" name:"Version"`

	// No
	Queue *string `json:"Queue,omitnil,omitempty" name:"Queue"`

	// No
	Content *string `json:"Content,omitnil,omitempty" name:"Content"`

	// No
	Parameters []*Property `json:"Parameters,omitnil,omitempty" name:"Parameters"`

	// No
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// No
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// No
	JobType *string `json:"JobType,omitnil,omitempty" name:"JobType"`

	// No
	WorkFlowId *string `json:"WorkFlowId,omitnil,omitempty" name:"WorkFlowId"`
}

// Predefined struct for user
type StartIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// Additional parameters
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Operation Type Description
	EventDesc *string `json:"EventDesc,omitnil,omitempty" name:"EventDesc"`
}

type StartIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// Additional parameters
	ExtConfig []*RecordField `json:"ExtConfig,omitnil,omitempty" name:"ExtConfig"`

	// Operation Type Description
	EventDesc *string `json:"EventDesc,omitnil,omitempty" name:"EventDesc"`
}

func (r *StartIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StartIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "Event")
	delete(f, "ExtConfig")
	delete(f, "EventDesc")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "StartIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StartIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type StartIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *StartIntegrationTaskResponseParams `json:"Response"`
}

func (r *StartIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StartIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartTaskInfo struct {
	// Batch task type, for example, START, TIMESTAMP, RESTORE, RESUME, etc.\nNote: This field may return null, indicating that no valid value can be obtained.
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`

	// Task Id list\nNote: This field may return null, indicating that no valid value can be obtained.
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Batch task configuration, currently only used for real-time integration based on time point startup. For time point startup, a RecordField configuration with name=timestamp, value=specific timestamp needs to be set\nNote: This field may return null, indicating that no valid value can be obtained.
	Config []*RecordField `json:"Config,omitnil,omitempty" name:"Config"`

	// Operation TypeNote: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

// Predefined struct for user
type StopIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type StopIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *StopIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "StopIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type StopIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type StopIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *StopIntegrationTaskResponseParams `json:"Response"`
}

func (r *StopIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *StopIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StrToStrMap struct {
	// k
	// Note: This field may return null, indicating that no valid value can be obtained.
	K *string `json:"K,omitnil,omitempty" name:"K"`

	// v
	// Note: This field may return null, indicating that no valid value can be obtained.
	V *string `json:"V,omitnil,omitempty" name:"V"`
}

// Predefined struct for user
type SubmitCustomFunctionRequestParams struct {
	// Function Unique Identifier
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Cluster Instance ID
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Remark Information
	Comment *string `json:"Comment,omitnil,omitempty" name:"Comment"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type SubmitCustomFunctionRequest struct {
	*tchttp.BaseRequest
	
	// Function Unique Identifier
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Cluster Instance ID
	ClusterIdentifier *string `json:"ClusterIdentifier,omitnil,omitempty" name:"ClusterIdentifier"`

	// Remark Information
	Comment *string `json:"Comment,omitnil,omitempty" name:"Comment"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *SubmitCustomFunctionRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitCustomFunctionRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "FunctionId")
	delete(f, "ClusterIdentifier")
	delete(f, "Comment")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SubmitCustomFunctionRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitCustomFunctionResponseParams struct {
	// Function Unique Identifier
	// Note: This field may return null, indicating that no valid value can be obtained.
	FunctionId *string `json:"FunctionId,omitnil,omitempty" name:"FunctionId"`

	// Error Prompt
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorMessage *string `json:"ErrorMessage,omitnil,omitempty" name:"ErrorMessage"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SubmitCustomFunctionResponse struct {
	*tchttp.BaseResponse
	Response *SubmitCustomFunctionResponseParams `json:"Response"`
}

func (r *SubmitCustomFunctionResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitCustomFunctionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitSqlTaskRequestParams struct {
	// Database Type
	DatabaseType *string `json:"DatabaseType,omitnil,omitempty" name:"DatabaseType"`

	// Data Source ID
	DatasourceId *int64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Resource Group ID
	GroupId *string `json:"GroupId,omitnil,omitempty" name:"GroupId"`

	// Script File ID
	ScriptId *string `json:"ScriptId,omitnil,omitempty" name:"ScriptId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Execution Engine Instance ID
	EngineId *string `json:"EngineId,omitnil,omitempty" name:"EngineId"`

	// Script Content
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Resource Queue
	ResourceQueue *string `json:"ResourceQueue,omitnil,omitempty" name:"ResourceQueue"`

	// Database Type
	DatasourceType *string `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`

	// Compute Resource Name
	ComputeResource *string `json:"ComputeResource,omitnil,omitempty" name:"ComputeResource"`

	// Advanced Running Parameters
	RunParams *string `json:"RunParams,omitnil,omitempty" name:"RunParams"`

	// Advanced Settings
	ConfParams *string `json:"ConfParams,omitnil,omitempty" name:"ConfParams"`

	// Whether the script content is Base64 encrypted
	ScriptEncryption *bool `json:"ScriptEncryption,omitnil,omitempty" name:"ScriptEncryption"`
}

type SubmitSqlTaskRequest struct {
	*tchttp.BaseRequest
	
	// Database Type
	DatabaseType *string `json:"DatabaseType,omitnil,omitempty" name:"DatabaseType"`

	// Data Source ID
	DatasourceId *int64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Resource Group ID
	GroupId *string `json:"GroupId,omitnil,omitempty" name:"GroupId"`

	// Script File ID
	ScriptId *string `json:"ScriptId,omitnil,omitempty" name:"ScriptId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Execution Engine Instance ID
	EngineId *string `json:"EngineId,omitnil,omitempty" name:"EngineId"`

	// Script Content
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Resource Queue
	ResourceQueue *string `json:"ResourceQueue,omitnil,omitempty" name:"ResourceQueue"`

	// Database Type
	DatasourceType *string `json:"DatasourceType,omitnil,omitempty" name:"DatasourceType"`

	// Compute Resource Name
	ComputeResource *string `json:"ComputeResource,omitnil,omitempty" name:"ComputeResource"`

	// Advanced Running Parameters
	RunParams *string `json:"RunParams,omitnil,omitempty" name:"RunParams"`

	// Advanced Settings
	ConfParams *string `json:"ConfParams,omitnil,omitempty" name:"ConfParams"`

	// Whether the script content is Base64 encrypted
	ScriptEncryption *bool `json:"ScriptEncryption,omitnil,omitempty" name:"ScriptEncryption"`
}

func (r *SubmitSqlTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitSqlTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "DatabaseType")
	delete(f, "DatasourceId")
	delete(f, "GroupId")
	delete(f, "ScriptId")
	delete(f, "ProjectId")
	delete(f, "DatabaseName")
	delete(f, "EngineId")
	delete(f, "ScriptContent")
	delete(f, "ResourceQueue")
	delete(f, "DatasourceType")
	delete(f, "ComputeResource")
	delete(f, "RunParams")
	delete(f, "ConfParams")
	delete(f, "ScriptEncryption")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SubmitSqlTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitSqlTaskResponseParams struct {
	// Task Submission Record
	Record *AdhocRecord `json:"Record,omitnil,omitempty" name:"Record"`

	// Subtask Record List
	Details []*AdhocDetail `json:"Details,omitnil,omitempty" name:"Details"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SubmitSqlTaskResponse struct {
	*tchttp.BaseResponse
	Response *SubmitSqlTaskResponseParams `json:"Response"`
}

func (r *SubmitSqlTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitSqlTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitTaskRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Version Notes
	VersionRemark *string `json:"VersionRemark,omitnil,omitempty" name:"VersionRemark"`

	// Whether to Enable Scheduling
	StartScheduling *bool `json:"StartScheduling,omitnil,omitempty" name:"StartScheduling"`
}

type SubmitTaskRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Version Notes
	VersionRemark *string `json:"VersionRemark,omitnil,omitempty" name:"VersionRemark"`

	// Whether to Enable Scheduling
	StartScheduling *bool `json:"StartScheduling,omitnil,omitempty" name:"StartScheduling"`
}

func (r *SubmitTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "TaskId")
	delete(f, "VersionRemark")
	delete(f, "StartScheduling")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SubmitTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitTaskResponseParams struct {
	// Success or Failure
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SubmitTaskResponse struct {
	*tchttp.BaseResponse
	Response *SubmitTaskResponseParams `json:"Response"`
}

func (r *SubmitTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitTaskTestRunRequestParams struct {
	// taskId list
	TaskIds *string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkFlowId *string `json:"WorkFlowId,omitnil,omitempty" name:"WorkFlowId"`

	// Workflow name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Workflow Task List
	Tasks []*StageCloudApiRequest `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Remarks
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Runtime Parameters, JSON format of map
	RunParams *string `json:"RunParams,omitnil,omitempty" name:"RunParams"`

	// Script Content
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Version number
	VersionId *string `json:"VersionId,omitnil,omitempty" name:"VersionId"`
}

type SubmitTaskTestRunRequest struct {
	*tchttp.BaseRequest
	
	// taskId list
	TaskIds *string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkFlowId *string `json:"WorkFlowId,omitnil,omitempty" name:"WorkFlowId"`

	// Workflow name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Workflow Task List
	Tasks []*StageCloudApiRequest `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Remarks
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Runtime Parameters, JSON format of map
	RunParams *string `json:"RunParams,omitnil,omitempty" name:"RunParams"`

	// Script Content
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`

	// Version number
	VersionId *string `json:"VersionId,omitnil,omitempty" name:"VersionId"`
}

func (r *SubmitTaskTestRunRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitTaskTestRunRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskIds")
	delete(f, "ProjectId")
	delete(f, "WorkFlowId")
	delete(f, "Name")
	delete(f, "Tasks")
	delete(f, "Description")
	delete(f, "RunParams")
	delete(f, "ScriptContent")
	delete(f, "VersionId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SubmitTaskTestRunRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitTaskTestRunResponseParams struct {
	// Submit Run jobid
	JobId *int64 `json:"JobId,omitnil,omitempty" name:"JobId"`

	// Operation Record ID
	RecordId []*int64 `json:"RecordId,omitnil,omitempty" name:"RecordId"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SubmitTaskTestRunResponse struct {
	*tchttp.BaseResponse
	Response *SubmitTaskTestRunResponseParams `json:"Response"`
}

func (r *SubmitTaskTestRunResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitTaskTestRunResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SubmitWorkflow struct {
	// Submitted Task ID Collection
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskIds []*string `json:"TaskIds,omitnil,omitempty" name:"TaskIds"`

	// Execution Result
	Result *bool `json:"Result,omitnil,omitempty" name:"Result"`

	// Execution Status Remarks
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorDesc *string `json:"ErrorDesc,omitnil,omitempty" name:"ErrorDesc"`

	// Execution Status ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ErrorId *string `json:"ErrorId,omitnil,omitempty" name:"ErrorId"`
}

// Predefined struct for user
type SubmitWorkflowRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Submitted Version Notes
	VersionRemark *string `json:"VersionRemark,omitnil,omitempty" name:"VersionRemark"`

	// Whether to Enable Scheduling
	StartScheduling *bool `json:"StartScheduling,omitnil,omitempty" name:"StartScheduling"`
}

type SubmitWorkflowRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Submitted Version Notes
	VersionRemark *string `json:"VersionRemark,omitnil,omitempty" name:"VersionRemark"`

	// Whether to Enable Scheduling
	StartScheduling *bool `json:"StartScheduling,omitnil,omitempty" name:"StartScheduling"`
}

func (r *SubmitWorkflowRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitWorkflowRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowId")
	delete(f, "VersionRemark")
	delete(f, "StartScheduling")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SubmitWorkflowRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SubmitWorkflowResponseParams struct {
	// Execution Result
	Data *SubmitWorkflow `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SubmitWorkflowResponse struct {
	*tchttp.BaseResponse
	Response *SubmitWorkflowResponseParams `json:"Response"`
}

func (r *SubmitWorkflowResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SubmitWorkflowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SubscribeReceiver struct {
	// Recipient Uin
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReceiverUserId *uint64 `json:"ReceiverUserId,omitnil,omitempty" name:"ReceiverUserId"`

	// Recipient Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReceiverName *string `json:"ReceiverName,omitnil,omitempty" name:"ReceiverName"`

	// Recipient UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReceiverUserIdStr *string `json:"ReceiverUserIdStr,omitnil,omitempty" name:"ReceiverUserIdStr"`
}

type SubscribeWebHook struct {
	// Group Robot Type, currently supports Feishu
	// Note: This field may return null, indicating that no valid value can be obtained.
	HookType *string `json:"HookType,omitnil,omitempty" name:"HookType"`

	// Group Robot Webhook Address, configuration method refer to https://intl.cloud.tencent.com/document/product/1254/70736?from_cn_redirect=1
	// Note: This field may return null, indicating that no valid value can be obtained.
	HookAddress *string `json:"HookAddress,omitnil,omitempty" name:"HookAddress"`
}

// Predefined struct for user
type SuspendIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`
}

type SuspendIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
	Event *string `json:"Event,omitnil,omitempty" name:"Event"`
}

func (r *SuspendIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SuspendIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	delete(f, "Event")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "SuspendIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type SuspendIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type SuspendIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *SuspendIntegrationTaskResponseParams `json:"Response"`
}

func (r *SuspendIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *SuspendIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Table struct {
	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	Column []*ColumnItem `json:"Column,omitnil,omitempty" name:"Column"`

	// 1
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data []*ColumnData `json:"Data,omitnil,omitempty" name:"Data"`
}

type TableBaseInfo struct {
	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Table NameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Data Table's Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceConnectionName *string `json:"DatasourceConnectionName,omitnil,omitempty" name:"DatasourceConnectionName"`

	// Table Remarks
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableComment *string `json:"TableComment,omitnil,omitempty" name:"TableComment"`

	// TypeNote: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// Data Format Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableFormat *string `json:"TableFormat,omitnil,omitempty" name:"TableFormat"`

	// User Nickname
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserAlias *string `json:"UserAlias,omitnil,omitempty" name:"UserAlias"`

	// Table Creation User ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserSubUin *string `json:"UserSubUin,omitnil,omitempty" name:"UserSubUin"`

	// Data Governance Configuration ItemsNote: This field may return null, indicating that no valid value can be obtained.
	GovernPolicy *DlcDataGovernPolicy `json:"GovernPolicy,omitnil,omitempty" name:"GovernPolicy"`

	// Is Database Data Governance disabled, true for disabled, false for enabled
	// Note: This field may return null, indicating that no valid value can be obtained.
	DbGovernPolicyIsDisable *string `json:"DbGovernPolicyIsDisable,omitnil,omitempty" name:"DbGovernPolicyIsDisable"`
}

type TableBasicInfo struct {
	// Global Unique ID of the Table
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Data Source Global Unique ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Table NameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Engine/Storage Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// Table Types, such as View, External Table, etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableType *string `json:"TableType,omitnil,omitempty" name:"TableType"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Name in English
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Project English and Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectDisplayName *string `json:"ProjectDisplayName,omitnil,omitempty" name:"ProjectDisplayName"`

	// Responsible Person ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerId *string `json:"TableOwnerId,omitnil,omitempty" name:"TableOwnerId"`

	// Person in Charge
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerName *string `json:"TableOwnerName,omitnil,omitempty" name:"TableOwnerName"`

	// Storage locationNote: This field may return null, indicating that no valid value can be obtained.
	StorageLocation *int64 `json:"StorageLocation,omitnil,omitempty" name:"StorageLocation"`

	// Table Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Whether it is a partitioned table, 0-Full Table 1-Partition Table
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsPartitionTable *int64 `json:"IsPartitionTable,omitnil,omitempty" name:"IsPartitionTable"`

	// Partition field list
	// Note: This field may return null, indicating that no valid value can be obtained.
	PartitionColumns []*string `json:"PartitionColumns,omitnil,omitempty" name:"PartitionColumns"`

	// Storage Format
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageFormat *string `json:"StorageFormat,omitnil,omitempty" name:"StorageFormat"`

	// Storage Volume, Byte Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageSize *uint64 `json:"StorageSize,omitnil,omitempty" name:"StorageSize"`

	// Storage Volume, Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageSizeWithUnit *string `json:"StorageSizeWithUnit,omitnil,omitempty" name:"StorageSizeWithUnit"`

	// Cumulative storage [MB]
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalSizeMb *uint64 `json:"TotalSizeMb,omitnil,omitempty" name:"TotalSizeMb"`

	// Replica quantityNote: This field may return null, indicating that no valid value can be obtained.
	ReplicaCount *int64 `json:"ReplicaCount,omitnil,omitempty" name:"ReplicaCount"`

	// Number of Files
	// Note: This field may return null, indicating that no valid value can be obtained.
	FileCount *int64 `json:"FileCount,omitnil,omitempty" name:"FileCount"`

	// Total Partitions (including hive, iceberg)
	// Note: This field may return null, indicating that no valid value can be obtained.
	PartitionCount *int64 `json:"PartitionCount,omitnil,omitempty" name:"PartitionCount"`

	// Number of partition fields (including hive, iceberg)
	// Note: This field may return null, indicating that no valid value can be obtained.
	PartitionFieldCount *int64 `json:"PartitionFieldCount,omitnil,omitempty" name:"PartitionFieldCount"`

	// Lifecycle - Partition Retention Days [Effective during Partition Retention Policy]
	// Note: This field may return null, indicating that no valid value can be obtained.
	PartitionExpireDays *int64 `json:"PartitionExpireDays,omitnil,omitempty" name:"PartitionExpireDays"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Storage locationNote: This field may return null, indicating that no valid value can be obtained.
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`
}

type TableConfig struct {
	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Table Key
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableKey *string `json:"TableKey,omitnil,omitempty" name:"TableKey"`

	// Field Variable
	// Note: This field may return null, indicating that no valid value can be obtained.
	FieldConfig []*FieldConfig `json:"FieldConfig,omitnil,omitempty" name:"FieldConfig"`
}

type TableHeat struct {
	// Table IDNote: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Statistics DateNote: This field may return null, indicating that no valid value can be obtained.
	DayTime *string `json:"DayTime,omitnil,omitempty" name:"DayTime"`

	// Popularity
	// Note: This field may return null, indicating that no valid value can be obtained.
	Heat *float64 `json:"Heat,omitnil,omitempty" name:"Heat"`

	// Maximum Popularity
	// Note: This field may return null, indicating that no valid value can be obtained.
	MaxHeat *float64 `json:"MaxHeat,omitnil,omitempty" name:"MaxHeat"`
}

type TableInfo struct {
	// Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Table databaseName
	// Note: This field may return null, indicating that no valid value can be obtained.
	OriginDatabaseName *string `json:"OriginDatabaseName,omitnil,omitempty" name:"OriginDatabaseName"`

	// Table schemaName
	// Note: This field may return null, indicating that no valid value can be obtained.
	OriginSchemaName *string `json:"OriginSchemaName,omitnil,omitempty" name:"OriginSchemaName"`
}

type TableLineageBaseInfo struct {
	// Metadata Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreType *string `json:"MetastoreType,omitnil,omitempty" name:"MetastoreType"`

	// Path from Central Node to this Node
	// Note: This field may return null, indicating that no valid value can be obtained.
	PrefixPath *string `json:"PrefixPath,omitnil,omitempty" name:"PrefixPath"`

	// Space ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source IDNote: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table Lineage Parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	Params []*LineageParamRecord `json:"Params,omitnil,omitempty" name:"Params"`

	// Parent Node List
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentSet *string `json:"ParentSet,omitnil,omitempty" name:"ParentSet"`

	// Child Node List
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChildSet *string `json:"ChildSet,omitnil,omitempty" name:"ChildSet"`

	// Additional parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtParams []*RecordField `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Lineage ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Metadata Type Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreTypeName *string `json:"MetastoreTypeName,omitnil,omitempty" name:"MetastoreTypeName"`

	// Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Full Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualifiedName *string `json:"QualifiedName,omitnil,omitempty" name:"QualifiedName"`

	// Number of Downstream Nodes in Lineage
	// Note: This field may return null, indicating that no valid value can be obtained.
	DownStreamCount *int64 `json:"DownStreamCount,omitnil,omitempty" name:"DownStreamCount"`

	// Number of Upstream Nodes in Lineage
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpStreamCount *int64 `json:"UpStreamCount,omitnil,omitempty" name:"UpStreamCount"`

	// Bloodline Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Bloodline Creation Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Bloodline Update Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// Modify the task ID list of lineage
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tasks []*string `json:"Tasks,omitnil,omitempty" name:"Tasks"`
}

type TableLineageInfo struct {
	// Metadata Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreType *string `json:"MetastoreType,omitnil,omitempty" name:"MetastoreType"`

	// Space ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Data source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *string `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table Lineage Parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	Params []*LineageParamRecord `json:"Params,omitnil,omitempty" name:"Params"`

	// Parent Node List
	// Note: This field may return null, indicating that no valid value can be obtained.
	ParentSet *string `json:"ParentSet,omitnil,omitempty" name:"ParentSet"`

	// Child Node List
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChildSet *string `json:"ChildSet,omitnil,omitempty" name:"ChildSet"`

	// Additional parameters
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtParams []*RecordField `json:"ExtParams,omitnil,omitempty" name:"ExtParams"`

	// Lineage ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Metadata Type Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreTypeName *string `json:"MetastoreTypeName,omitnil,omitempty" name:"MetastoreTypeName"`

	// Table name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Full Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	QualifiedName *string `json:"QualifiedName,omitnil,omitempty" name:"QualifiedName"`

	// Number of Downstream Nodes in Lineage
	// Note: This field may return null, indicating that no valid value can be obtained.
	DownStreamCount *int64 `json:"DownStreamCount,omitnil,omitempty" name:"DownStreamCount"`

	// Number of Upstream Nodes in Lineage
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpStreamCount *int64 `json:"UpStreamCount,omitnil,omitempty" name:"UpStreamCount"`

	// Bloodline Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Path from the central node to this node
	// Note: This field may return null, indicating that no valid value can be obtained.
	PrefixPath *string `json:"PrefixPath,omitnil,omitempty" name:"PrefixPath"`

	// Bloodline Creation Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Bloodline Update Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// List of task IDs for modifying bloodline
	// Note: This field may return null, indicating that no valid value can be obtained.
	Tasks []*string `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Module/Application Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChannelType *string `json:"ChannelType,omitnil,omitempty" name:"ChannelType"`

	// Display Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	DisplayType *string `json:"DisplayType,omitnil,omitempty" name:"DisplayType"`

	// Table Types
	// Note: This field may return null, indicating that no valid value can be obtained.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// Table Types
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableType *string `json:"TableType,omitnil,omitempty" name:"TableType"`

	// datasourceName
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// DatabaseName
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// DatabaseId
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Data source.
	// Note: This field may return null, indicating that no valid values can be obtained.
	DataFromType *string `json:"DataFromType,omitnil,omitempty" name:"DataFromType"`

	// Collection id.
	// Note: This field may return null, indicating that no valid values can be obtained.
	CollectJobId *string `json:"CollectJobId,omitnil,omitempty" name:"CollectJobId"`
}

type TableMeta struct {
	// Global Unique ID of the Table
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table NameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	TableOwnerName *string `json:"TableOwnerName,omitnil,omitempty" name:"TableOwnerName"`

	// Data Source Global Unique ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceId *int64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Cluster Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterName *string `json:"ClusterName,omitnil,omitempty" name:"ClusterName"`

	// Data Source Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceName *string `json:"DatasourceName,omitnil,omitempty" name:"DatasourceName"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Table Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	TablePath *string `json:"TablePath,omitnil,omitempty" name:"TablePath"`

	// Chinese Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableNameCn *string `json:"TableNameCn,omitnil,omitempty" name:"TableNameCn"`

	// Metadata Tenant ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreId *int64 `json:"MetastoreId,omitnil,omitempty" name:"MetastoreId"`

	// Technology Type, available values: HIVE,MYSQL,KAFKA, HBASE
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetastoreType *string `json:"MetastoreType,omitnil,omitempty" name:"MetastoreType"`

	// Table Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// Column Separator
	// Note: This field may return null, indicating that no valid value can be obtained.
	ColumnSeparator *string `json:"ColumnSeparator,omitnil,omitempty" name:"ColumnSeparator"`

	// Storage Format
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageFormat *string `json:"StorageFormat,omitnil,omitempty" name:"StorageFormat"`

	// Storage Volume, Byte Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageSize *int64 `json:"StorageSize,omitnil,omitempty" name:"StorageSize"`

	// Table Types, such as hive MANAGED_TABLE;EXTERNAL_TABLE
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableType *string `json:"TableType,omitnil,omitempty" name:"TableType"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Latest Data Modification Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// Latest DDL Modification Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	DdlModifyTime *string `json:"DdlModifyTime,omitnil,omitempty" name:"DdlModifyTime"`

	// Last Access Time of Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastAccessTime *string `json:"LastAccessTime,omitnil,omitempty" name:"LastAccessTime"`

	// Project Name in English
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Data Directory ID (may be multiple)
	// Note: This field may return null, indicating that no valid value can be obtained.
	BizCatalogIds []*string `json:"BizCatalogIds,omitnil,omitempty" name:"BizCatalogIds"`

	// Data Directory (may be multiple)
	// Note: This field may return null, indicating that no valid value can be obtained.
	BizCatalogNames []*string `json:"BizCatalogNames,omitnil,omitempty" name:"BizCatalogNames"`

	// true for Favorited/false indicates not favorited
	// Note: This field may return null, indicating that no valid value can be obtained.
	HasFavorite *bool `json:"HasFavorite,omitnil,omitempty" name:"HasFavorite"`

	// LifecycleNote: This field may return null, indicating that no valid value can be obtained.
	LifeCycleTime *int64 `json:"LifeCycleTime,omitnil,omitempty" name:"LifeCycleTime"`

	// Storage Volume, displayed in appropriate units
	// Note: This field may return null, indicating that no valid value can be obtained.
	StorageSizeWithUnit *string `json:"StorageSizeWithUnit,omitnil,omitempty" name:"StorageSizeWithUnit"`

	// Instance ID of the Data Source Engine: e.g., EMR Cluster Instance ID/Data Source Instance ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// Data Source Technology Type: HIVE/MYSQL/HBASE/KAFKA etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	TechnologyType *string `json:"TechnologyType,omitnil,omitempty" name:"TechnologyType"`

	// Table English Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableNameEn *string `json:"TableNameEn,omitnil,omitempty" name:"TableNameEn"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Number of partitions in Kafka Topic
	// Note: This field may return null, indicating that no valid value can be obtained.
	Partitions *string `json:"Partitions,omitnil,omitempty" name:"Partitions"`

	// Number of replicas in Kafka Topic
	// Note: This field may return null, indicating that no valid value can be obtained.
	ReplicationFactor *string `json:"ReplicationFactor,omitnil,omitempty" name:"ReplicationFactor"`

	// Project English and Chinese Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectDisplayName *string `json:"ProjectDisplayName,omitnil,omitempty" name:"ProjectDisplayName"`

	// Last Modified Time of Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataModifyTime *string `json:"DataModifyTime,omitnil,omitempty" name:"DataModifyTime"`

	// Cluster ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Current user has Administrator Privileges
	// Note: This field may return null, indicating that no valid value can be obtained.
	HasAdminAuthority *bool `json:"HasAdminAuthority,omitnil,omitempty" name:"HasAdminAuthority"`

	// Data Source Display Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatasourceDisplayName *string `json:"DatasourceDisplayName,omitnil,omitempty" name:"DatasourceDisplayName"`

	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Total favorites on the table under the tenant
	// Note: This field may return null, indicating that no valid value can be obtained.
	FavoriteCount *int64 `json:"FavoriteCount,omitnil,omitempty" name:"FavoriteCount"`

	// Total likes on the table under the tenant
	// Note: This field may return null, indicating that no valid value can be obtained.
	LikeCount *int64 `json:"LikeCount,omitnil,omitempty" name:"LikeCount"`

	// true for liked/false for not liked status
	// Note: This field may return null, indicating that no valid value can be obtained.
	HasLike *bool `json:"HasLike,omitnil,omitempty" name:"HasLike"`

	// Asset score of the table
	// Note: This field may return null, indicating that no valid value can be obtained.
	TablePropertyScore *TablePropertyScore `json:"TablePropertyScore,omitnil,omitempty" name:"TablePropertyScore"`

	// Heat value of the table
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableHeat *TableHeat `json:"TableHeat,omitnil,omitempty" name:"TableHeat"`

	// Data source ownerProjectId
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerProjectId *string `json:"OwnerProjectId,omitnil,omitempty" name:"OwnerProjectId"`

	// Table Owner ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableOwnerId *string `json:"TableOwnerId,omitnil,omitempty" name:"TableOwnerId"`

	// System Source -CLUSTER, DB - Self Definition Source
	// Note: This field may return null, indicating that no valid value can be obtained.
	DataSourceCategory *string `json:"DataSourceCategory,omitnil,omitempty" name:"DataSourceCategory"`

	// Table Field Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	Columns []*SearchColumnDocVO `json:"Columns,omitnil,omitempty" name:"Columns"`

	// Table Collection Type
	// TABLE, VIEW, MANAGED_TABLE (Hive managed table), EXTERNAL_TABLE (Hive external table), VIRTUAL_VIEW (virtual view), MATERIALIZED_VIEW (materialized view), LATERAL_VIEW, INDEX_TABLE (index table), END_SELECT (query structure), INSTANCE (intermediate temporary table type (data lineage)), CDW (CDW table type)
	// Note: This field may return null, indicating that no valid value can be obtained.
	MetaCrawlType *string `json:"MetaCrawlType,omitnil,omitempty" name:"MetaCrawlType"`

	// Is View
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsView *bool `json:"IsView,omitnil,omitempty" name:"IsView"`

	// Storage locationNote: This field may return null, indicating that no valid value can be obtained.
	Location *string `json:"Location,omitnil,omitempty" name:"Location"`

	// Determine if it is a partitioned table 1 Yes 0 No
	// Note: This field may return null, indicating that no valid value can be obtained.
	IsPartitionTable *int64 `json:"IsPartitionTable,omitnil,omitempty" name:"IsPartitionTable"`

	// Partition Field Key
	// Note: This field may return null, indicating that no valid value can be obtained.
	PartitionColumns []*string `json:"PartitionColumns,omitnil,omitempty" name:"PartitionColumns"`

	// Lifecycle - Partition Retention Days [Valid when Partition Retention Policy is applied]
	// Note: This field may return null, indicating that no valid value can be obtained.
	PartitionExpireDays *int64 `json:"PartitionExpireDays,omitnil,omitempty" name:"PartitionExpireDays"`

	// Table Ancillary Information
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableProperties []*TableMetaProperty `json:"TableProperties,omitnil,omitempty" name:"TableProperties"`
}

type TableMetaProperty struct {
	// Attribute Key
	// Note: This field may return null, indicating that no valid value can be obtained.
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Attribute Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type TableNameFilter struct {
	// Data source type
	MsType *string `json:"MsType,omitnil,omitempty" name:"MsType"`

	// Data source ID
	DatasourceId *int64 `json:"DatasourceId,omitnil,omitempty" name:"DatasourceId"`

	// Database name
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// schema
	SchemaName *string `json:"SchemaName,omitnil,omitempty" name:"SchemaName"`

	// Table name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`
}

type TablePropertyScore struct {
	// Table ID
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Statistics Date
	DayTime *string `json:"DayTime,omitnil,omitempty" name:"DayTime"`

	// Table Integrity Score
	Integrity *float64 `json:"Integrity,omitnil,omitempty" name:"Integrity"`

	// Table Assurance Score
	Safety *float64 `json:"Safety,omitnil,omitempty" name:"Safety"`

	// Table Timeliness Score
	Timeliness *float64 `json:"Timeliness,omitnil,omitempty" name:"Timeliness"`

	// Table Stability Score
	Stability *float64 `json:"Stability,omitnil,omitempty" name:"Stability"`

	// Table Normalization Score
	Normative *float64 `json:"Normative,omitnil,omitempty" name:"Normative"`

	// Average Asset Score
	Average *float64 `json:"Average,omitnil,omitempty" name:"Average"`
}

type TableQualityDetail struct {
	// Database ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseId *string `json:"DatabaseId,omitnil,omitempty" name:"DatabaseId"`

	// Database nameNote: This field may return null, indicating that no valid value can be obtained.
	DatabaseName *string `json:"DatabaseName,omitnil,omitempty" name:"DatabaseName"`

	// Table ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Table Owner ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerUserId *int64 `json:"OwnerUserId,omitnil,omitempty" name:"OwnerUserId"`

	// Table Owner Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerUserName *string `json:"OwnerUserName,omitnil,omitempty" name:"OwnerUserName"`

	// Database Score
	// Note: This field may return null, indicating that no valid value can be obtained.
	DatabaseScore *float64 `json:"DatabaseScore,omitnil,omitempty" name:"DatabaseScore"`

	// Table Score
	// Note: This field may return null, indicating that no valid value can be obtained.
	TableScore *float64 `json:"TableScore,omitnil,omitempty" name:"TableScore"`

	// Table Month-over-Month Growth
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastPeriodRatio *float64 `json:"LastPeriodRatio,omitnil,omitempty" name:"LastPeriodRatio"`

	// 0 or not returned or null: Undefined, 1: Production, 2: Development
	// Note: This field may return null, indicating that no valid value can be obtained.
	DsEnvType *int64 `json:"DsEnvType,omitnil,omitempty" name:"DsEnvType"`
}

type TableQualityDetailPage struct {
	// Total number of items
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *int64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Table Quality List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*TableQualityDetail `json:"Items,omitnil,omitempty" name:"Items"`
}

type TableScoreStatisticsInfo struct {
	// Levels 1,2,3,4,5
	// Note: This field may return null, indicating that no valid value can be obtained.
	Level *int64 `json:"Level,omitnil,omitempty" name:"Level"`

	// PercentageNote: This field may return null, indicating that no valid value can be obtained.
	Scale *int64 `json:"Scale,omitnil,omitempty" name:"Scale"`

	// Table quantityNote: This field may return null, indicating that no valid value can be obtained.
	TableNumber *int64 `json:"TableNumber,omitnil,omitempty" name:"TableNumber"`
}

type TaskAlarmInfo struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Rule name
	RegularName *string `json:"RegularName,omitnil,omitempty" name:"RegularName"`

	// Rule Status (0 for off, 1 for on)
	RegularStatus *uint64 `json:"RegularStatus,omitnil,omitempty" name:"RegularStatus"`

	// Alert Level (0 for general, 1 for critical, 2 for urgent)
	AlarmLevel *uint64 `json:"AlarmLevel,omitnil,omitempty" name:"AlarmLevel"`

	// Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
	AlarmWay *string `json:"AlarmWay,omitnil,omitempty" name:"AlarmWay"`

	// Task Type (201 for real-time, 202 for offline)
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	Id *string `json:"Id,omitnil,omitempty" name:"Id"`

	// Rule ID
	RegularId *string `json:"RegularId,omitnil,omitempty" name:"RegularId"`

	// Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause,4 Write Speed, 5 Read Speed, 6 Read Throughput, 7 Write Throughput, 8 Dirty Data Byte Count, 9 Number of Dirty Data Entries
	AlarmIndicator *uint64 `json:"AlarmIndicator,omitnil,omitempty" name:"AlarmIndicator"`

	// Metric Threshold (1 for the first run failure of an offline task, 2 for all retries failed of an offline task)
	// Note: This field may return null, indicating that no valid value can be obtained.
	TriggerType *uint64 `json:"TriggerType,omitnil,omitempty" name:"TriggerType"`

	// Estimated Timeout Duration (Minute Level)
	// Note: This field may return null, indicating that no valid value can be obtained.
	EstimatedTime *uint64 `json:"EstimatedTime,omitnil,omitempty" name:"EstimatedTime"`

	// Alert Recipient ID, separated by commas
	AlarmRecipientId *string `json:"AlarmRecipientId,omitnil,omitempty" name:"AlarmRecipientId"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// CreatorNote: This field may return null, indicating that no valid value can be obtained.
	Creater *string `json:"Creater,omitnil,omitempty" name:"Creater"`

	// Alert Recipient Nickname, separated by commas
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmRecipientName *string `json:"AlarmRecipientName,omitnil,omitempty" name:"AlarmRecipientName"`

	// Alert Metric Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmIndicatorDesc *string `json:"AlarmIndicatorDesc,omitnil,omitempty" name:"AlarmIndicatorDesc"`

	// Parameters needed for real-time task alerts, 1 is greater than, 2 is less than
	// Note: This field may return null, indicating that no valid value can be obtained.
	Operator *uint64 `json:"Operator,omitnil,omitempty" name:"Operator"`

	// Node ID, separated by commas
	// Note: This field may return null, indicating that no valid value can be obtained.
	NodeId *string `json:"NodeId,omitnil,omitempty" name:"NodeId"`

	// Node name, separated by commas
	// Note: This field may return null, indicating that no valid value can be obtained.
	NodeName *string `json:"NodeName,omitnil,omitempty" name:"NodeName"`

	// Metric List
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmIndicatorInfos []*AlarmIndicatorInfo `json:"AlarmIndicatorInfos,omitnil,omitempty" name:"AlarmIndicatorInfos"`

	// Alert Recipient Type, 0 is designated person; 1 is task responsible person
	// Note: This field may return null, indicating that no valid value can be obtained.
	AlarmRecipientType *uint64 `json:"AlarmRecipientType,omitnil,omitempty" name:"AlarmRecipientType"`

	// Do not disturb time
	// Note: This field may return null, indicating that no valid value can be obtained.
	QuietPeriods []*QuietPeriod `json:"QuietPeriods,omitnil,omitempty" name:"QuietPeriods"`

	// Enterprise WeChat Group Hook Address, multiple hook addresses separated by commas
	// Note: This field may return null, indicating that no valid value can be obtained.
	WeComHook *string `json:"WeComHook,omitnil,omitempty" name:"WeComHook"`

	// Last Operation Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Last Operator Uin
	// Note: This field may return null, indicating that no valid value can be obtained.
	OperatorUin *string `json:"OperatorUin,omitnil,omitempty" name:"OperatorUin"`

	// Associated Task Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskCount *int64 `json:"TaskCount,omitnil,omitempty" name:"TaskCount"`

	// Monitored Object Type, 1: all tasks, 2: specified tasks, 3: specified responsible person
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorType *int64 `json:"MonitorType,omitnil,omitempty" name:"MonitorType"`

	// Monitoring Object List
	// Note: This field may return null, indicating that no valid value can be obtained.
	MonitorObjectIds []*string `json:"MonitorObjectIds,omitnil,omitempty" name:"MonitorObjectIds"`

	// Instance ID of the Last Alert
	// Note: This field may return null, indicating that no valid value can be obtained.
	LatestAlarmInstanceId *string `json:"LatestAlarmInstanceId,omitnil,omitempty" name:"LatestAlarmInstanceId"`

	// Time of the Last Alert
	// Note: This field may return null, indicating that no valid value can be obtained.
	LatestAlarmTime *string `json:"LatestAlarmTime,omitnil,omitempty" name:"LatestAlarmTime"`

	// Alert Rule Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`

	// FeiShu Group Hook Address, multiple hook addresses separated by commas
	// Note: This field may return null, indicating that no valid value can be obtained.
	LarkWebHooks *string `json:"LarkWebHooks,omitnil,omitempty" name:"LarkWebHooks"`

	// DingTalk Group Hook addresses, multiple hook addresses separated by commas
	// Note: This field may return null, indicating that no valid value can be obtained.
	DingDingWebHooks *string `json:"DingDingWebHooks,omitnil,omitempty" name:"DingDingWebHooks"`
}

type TaskByCycle struct {
	// num
	// Note: This field may return null, indicating that no valid value can be obtained.
	Number *uint64 `json:"Number,omitnil,omitempty" name:"Number"`

	// Cycle Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Project ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type TaskByStatus struct {
	// Statistical Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	CountGroup *string `json:"CountGroup,omitnil,omitempty" name:"CountGroup"`

	// DateNote: This field may return null, indicating that no valid value can be obtained.
	ShowTimeGroup *string `json:"ShowTimeGroup,omitnil,omitempty" name:"ShowTimeGroup"`

	// StatusNote: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Cycle Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// 1
	ReportTime *string `json:"ReportTime,omitnil,omitempty" name:"ReportTime"`

	// 1
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`
}

type TaskExtInfo struct {
	// Key
	Key *string `json:"Key,omitnil,omitempty" name:"Key"`

	// Value
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type TaskInfoVo struct {
	// Tenant id.
	// Note: This field may return null, indicating that no valid values can be obtained.
	AppID *string `json:"AppID,omitnil,omitempty" name:"AppID"`

	// Project ID.
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Task ID
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task name.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Task type id.
	// Note: This field may return null, indicating that no valid values can be obtained.
	TaskTypeId *uint64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Main account id.
	// Note: This field may return null, indicating that no valid values can be obtained.
	OnwerUid *string `json:"OnwerUid,omitnil,omitempty" name:"OnwerUid"`

	// Person in charge.
	// Note: This field may return null, indicating that no valid values can be obtained.
	InChargeId *string `json:"InChargeId,omitnil,omitempty" name:"InChargeId"`

	// Instance ID
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	InstanceId *string `json:"InstanceId,omitnil,omitempty" name:"InstanceId"`

	// jobId
	// Note: This field may return null, indicating that no valid values can be obtained.
	JobId *string `json:"JobId,omitnil,omitempty" name:"JobId"`

	// Engine type, DLC, EMR.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineType *string `json:"EngineType,omitnil,omitempty" name:"EngineType"`

	// Engine name
	// 
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineName *string `json:"EngineName,omitnil,omitempty" name:"EngineName"`

	// Engine sub-type.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineSubType *string `json:"EngineSubType,omitnil,omitempty" name:"EngineSubType"`

	// Engine taskId.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineTaskId *string `json:"EngineTaskId,omitnil,omitempty" name:"EngineTaskId"`

	// Engine execution status, enumerate.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeStatus *string `json:"EngineExeStatus,omitnil,omitempty" name:"EngineExeStatus"`

	// Engine execution user.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeUser *string `json:"EngineExeUser,omitnil,omitempty" name:"EngineExeUser"`

	// Engine execution start time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeStartTime *string `json:"EngineExeStartTime,omitnil,omitempty" name:"EngineExeStartTime"`

	// Engine execution end time.
	// Note: This field may return null, indicating that no valid values can be obtained.
	EngineExeEndTime *string `json:"EngineExeEndTime,omitnil,omitempty" name:"EngineExeEndTime"`

	// DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
	// Note: This field may return null, indicating that no valid values can be obtained.
	ProductSource *string `json:"ProductSource,omitnil,omitempty" name:"ProductSource"`
}

type TaskInnerInfo struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Task Name
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Cycle Type 0: Crontab Type, 1: minutes, 2: Hour, 3: Days, 4: Weekly, 5: Month, 6: One-time, 7: User-driven, 10: Elastic Cycle (Week), 11: Elastic Cycle (Month), 12: Year, 13: Instant Trigger (Instant Type), isolated from normal cyclic scheduling tasks
	CycleType *int64 `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Virtual Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualTaskId *string `json:"VirtualTaskId,omitnil,omitempty" name:"VirtualTaskId"`

	// Virtual Task Marker
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`

	// Real Task Workflow ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	RealWorkflowId *string `json:"RealWorkflowId,omitnil,omitempty" name:"RealWorkflowId"`
}

type TaskInstanceCountDto struct {
	// Number of Successful Instances
	Success *uint64 `json:"Success,omitnil,omitempty" name:"Success"`

	// Number of Instances in Execution
	Running *uint64 `json:"Running,omitnil,omitempty" name:"Running"`

	// Number of Instances Waiting
	Waiting *uint64 `json:"Waiting,omitnil,omitempty" name:"Waiting"`

	// Number of Instances Waiting for Upstream
	Depend *uint64 `json:"Depend,omitnil,omitempty" name:"Depend"`

	// Failed Instance Count
	Failed *uint64 `json:"Failed,omitnil,omitempty" name:"Failed"`

	// Permanently Terminated Instance Count
	Stopped *uint64 `json:"Stopped,omitnil,omitempty" name:"Stopped"`
}

type TaskLockStatus struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Lock Holder
	Locker *string `json:"Locker,omitnil,omitempty" name:"Locker"`

	// Is the current operating user the lock holder? 1 means yes, 0 means no
	IsLocker *int64 `json:"IsLocker,omitnil,omitempty" name:"IsLocker"`

	// Is lock contention possible? 1 means yes, 0 means no
	IsRob *int64 `json:"IsRob,omitnil,omitempty" name:"IsRob"`
}

// Predefined struct for user
type TaskLogRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Start timestamp, unit: milliseconds
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timestamp, unit: milliseconds
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Number of log pulls, default 100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// Log sorting, desc for descending, asc for ascending
	OrderType *string `json:"OrderType,omitnil,omitempty" name:"OrderType"`

	// Real-time task 201 Offline task 202 Default is real-time task
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

type TaskLogRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Start timestamp, unit: milliseconds
	StartTime *uint64 `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timestamp, unit: milliseconds
	EndTime *uint64 `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Number of log pulls, default 100
	Limit *uint64 `json:"Limit,omitnil,omitempty" name:"Limit"`

	// Log sorting, desc for descending, asc for ascending
	OrderType *string `json:"OrderType,omitnil,omitempty" name:"OrderType"`

	// Real-time task 201 Offline task 202 Default is real-time task
	TaskType *uint64 `json:"TaskType,omitnil,omitempty" name:"TaskType"`
}

func (r *TaskLogRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TaskLogRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "StartTime")
	delete(f, "EndTime")
	delete(f, "ProjectId")
	delete(f, "Limit")
	delete(f, "OrderType")
	delete(f, "TaskType")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "TaskLogRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type TaskLogResponseParams struct {
	// Detailed task logs
	LogContentList []*LogContent `json:"LogContentList,omitnil,omitempty" name:"LogContentList"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type TaskLogResponse struct {
	*tchttp.BaseResponse
	Response *TaskLogResponseParams `json:"Response"`
}

func (r *TaskLogResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TaskLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskOpsDto struct {
	// Task IDNote: This field may return null, indicating that no valid value can be obtained.
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Virtual Task ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualTaskId *string `json:"VirtualTaskId,omitnil,omitempty" name:"VirtualTaskId"`

	// Virtual Task Marker
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualFlag *bool `json:"VirtualFlag,omitnil,omitempty" name:"VirtualFlag"`

	// Task NameNote: This field may return null, indicating that no valid value can be obtained.
	TaskName *string `json:"TaskName,omitnil,omitempty" name:"TaskName"`

	// Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Actual Workflow ID when the task is a virtual task
	// Note: This field may return null, indicating that no valid value can be obtained.
	RealWorkflowId *string `json:"RealWorkflowId,omitnil,omitempty" name:"RealWorkflowId"`

	// Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Folder ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Folder Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Latest Update Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastUpdate *string `json:"LastUpdate,omitnil,omitempty" name:"LastUpdate"`

	// Task StatusNote: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	InCharge *string `json:"InCharge,omitnil,omitempty" name:"InCharge"`

	// Responsible User ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	InChargeId *string `json:"InChargeId,omitnil,omitempty" name:"InChargeId"`

	// Scheduling Effective Date
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// Scheduling End Date
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Execution Time Left Closed Interval
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution Time Right Closed Interval
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// Cycle Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Step Length
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Scheduling Cron Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Delayed Execution Time, unit=minutes
	// Note: This field may return null, indicating that no valid value can be obtained.
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Start Execution Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartupTime *uint64 `json:"StartupTime,omitnil,omitempty" name:"StartupTime"`

	// Retry Wait Time, unit=minutes
	// Note: This field may return null, indicating that no valid value can be obtained.
	RetryWait *uint64 `json:"RetryWait,omitnil,omitempty" name:"RetryWait"`

	// Whether to Retry, 1 represents retryable
	// Note: This field may return null, indicating that no valid value can be obtained.
	RetryAble *uint64 `json:"RetryAble,omitnil,omitempty" name:"RetryAble"`

	// Scheduling Configuration - Elastic Cycle Configuration, available for Hour/Weekly/Month/Year schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Limit on Number of Runs
	// Note: This field may return null, indicating that no valid value can be obtained.
	TryLimit *uint64 `json:"TryLimit,omitnil,omitempty" name:"TryLimit"`

	// Running Priority
	// Note: This field may return null, indicating that no valid value can be obtained.
	RunPriority *uint64 `json:"RunPriority,omitnil,omitempty" name:"RunPriority"`

	// Task TypeNote: This field may return null, indicating that no valid value can be obtained.
	TaskType *TaskTypeOpsDto `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Specified Running Nodes
	// Note: This field may return null, indicating that no valid value can be obtained.
	BrokerIp *string `json:"BrokerIp,omitnil,omitempty" name:"BrokerIp"`

	// Cluster Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	ClusterId *string `json:"ClusterId,omitnil,omitempty" name:"ClusterId"`

	// Minimum Data Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	MinDateTime *string `json:"MinDateTime,omitnil,omitempty" name:"MinDateTime"`

	// Maximum Data Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	MaxDateTime *string `json:"MaxDateTime,omitnil,omitempty" name:"MaxDateTime"`

	// Runtime Timeout
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionTTL *int64 `json:"ExecutionTTL,omitnil,omitempty" name:"ExecutionTTL"`

	// Self-Dependency Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SelfDepend *string `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// Left Coordinate
	// Note: This field may return null, indicating that no valid value can be obtained.
	LeftCoordinate *float64 `json:"LeftCoordinate,omitnil,omitempty" name:"LeftCoordinate"`

	// Top Coordinate
	// Note: This field may return null, indicating that no valid value can be obtained.
	TopCoordinate *float64 `json:"TopCoordinate,omitnil,omitempty" name:"TopCoordinate"`

	// Task Remark
	// Note: This field may return null, indicating that no valid value can be obtained.
	Notes *string `json:"Notes,omitnil,omitempty" name:"Notes"`

	// Task Initialization Strategy
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceInitStrategy *string `json:"InstanceInitStrategy,omitnil,omitempty" name:"InstanceInitStrategy"`

	// Compute Queue
	// Note: This field may return null, indicating that no valid value can be obtained.
	YarnQueue *string `json:"YarnQueue,omitnil,omitempty" name:"YarnQueue"`

	// Latest Schedule Submission Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	LastSchedulerCommitTime *string `json:"LastSchedulerCommitTime,omitnil,omitempty" name:"LastSchedulerCommitTime"`

	// Task Start Time Calculated by cron Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	NormalizedJobStartTime *string `json:"NormalizedJobStartTime,omitnil,omitempty" name:"NormalizedJobStartTime"`

	// Scheduling Plan Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerDesc *string `json:"SchedulerDesc,omitnil,omitempty" name:"SchedulerDesc"`

	// Compute Resource Group
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceGroup *string `json:"ResourceGroup,omitnil,omitempty" name:"ResourceGroup"`

	// Task Creator
	// Note: This field may return null, indicating that no valid value can be obtained.
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Task Dependency Type: and, or
	// Note: This field may return null, indicating that no valid value can be obtained.
	DependencyRel *string `json:"DependencyRel,omitnil,omitempty" name:"DependencyRel"`

	// Task Workflow Dependency: yes, no
	// Note: This field may return null, indicating that no valid value can be obtained.
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`

	// Event Listening Configuration
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventListenerConfig *string `json:"EventListenerConfig,omitnil,omitempty" name:"EventListenerConfig"`

	// Event-driven Configuration
	// Note: This field may return null, indicating that no valid value can be obtained.
	EventPublisherConfig *string `json:"EventPublisherConfig,omitnil,omitempty" name:"EventPublisherConfig"`

	// Virtual Task Status
	// Note: This field may return null, indicating that no valid value can be obtained.
	VirtualTaskStatus *string `json:"VirtualTaskStatus,omitnil,omitempty" name:"VirtualTaskStatus"`

	// Task Dependency Edge Details
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskLinkInfo *LinkOpsDto `json:"TaskLinkInfo,omitnil,omitempty" name:"TaskLinkInfo"`

	// Task Product TypeNote: This field may return null, indicating that no valid value can be obtained.
	ProductName *string `json:"ProductName,omitnil,omitempty" name:"ProductName"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project nameNote: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Main Account userId
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnId *string `json:"OwnId,omitnil,omitempty" name:"OwnId"`

	// User userId
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserId *string `json:"UserId,omitnil,omitempty" name:"UserId"`

	// Tenant ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TenantId *string `json:"TenantId,omitnil,omitempty" name:"TenantId"`

	// Updater's Nickname
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateUser *string `json:"UpdateUser,omitnil,omitempty" name:"UpdateUser"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// Updater's userId
	// Note: This field may return null, indicating that no valid value can be obtained.
	UpdateUserId *string `json:"UpdateUserId,omitnil,omitempty" name:"UpdateUserId"`

	// Task Type ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskTypeId *int64 `json:"TaskTypeId,omitnil,omitempty" name:"TaskTypeId"`

	// Task Type Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskTypeDesc *string `json:"TaskTypeDesc,omitnil,omitempty" name:"TaskTypeDesc"`

	// Whether to Display Workflow
	// Note: This field may return null, indicating that no valid value can be obtained.
	ShowWorkflow *bool `json:"ShowWorkflow,omitnil,omitempty" name:"ShowWorkflow"`

	// First Submission Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstSubmitTime *string `json:"FirstSubmitTime,omitnil,omitempty" name:"FirstSubmitTime"`

	// First Execution Time
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstRunTime *string `json:"FirstRunTime,omitnil,omitempty" name:"FirstRunTime"`

	// Scheduling Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScheduleDesc *string `json:"ScheduleDesc,omitnil,omitempty" name:"ScheduleDesc"`

	// CycleNote: This field may return null, indicating that no valid value can be obtained.
	CycleNum *int64 `json:"CycleNum,omitnil,omitempty" name:"CycleNum"`

	// ExpressionsNote: This field may return null, indicating that no valid value can be obtained.
	Crontab *string `json:"Crontab,omitnil,omitempty" name:"Crontab"`

	// Start Date
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartDate *string `json:"StartDate,omitnil,omitempty" name:"StartDate"`

	// End Date
	// Note: This field may return null, indicating that no valid value can be obtained.
	EndDate *string `json:"EndDate,omitnil,omitempty" name:"EndDate"`

	// Cycle Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleUnit *string `json:"CycleUnit,omitnil,omitempty" name:"CycleUnit"`

	// Initialization Strategy
	// Note: This field may return null, indicating that no valid value can be obtained.
	InitStrategy *string `json:"InitStrategy,omitnil,omitempty" name:"InitStrategy"`

	// Hierarchy
	// Note: This field may return null, indicating that no valid value can be obtained.
	Layer *string `json:"Layer,omitnil,omitempty" name:"Layer"`

	// Source Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceServiceId *string `json:"SourceServiceId,omitnil,omitempty" name:"SourceServiceId"`

	// Source Data Source Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SourceServiceType *string `json:"SourceServiceType,omitnil,omitempty" name:"SourceServiceType"`

	// Target Data Source ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetServiceId *string `json:"TargetServiceId,omitnil,omitempty" name:"TargetServiceId"`

	// Target Data Source Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	TargetServiceType *string `json:"TargetServiceType,omitnil,omitempty" name:"TargetServiceType"`

	// Subtask List
	// Note: This field may return null, indicating that no valid value can be obtained.
	TasksStr *string `json:"TasksStr,omitnil,omitempty" name:"TasksStr"`

	// Whether the Task Version Has Been Submitted
	// Note: This field may return null, indicating that no valid value can be obtained.
	Submit *bool `json:"Submit,omitnil,omitempty" name:"Submit"`

	// Resource Group IDNote: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupId *string `json:"ExecutorGroupId,omitnil,omitempty" name:"ExecutorGroupId"`

	// Resource Group NameNote: This field may return null, indicating that no valid value can be obtained.
	ExecutorGroupName *string `json:"ExecutorGroupName,omitnil,omitempty" name:"ExecutorGroupName"`
}

type TaskScriptContent struct {
	// Script content Base64 encoded
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScriptContent *string `json:"ScriptContent,omitnil,omitempty" name:"ScriptContent"`
}

type TaskTag struct {
	// Tag Name
	TagName *string `json:"TagName,omitnil,omitempty" name:"TagName"`

	// Tag Value List
	TagValues []*string `json:"TagValues,omitnil,omitempty" name:"TagValues"`
}

type TaskTypeCnt struct {
	// Statistical value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Number *string `json:"Number,omitnil,omitempty" name:"Number"`

	// Task TypeNote: This field may return null, indicating that no valid value can be obtained.
	TaskType *string `json:"TaskType,omitnil,omitempty" name:"TaskType"`

	// Type name
	// Note: This field may return null, indicating that no valid value can be obtained.
	TypeName *string `json:"TypeName,omitnil,omitempty" name:"TypeName"`
}

type TaskTypeMap struct {
	// key
	Key *int64 `json:"Key,omitnil,omitempty" name:"Key"`

	// value
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type TaskTypeOpsDto struct {
	// Task Type Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	TypeDesc *string `json:"TypeDesc,omitnil,omitempty" name:"TypeDesc"`

	// Task Type ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	TypeId *int64 `json:"TypeId,omitnil,omitempty" name:"TypeId"`

	// Task Type Categorization
	// Note: This field may return null, indicating that no valid value can be obtained.
	TypeSort *string `json:"TypeSort,omitnil,omitempty" name:"TypeSort"`
}

type TaskVersionInstance struct {
	// Instance Version Number
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceVersion *int64 `json:"InstanceVersion,omitnil,omitempty" name:"InstanceVersion"`

	// Instance Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	VersionDesc *string `json:"VersionDesc,omitnil,omitempty" name:"VersionDesc"`

	// 0, "Add",1, "Modify"
	// Note: This field may return null, indicating that no valid value can be obtained.
	ChangeType *int64 `json:"ChangeType,omitnil,omitempty" name:"ChangeType"`

	// Version Submitter UIN
	// Note: This field may return null, indicating that no valid value can be obtained.
	SubmitterUin *string `json:"SubmitterUin,omitnil,omitempty" name:"SubmitterUin"`

	// Submission Date
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceDate *string `json:"InstanceDate,omitnil,omitempty" name:"InstanceDate"`

	// 0, "Disabled",1, "Enabled (Production)"
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceStatus *int64 `json:"InstanceStatus,omitnil,omitempty" name:"InstanceStatus"`
}

type ThresholdValue struct {
	// Threshold type 1. Low threshold 2. High threshold 3. Normal threshold 4. Enumerated values
	// Note: This field may return null, indicating that no valid value can be obtained.
	ValueType *uint64 `json:"ValueType,omitnil,omitempty" name:"ValueType"`

	// ThresholdNote: This field may return null, indicating that no valid value can be obtained.
	Value *string `json:"Value,omitnil,omitempty" name:"Value"`
}

type TopTableStat struct {
	// Alarm Table List
	AlarmTables []*TopTableStatItem `json:"AlarmTables,omitnil,omitempty" name:"AlarmTables"`

	// Block Table List
	PipelineTables []*TopTableStatItem `json:"PipelineTables,omitnil,omitempty" name:"PipelineTables"`
}

type TopTableStatItem struct {
	// Table Id
	TableId *string `json:"TableId,omitnil,omitempty" name:"TableId"`

	// Table nameNote: This field may return null, indicating that no valid value can be obtained.
	TableName *string `json:"TableName,omitnil,omitempty" name:"TableName"`

	// Number
	Cnt *uint64 `json:"Cnt,omitnil,omitempty" name:"Cnt"`
}

// Predefined struct for user
type TriggerDsEventRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Instance Information
	EventCaseList []*EventCaseDTO `json:"EventCaseList,omitnil,omitempty" name:"EventCaseList"`

	// Event Instance Information (Continuous Time)
	EventBatchCaseList []*EventBatchCaseDTO `json:"EventBatchCaseList,omitnil,omitempty" name:"EventBatchCaseList"`
}

type TriggerDsEventRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Event Instance Information
	EventCaseList []*EventCaseDTO `json:"EventCaseList,omitnil,omitempty" name:"EventCaseList"`

	// Event Instance Information (Continuous Time)
	EventBatchCaseList []*EventBatchCaseDTO `json:"EventBatchCaseList,omitnil,omitempty" name:"EventBatchCaseList"`
}

func (r *TriggerDsEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TriggerDsEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "EventCaseList")
	delete(f, "EventBatchCaseList")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "TriggerDsEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type TriggerDsEventResponseParams struct {
	// Operation resultNote: This field may return null, indicating that no valid value can be obtained.
	Data *BatchOpsDTO `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type TriggerDsEventResponse struct {
	*tchttp.BaseResponse
	Response *TriggerDsEventResponseParams `json:"Response"`
}

func (r *TriggerDsEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TriggerDsEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type TriggerEventRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Case Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Time format: If the trigger time is selected as June 21, 2022, it should be set to 20220621
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

type TriggerEventRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Case Name
	Name *string `json:"Name,omitnil,omitempty" name:"Name"`

	// Time format: If the trigger time is selected as June 21, 2022, it should be set to 20220621
	Dimension *string `json:"Dimension,omitnil,omitempty" name:"Dimension"`

	// Description
	Description *string `json:"Description,omitnil,omitempty" name:"Description"`
}

func (r *TriggerEventRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TriggerEventRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "Name")
	delete(f, "Dimension")
	delete(f, "Description")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "TriggerEventRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type TriggerEventResponseParams struct {
	// Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
	Data *BatchReturn `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type TriggerEventResponse struct {
	*tchttp.BaseResponse
	Response *TriggerEventResponseParams `json:"Response"`
}

func (r *TriggerEventResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *TriggerEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UnlockIntegrationTaskRequestParams struct {
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type UnlockIntegrationTaskRequest struct {
	*tchttp.BaseRequest
	
	// Task ID
	TaskId *string `json:"TaskId,omitnil,omitempty" name:"TaskId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *UnlockIntegrationTaskRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UnlockIntegrationTaskRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "TaskId")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UnlockIntegrationTaskRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UnlockIntegrationTaskResponseParams struct {
	// Operation Success or Failure Indicator
	Data *bool `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UnlockIntegrationTaskResponse struct {
	*tchttp.BaseResponse
	Response *UnlockIntegrationTaskResponseParams `json:"Response"`
}

func (r *UnlockIntegrationTaskResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UnlockIntegrationTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateProjectUserRoleRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// User ID
	UserIds []*string `json:"UserIds,omitnil,omitempty" name:"UserIds"`

	// Role ID
	RoleIds []*string `json:"RoleIds,omitnil,omitempty" name:"RoleIds"`
}

type UpdateProjectUserRoleRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// User ID
	UserIds []*string `json:"UserIds,omitnil,omitempty" name:"UserIds"`

	// Role ID
	RoleIds []*string `json:"RoleIds,omitnil,omitempty" name:"RoleIds"`
}

func (r *UpdateProjectUserRoleRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateProjectUserRoleRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "UserIds")
	delete(f, "RoleIds")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UpdateProjectUserRoleRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateProjectUserRoleResponseParams struct {
	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UpdateProjectUserRoleResponse struct {
	*tchttp.BaseResponse
	Response *UpdateProjectUserRoleResponseParams `json:"Response"`
}

func (r *UpdateProjectUserRoleResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateProjectUserRoleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateWorkflowOwnerRequestParams struct {
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow IDs
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Person in charge, separated by ';'
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Person in Charge UserId, separated by ';'
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`
}

type UpdateWorkflowOwnerRequest struct {
	*tchttp.BaseRequest
	
	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Workflow IDs
	WorkflowIds []*string `json:"WorkflowIds,omitnil,omitempty" name:"WorkflowIds"`

	// Person in charge, separated by ';'
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Person in Charge UserId, separated by ';'
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`
}

func (r *UpdateWorkflowOwnerRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateWorkflowOwnerRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ProjectId")
	delete(f, "WorkflowIds")
	delete(f, "Owner")
	delete(f, "OwnerId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UpdateWorkflowOwnerRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UpdateWorkflowOwnerResponseParams struct {
	// Response Data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Data *BatchOperationOpsDto `json:"Data,omitnil,omitempty" name:"Data"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UpdateWorkflowOwnerResponse struct {
	*tchttp.BaseResponse
	Response *UpdateWorkflowOwnerResponseParams `json:"Response"`
}

func (r *UpdateWorkflowOwnerResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UpdateWorkflowOwnerResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UploadContentRequestParams struct {
	// Script Upload Information
	ScriptRequestInfo *ScriptRequestInfo `json:"ScriptRequestInfo,omitnil,omitempty" name:"ScriptRequestInfo"`

	// Request Source, WEB frontend; CLIENT client
	RequestFromSource *string `json:"RequestFromSource,omitnil,omitempty" name:"RequestFromSource"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

type UploadContentRequest struct {
	*tchttp.BaseRequest
	
	// Script Upload Information
	ScriptRequestInfo *ScriptRequestInfo `json:"ScriptRequestInfo,omitnil,omitempty" name:"ScriptRequestInfo"`

	// Request Source, WEB frontend; CLIENT client
	RequestFromSource *string `json:"RequestFromSource,omitnil,omitempty" name:"RequestFromSource"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`
}

func (r *UploadContentRequest) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UploadContentRequest) FromJsonString(s string) error {
	f := make(map[string]interface{})
	if err := json.Unmarshal([]byte(s), &f); err != nil {
		return err
	}
	delete(f, "ScriptRequestInfo")
	delete(f, "RequestFromSource")
	delete(f, "ProjectId")
	if len(f) > 0 {
		return tcerr.NewTencentCloudSDKError("ClientError.BuildRequestError", "UploadContentRequest has unknown keys!", "")
	}
	return json.Unmarshal([]byte(s), &r)
}

// Predefined struct for user
type UploadContentResponseParams struct {
	// Script Information Response
	// Note: This field may return null, indicating that no valid value can be obtained.
	ScriptInfo *ScriptInfoResponse `json:"ScriptInfo,omitnil,omitempty" name:"ScriptInfo"`

	// The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
	RequestId *string `json:"RequestId,omitnil,omitempty" name:"RequestId"`
}

type UploadContentResponse struct {
	*tchttp.BaseResponse
	Response *UploadContentResponseParams `json:"Response"`
}

func (r *UploadContentResponse) ToJsonString() string {
    b, _ := json.Marshal(r)
    return string(b)
}

// FromJsonString It is highly **NOT** recommended to use this function
// because it has no param check, nor strict type check
func (r *UploadContentResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UserFileInfo struct {
	// Resource ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	ResourceId *string `json:"ResourceId,omitnil,omitempty" name:"ResourceId"`

	// File NameNote: This field may return null, indicating that no valid value can be obtained.
	FileName *string `json:"FileName,omitnil,omitempty" name:"FileName"`

	// File Type, such as jar, zip, etc.
	// Note: This field may return null, indicating that no valid value can be obtained.
	FileExtensionType *string `json:"FileExtensionType,omitnil,omitempty" name:"FileExtensionType"`

	// File Upload Type, Resource Management as resource
	// Note: This field may return null, indicating that no valid value can be obtained.
	Type *string `json:"Type,omitnil,omitempty" name:"Type"`

	// File MD5 Value
	// Note: This field may return null, indicating that no valid value can be obtained.
	Md5Value *string `json:"Md5Value,omitnil,omitempty" name:"Md5Value"`

	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Update timeNote: This field may return null, indicating that no valid value can be obtained.
	UpdateTime *string `json:"UpdateTime,omitnil,omitempty" name:"UpdateTime"`

	// File Size, in bytes
	// Note: This field may return null, indicating that no valid value can be obtained.
	Size *uint64 `json:"Size,omitnil,omitempty" name:"Size"`

	// Local Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	LocalPath *string `json:"LocalPath,omitnil,omitempty" name:"LocalPath"`

	// Local Temporary Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	LocalTempPath *string `json:"LocalTempPath,omitnil,omitempty" name:"LocalTempPath"`

	// Remote Path
	// Note: This field may return null, indicating that no valid value can be obtained.
	RemotePath *string `json:"RemotePath,omitnil,omitempty" name:"RemotePath"`

	// File Owner's Name
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerName *string `json:"OwnerName,omitnil,omitempty" name:"OwnerName"`

	// File owner's uin
	// Note: This field may return null, indicating that no valid value can be obtained.
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// File depth
	// Note: This field may return null, indicating that no valid value can be obtained.
	PathDepth *int64 `json:"PathDepth,omitnil,omitempty" name:"PathDepth"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Additional information
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExtraInfo []*ParamInfo `json:"ExtraInfo,omitnil,omitempty" name:"ExtraInfo"`

	// Absolute path of local temporary compressed file
	// Note: This field may return null, indicating that no valid value can be obtained.
	ZipPath *string `json:"ZipPath,omitnil,omitempty" name:"ZipPath"`

	// File's belonging bucket 
	// Note: This field may return null, indicating that no valid value can be obtained.
	Bucket *string `json:"Bucket,omitnil,omitempty" name:"Bucket"`

	// Region of the file's belonging bucket
	// Note: This field may return null, indicating that no valid value can be obtained.
	Region *string `json:"Region,omitnil,omitempty" name:"Region"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	DeleteName *string `json:"DeleteName,omitnil,omitempty" name:"DeleteName"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	DeleteOwner *string `json:"DeleteOwner,omitnil,omitempty" name:"DeleteOwner"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	Operator *string `json:"Operator,omitnil,omitempty" name:"Operator"`

	// NoNote: This field may return null, indicating that no valid value can be obtained.
	OperatorName *string `json:"OperatorName,omitnil,omitempty" name:"OperatorName"`

	// Additional information base64 encoded
	// Note: This field may return null, indicating that no valid value can be obtained.
	EncodeExtraInfo *string `json:"EncodeExtraInfo,omitnil,omitempty" name:"EncodeExtraInfo"`
}

type WeightInfo struct {
	// Weight
	Weight *int64 `json:"Weight,omitnil,omitempty" name:"Weight"`

	// Dimension Type 1:Accuracy, 2:Uniqueness, 3:Integrity, 4:Consistency, 5:Timeliness, 6:Validity
	QualityDim *int64 `json:"QualityDim,omitnil,omitempty" name:"QualityDim"`
}

type WorkFlowExecuteDto struct {
	// Start TimeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timeNote: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Workflow Execution Status 0: Waiting to run, 1: Running, 2: Completed, 3: Error
	// Note: This field may return null, indicating that no valid value can be obtained.
	Status *uint64 `json:"Status,omitnil,omitempty" name:"Status"`
}

type WorkFlowExecuteDtoByPage struct {
	// Total numberNote: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// data
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*WorkFlowExecuteDto `json:"Items,omitnil,omitempty" name:"Items"`

	// Page sizeNote: This field may return null, indicating that no valid value can be obtained.
	PageSize *uint64 `json:"PageSize,omitnil,omitempty" name:"PageSize"`
}

type Workflow struct {
	// Workflow ID
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Person in Charge
	// Note: This field may return null, indicating that no valid value can be obtained.
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Responsible Person ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// Project ID
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project Identifier
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project name
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// RemarksNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowDesc *string `json:"WorkflowDesc,omitnil,omitempty" name:"WorkflowDesc"`

	// Workflow name
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Parent Folder ID
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow User Group ID If there are multiple, separate with semicolons: a;b;c
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserGroupId *string `json:"UserGroupId,omitnil,omitempty" name:"UserGroupId"`

	// Workflow User Group Name If there are multiple, separate with semicolons: a;b;c
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserGroupName *string `json:"UserGroupName,omitnil,omitempty" name:"UserGroupName"`
}

type WorkflowCanvasOpsDto struct {
	// Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow Detail Description
	// Note: This field may return null, indicating that no valid value can be obtained.
	WorkflowDesc *string `json:"WorkflowDesc,omitnil,omitempty" name:"WorkflowDesc"`

	// Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowName *string `json:"WorkflowName,omitnil,omitempty" name:"WorkflowName"`

	// Parent Folder IDNote: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Associated Folder IDs
	// Note: This field may return null, indicating that no valid value can be obtained.
	FolderIds []*string `json:"FolderIds,omitnil,omitempty" name:"FolderIds"`

	// Task ListNote: This field may return null, indicating that no valid value can be obtained.
	Tasks []*TaskOpsDto `json:"Tasks,omitnil,omitempty" name:"Tasks"`

	// Task Dependency Edge List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Links []*LinkOpsDto `json:"Links,omitnil,omitempty" name:"Links"`

	// Workflow User Group ID, if multiple, separated by semicolons: a;b;c
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserGroupId *string `json:"UserGroupId,omitnil,omitempty" name:"UserGroupId"`

	// Workflow User Group Name, if multiple, separated by semicolons: a;b;c
	// Note: This field may return null, indicating that no valid value can be obtained.
	UserGroupName *string `json:"UserGroupName,omitnil,omitempty" name:"UserGroupName"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project nameNote: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Responsible User ID
	// Note: This field may return null, indicating that no valid value can be obtained.
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`
}

type WorkflowExtOpsDto struct {
	// Number of Tasks Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskCount *uint64 `json:"TaskCount,omitnil,omitempty" name:"TaskCount"`

	// File NameNote: This field may return null, indicating that no valid value can be obtained.
	FolderName *string `json:"FolderName,omitnil,omitempty" name:"FolderName"`

	// Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
	WorkFlowId *string `json:"WorkFlowId,omitnil,omitempty" name:"WorkFlowId"`

	// Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
	Owner *string `json:"Owner,omitnil,omitempty" name:"Owner"`

	// Person in charge userId\nNote: This field may return null, indicating that no valid value can be obtained.
	OwnerId *string `json:"OwnerId,omitnil,omitempty" name:"OwnerId"`

	// Project IDNote: This field may return null, indicating that no valid value can be obtained.
	ProjectId *string `json:"ProjectId,omitnil,omitempty" name:"ProjectId"`

	// Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
	ProjectIdent *string `json:"ProjectIdent,omitnil,omitempty" name:"ProjectIdent"`

	// Project nameNote: This field may return null, indicating that no valid value can be obtained.
	ProjectName *string `json:"ProjectName,omitnil,omitempty" name:"ProjectName"`

	// Workflow DescriptionNote: This field may return null, indicating that no valid value can be obtained.
	WorkFlowDesc *string `json:"WorkFlowDesc,omitnil,omitempty" name:"WorkFlowDesc"`

	// Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
	WorkFlowName *string `json:"WorkFlowName,omitnil,omitempty" name:"WorkFlowName"`

	// Workflow file id\nNote: This field may return null, indicating that no valid value can be obtained.
	FolderId *string `json:"FolderId,omitnil,omitempty" name:"FolderId"`

	// Workflow statusNote: This field may return null, indicating that no valid value can be obtained.
	Status *string `json:"Status,omitnil,omitempty" name:"Status"`

	// Workflow creation time\nNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// Last update time\nNote: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`
}

type WorkflowExtOpsDtoPage struct {
	// Total Record Count
	// Note: This field may return null, indicating that no valid value can be obtained.
	TotalCount *uint64 `json:"TotalCount,omitnil,omitempty" name:"TotalCount"`

	// Record List
	// Note: This field may return null, indicating that no valid value can be obtained.
	Items []*WorkflowExtOpsDto `json:"Items,omitnil,omitempty" name:"Items"`
}

type WorkflowSchedulerOpsDto struct {
	// Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `json:"CreateTime,omitnil,omitempty" name:"CreateTime"`

	// CreatorNote: This field may return null, indicating that no valid value can be obtained.
	Creator *string `json:"Creator,omitnil,omitempty" name:"Creator"`

	// Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
	ModifyTime *string `json:"ModifyTime,omitnil,omitempty" name:"ModifyTime"`

	// Latency, unit=minute
	// Note: This field may return null, indicating that no valid value can be obtained.
	DelayTime *uint64 `json:"DelayTime,omitnil,omitempty" name:"DelayTime"`

	// Start Time, unit=minute
	// Note: This field may return null, indicating that no valid value can be obtained.
	StartupTime *uint64 `json:"StartupTime,omitnil,omitempty" name:"StartupTime"`

	// Task Dependency Type
	// Note: This field may return null, indicating that no valid value can be obtained.
	SelfDepend *string `json:"SelfDepend,omitnil,omitempty" name:"SelfDepend"`

	// Start TimeNote: This field may return null, indicating that no valid value can be obtained.
	StartTime *string `json:"StartTime,omitnil,omitempty" name:"StartTime"`

	// End timeNote: This field may return null, indicating that no valid value can be obtained.
	EndTime *string `json:"EndTime,omitnil,omitempty" name:"EndTime"`

	// Specified Running Time, Specified Time: e.g., Monday:1
	// Note: This field may return null, indicating that no valid value can be obtained.
	TaskAction *string `json:"TaskAction,omitnil,omitempty" name:"TaskAction"`

	// Scheduling Cycle Type, Time Unit
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleType *string `json:"CycleType,omitnil,omitempty" name:"CycleType"`

	// Scheduling Period, Interval Step unit=minute
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleStep *uint64 `json:"CycleStep,omitnil,omitempty" name:"CycleStep"`

	// Scheduling Cron Expression
	// Note: This field may return null, indicating that no valid value can be obtained.
	CrontabExpression *string `json:"CrontabExpression,omitnil,omitempty" name:"CrontabExpression"`

	// Execution Time Left Closed Interval
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionStartTime *string `json:"ExecutionStartTime,omitnil,omitempty" name:"ExecutionStartTime"`

	// Execution Time Right Closed Interval
	// Note: This field may return null, indicating that no valid value can be obtained.
	ExecutionEndTime *string `json:"ExecutionEndTime,omitnil,omitempty" name:"ExecutionEndTime"`

	// Task Instance Initialization Strategy
	// Note: This field may return null, indicating that no valid value can be obtained.
	InstanceInitStrategy *string `json:"InstanceInitStrategy,omitnil,omitempty" name:"InstanceInitStrategy"`

	// Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
	WorkflowId *string `json:"WorkflowId,omitnil,omitempty" name:"WorkflowId"`

	// Workflow Self-Dependency
	// Note: This field may return null, indicating that no valid value can be obtained.
	DependencyWorkflow *string `json:"DependencyWorkflow,omitnil,omitempty" name:"DependencyWorkflow"`

	// Scheduling Plan Interpretation
	// Note: This field may return null, indicating that no valid value can be obtained.
	SchedulerDesc *string `json:"SchedulerDesc,omitnil,omitempty" name:"SchedulerDesc"`

	// First Submission Time of Workflow
	// Note: This field may return null, indicating that no valid value can be obtained.
	FirstSubmitTime *string `json:"FirstSubmitTime,omitnil,omitempty" name:"FirstSubmitTime"`

	// Latest Submission Time of Workflow
	// Note: This field may return null, indicating that no valid value can be obtained.
	LatestSubmitTime *string `json:"LatestSubmitTime,omitnil,omitempty" name:"LatestSubmitTime"`
}

type WorkflowTaskCountOpsDto struct {
	// Number of Workflow Tasks
	// Note: This field may return null, indicating that no valid value can be obtained.
	Count *uint64 `json:"Count,omitnil,omitempty" name:"Count"`

	// Task Type Dimension Statistics
	// Note: This field may return null, indicating that no valid value can be obtained.
	TypeCount []*PairDto `json:"TypeCount,omitnil,omitempty" name:"TypeCount"`

	// Task Cycle Type Dimension Statistics
	// Note: This field may return null, indicating that no valid value can be obtained.
	CycleCount []*PairDto `json:"CycleCount,omitnil,omitempty" name:"CycleCount"`
}